// Code generated by user config generator. DO NOT EDIT.

package serviceintegration

import (
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"

	"github.com/aiven/terraform-provider-aiven/internal/sdkprovider/userconfig/diff"
)

func clickhouseKafkaUserConfig() *schema.Schema {
	return &schema.Schema{
		Description:      "ClickhouseKafka user configurable settings",
		DiffSuppressFunc: diff.SuppressUnchanged,
		Elem: &schema.Resource{Schema: map[string]*schema.Schema{"tables": {
			Description: "Tables to create",
			Elem: &schema.Resource{Schema: map[string]*schema.Schema{
				"auto_offset_reset": {
					Description:  "Action to take when there is no initial offset in offset store or the desired offset is out of range. The default value is `earliest`.",
					Optional:     true,
					Type:         schema.TypeString,
					ValidateFunc: validation.StringInSlice([]string{"smallest", "earliest", "beginning", "largest", "latest", "end"}, false),
				},
				"columns": {
					Description: "Table columns",
					Elem: &schema.Resource{Schema: map[string]*schema.Schema{
						"name": {
							Description: "Column name.",
							Required:    true,
							Type:        schema.TypeString,
						},
						"type": {
							Description: "Column type.",
							Required:    true,
							Type:        schema.TypeString,
						},
					}},
					MaxItems: 100,
					Required: true,
					Type:     schema.TypeList,
				},
				"data_format": {
					Description:  "Message data format. The default value is `JSONEachRow`.",
					Required:     true,
					Type:         schema.TypeString,
					ValidateFunc: validation.StringInSlice([]string{"Avro", "CSV", "JSONAsString", "JSONCompactEachRow", "JSONCompactStringsEachRow", "JSONEachRow", "JSONStringsEachRow", "MsgPack", "TSKV", "TSV", "TabSeparated", "RawBLOB", "AvroConfluent"}, false),
				},
				"date_time_input_format": {
					Description:  "Method to read DateTime from text input formats. The default value is `basic`.",
					Optional:     true,
					Type:         schema.TypeString,
					ValidateFunc: validation.StringInSlice([]string{"basic", "best_effort", "best_effort_us"}, false),
				},
				"group_name": {
					Description: "Kafka consumers group. The default value is `clickhouse`.",
					Required:    true,
					Type:        schema.TypeString,
				},
				"handle_error_mode": {
					Description:  "How to handle errors for Kafka engine. The default value is `default`.",
					Optional:     true,
					Type:         schema.TypeString,
					ValidateFunc: validation.StringInSlice([]string{"default", "stream"}, false),
				},
				"max_block_size": {
					Description: "Number of row collected by poll(s) for flushing data from Kafka. The default value is `0`.",
					Optional:    true,
					Type:        schema.TypeInt,
				},
				"max_rows_per_message": {
					Description: "The maximum number of rows produced in one kafka message for row-based formats. The default value is `1`.",
					Optional:    true,
					Type:        schema.TypeInt,
				},
				"name": {
					Description: "Name of the table.",
					Required:    true,
					Type:        schema.TypeString,
				},
				"num_consumers": {
					Description: "The number of consumers per table per replica. The default value is `1`.",
					Optional:    true,
					Type:        schema.TypeInt,
				},
				"poll_max_batch_size": {
					Description: "Maximum amount of messages to be polled in a single Kafka poll. The default value is `0`.",
					Optional:    true,
					Type:        schema.TypeInt,
				},
				"skip_broken_messages": {
					Description: "Skip at least this number of broken messages from Kafka topic per block. The default value is `0`.",
					Optional:    true,
					Type:        schema.TypeInt,
				},
				"topics": {
					Description: "Kafka topics",
					Elem: &schema.Resource{Schema: map[string]*schema.Schema{"name": {
						Description: "Name of the topic.",
						Required:    true,
						Type:        schema.TypeString,
					}}},
					MaxItems: 100,
					Required: true,
					Type:     schema.TypeList,
				},
			}},
			MaxItems: 100,
			Optional: true,
			Type:     schema.TypeList,
		}}},
		MaxItems: 1,
		Optional: true,
		Type:     schema.TypeList,
	}
}
