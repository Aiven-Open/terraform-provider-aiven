// Code generated by user config generator. DO NOT EDIT.

package serviceintegrationendpoint

import (
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"

	"github.com/aiven/terraform-provider-aiven/internal/sdkprovider/userconfig/diff"
)

func rsyslogUserConfig() *schema.Schema {
	return &schema.Schema{
		Description:      "Rsyslog user configurable settings",
		DiffSuppressFunc: diff.SuppressUnchanged,
		Elem: &schema.Resource{Schema: map[string]*schema.Schema{
			"ca": {
				Description: "PEM encoded CA certificate.",
				Optional:    true,
				Type:        schema.TypeString,
			},
			"cert": {
				Description: "PEM encoded client certificate.",
				Optional:    true,
				Type:        schema.TypeString,
			},
			"format": {
				Description:  "Message format. The default value is `rfc5424`.",
				Required:     true,
				Type:         schema.TypeString,
				ValidateFunc: validation.StringInSlice([]string{"rfc5424", "rfc3164", "custom"}, false),
			},
			"key": {
				Description: "PEM encoded client key.",
				Optional:    true,
				Type:        schema.TypeString,
			},
			"logline": {
				Description: "Custom syslog message format.",
				Optional:    true,
				Type:        schema.TypeString,
			},
			"max_message_size": {
				Description: "Rsyslog max message size. The default value is `8192`.",
				Optional:    true,
				Type:        schema.TypeInt,
			},
			"port": {
				Description: "Rsyslog server port. The default value is `514`.",
				Required:    true,
				Type:        schema.TypeInt,
			},
			"sd": {
				Description: "Structured data block for log message.",
				Optional:    true,
				Type:        schema.TypeString,
			},
			"server": {
				Description: "Rsyslog server IP address or hostname.",
				Required:    true,
				Type:        schema.TypeString,
			},
			"tls": {
				Description: "Require TLS. The default value is `true`.",
				Required:    true,
				Type:        schema.TypeBool,
			},
		}},
		MaxItems: 1,
		Optional: true,
		Type:     schema.TypeList,
	}
}
