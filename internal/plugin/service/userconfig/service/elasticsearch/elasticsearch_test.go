// Code generated by user config generator. DO NOT EDIT.

package elasticsearch

import (
	"context"
	"encoding/json"
	"testing"

	"github.com/google/go-cmp/cmp"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/stretchr/testify/require"

	"github.com/aiven/terraform-provider-aiven/internal/schemautil"
)

const allFields = `{
    "additional_backup_regions": [
        "foo"
    ],
    "custom_domain": "foo",
    "disable_replication_factor_adjustment": true,
    "elasticsearch": {
        "action_auto_create_index_enabled": true,
        "action_destructive_requires_name": true,
        "cluster_max_shards_per_node": 1,
        "cluster_routing_allocation_node_concurrent_recoveries": 1,
        "email_sender_name": "foo",
        "email_sender_password": "foo",
        "email_sender_username": "foo",
        "http_max_content_length": 1,
        "http_max_header_size": 1,
        "http_max_initial_line_length": 1,
        "indices_fielddata_cache_size": 1,
        "indices_memory_index_buffer_size": 1,
        "indices_queries_cache_size": 1,
        "indices_query_bool_max_clause_count": 1,
        "indices_recovery_max_bytes_per_sec": 1,
        "indices_recovery_max_concurrent_file_chunks": 1,
        "override_main_response_version": true,
        "reindex_remote_whitelist": [
            "foo"
        ],
        "script_max_compilations_rate": "foo",
        "search_max_buckets": 1,
        "thread_pool_analyze_queue_size": 1,
        "thread_pool_analyze_size": 1,
        "thread_pool_force_merge_size": 1,
        "thread_pool_get_queue_size": 1,
        "thread_pool_get_size": 1,
        "thread_pool_search_queue_size": 1,
        "thread_pool_search_size": 1,
        "thread_pool_search_throttled_queue_size": 1,
        "thread_pool_search_throttled_size": 1,
        "thread_pool_write_queue_size": 1,
        "thread_pool_write_size": 1
    },
    "elasticsearch_version": "foo",
    "index_patterns": [
        {
            "max_index_count": 1,
            "pattern": "foo",
            "sorting_algorithm": "foo"
        }
    ],
    "index_template": {
        "mapping_nested_objects_limit": 1,
        "number_of_replicas": 1,
        "number_of_shards": 1
    },
    "ip_filter": [
        {
            "description": "foo",
            "network": "foo"
        }
    ],
    "keep_index_refresh_interval": true,
    "kibana": {
        "elasticsearch_request_timeout": 1,
        "enabled": true,
        "max_old_space_size": 1
    },
    "max_index_count": 1,
    "opensearch_version": "foo",
    "private_access": {
        "elasticsearch": true,
        "kibana": true,
        "prometheus": true
    },
    "privatelink_access": {
        "elasticsearch": true,
        "kibana": true,
        "prometheus": true
    },
    "project_to_fork_from": "foo",
    "public_access": {
        "elasticsearch": true,
        "kibana": true,
        "prometheus": true
    },
    "recovery_basebackup_name": "foo",
    "service_to_fork_from": "foo",
    "static_ips": true
}`
const updateOnlyFields = `{
    "additional_backup_regions": [
        "foo"
    ],
    "custom_domain": "foo",
    "disable_replication_factor_adjustment": true,
    "elasticsearch": {
        "action_auto_create_index_enabled": true,
        "action_destructive_requires_name": true,
        "cluster_max_shards_per_node": 1,
        "cluster_routing_allocation_node_concurrent_recoveries": 1,
        "email_sender_name": "foo",
        "email_sender_password": "foo",
        "email_sender_username": "foo",
        "http_max_content_length": 1,
        "http_max_header_size": 1,
        "http_max_initial_line_length": 1,
        "indices_fielddata_cache_size": 1,
        "indices_memory_index_buffer_size": 1,
        "indices_queries_cache_size": 1,
        "indices_query_bool_max_clause_count": 1,
        "indices_recovery_max_bytes_per_sec": 1,
        "indices_recovery_max_concurrent_file_chunks": 1,
        "override_main_response_version": true,
        "reindex_remote_whitelist": [
            "foo"
        ],
        "script_max_compilations_rate": "foo",
        "search_max_buckets": 1,
        "thread_pool_analyze_queue_size": 1,
        "thread_pool_analyze_size": 1,
        "thread_pool_force_merge_size": 1,
        "thread_pool_get_queue_size": 1,
        "thread_pool_get_size": 1,
        "thread_pool_search_queue_size": 1,
        "thread_pool_search_size": 1,
        "thread_pool_search_throttled_queue_size": 1,
        "thread_pool_search_throttled_size": 1,
        "thread_pool_write_queue_size": 1,
        "thread_pool_write_size": 1
    },
    "elasticsearch_version": "foo",
    "index_patterns": [
        {
            "max_index_count": 1,
            "pattern": "foo",
            "sorting_algorithm": "foo"
        }
    ],
    "index_template": {
        "mapping_nested_objects_limit": 1,
        "number_of_replicas": 1,
        "number_of_shards": 1
    },
    "ip_filter": [
        {
            "description": "foo",
            "network": "foo"
        }
    ],
    "keep_index_refresh_interval": true,
    "kibana": {
        "elasticsearch_request_timeout": 1,
        "enabled": true,
        "max_old_space_size": 1
    },
    "max_index_count": 1,
    "opensearch_version": "foo",
    "private_access": {
        "elasticsearch": true,
        "kibana": true,
        "prometheus": true
    },
    "privatelink_access": {
        "elasticsearch": true,
        "kibana": true,
        "prometheus": true
    },
    "public_access": {
        "elasticsearch": true,
        "kibana": true,
        "prometheus": true
    },
    "recovery_basebackup_name": "foo",
    "static_ips": true
}`

func TestUserConfig(t *testing.T) {
	cases := []struct {
		name   string
		source string
		expect string
		create bool
	}{
		{
			name:   "fields to create resource",
			source: allFields,
			expect: allFields,
			create: true,
		},
		{
			name:   "only fields to update resource",
			source: allFields,
			expect: updateOnlyFields, // usually, fewer fields
			create: false,
		},
	}

	ctx := context.Background()
	diags := make(diag.Diagnostics, 0)
	for _, opt := range cases {
		t.Run(opt.name, func(t *testing.T) {
			dto := new(dtoUserConfig)
			err := json.Unmarshal([]byte(opt.source), dto)
			require.NoError(t, err)

			// From json to TF
			tfo := flattenUserConfig(ctx, diags, dto)
			require.Empty(t, diags)

			// From TF to json
			config := expandUserConfig(ctx, diags, tfo)
			require.Empty(t, diags)

			// Run specific marshal (create or update resource)
			dtoConfig, err := schemautil.MarshalUserConfig(config, opt.create)
			require.NoError(t, err)

			// Compares that output is strictly equal to the input
			// If so, the flow is valid
			b, err := json.MarshalIndent(dtoConfig, "", "    ")
			require.NoError(t, err)
			require.Empty(t, cmp.Diff(opt.expect, string(b)))
		})
	}
}
