// Code generated by user config generator. DO NOT EDIT.

package elasticsearch

import (
	"context"
	"encoding/json"

	setvalidator "github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	attr "github.com/hashicorp/terraform-plugin-framework/attr"
	datasource "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	diag "github.com/hashicorp/terraform-plugin-framework/diag"
	resource "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	booldefault "github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	int64default "github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	stringdefault "github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	validator "github.com/hashicorp/terraform-plugin-framework/schema/validator"
	types "github.com/hashicorp/terraform-plugin-framework/types"

	schemautil "github.com/aiven/terraform-provider-aiven/internal/schemautil"
)

// NewResourceSchema returns resource schema
func NewResourceSchema() resource.SetNestedBlock {
	return resource.SetNestedBlock{
		DeprecationMessage: "\"UserConfig\" is deprecated",
		Description:        "Elasticsearch user configurable settings",
		NestedObject: resource.NestedBlockObject{
			Attributes: map[string]resource.Attribute{
				"additional_backup_regions": resource.SetAttribute{
					Computed:           true,
					DeprecationMessage: "\"additional_backup_regions\" is deprecated",
					Description:        "Additional Cloud Regions for Backup Replication.",
					ElementType:        types.StringType,
					Optional:           true,
					Validators:         []validator.Set{setvalidator.SizeAtMost(1)},
				},
				"custom_domain": resource.StringAttribute{
					Computed:           true,
					DeprecationMessage: "\"custom_domain\" is deprecated",
					Description:        "Serve the web frontend using a custom CNAME pointing to the Aiven DNS name.",
					Optional:           true,
				},
				"disable_replication_factor_adjustment": resource.BoolAttribute{
					Computed:           true,
					DeprecationMessage: "\"disable_replication_factor_adjustment\" is deprecated",
					Description:        "DEPRECATED: Disable automatic replication factor adjustment for multi-node services. By default, Aiven ensures all indexes are replicated at least to two nodes. Note: Due to potential data loss in case of losing a service node, this setting can no longer be activated.",
					Optional:           true,
				},
				"elasticsearch_version": resource.StringAttribute{
					Computed:           true,
					DeprecationMessage: "\"elasticsearch_version\" is deprecated",
					Description:        "Elasticsearch major version.",
					Optional:           true,
				},
				"keep_index_refresh_interval": resource.BoolAttribute{
					Computed:           true,
					DeprecationMessage: "\"keep_index_refresh_interval\" is deprecated",
					Description:        "Aiven automation resets index.refresh_interval to default value for every index to be sure that indices are always visible to search. If it doesn't fit your case, you can disable this by setting up this flag to true.",
					Optional:           true,
				},
				"max_index_count": resource.Int64Attribute{
					Computed:           true,
					Default:            int64default.StaticInt64(0),
					DeprecationMessage: "\"max_index_count\" is deprecated",
					Description:        "DEPRECATED: use index_patterns instead. The default value is `0`.",
					Optional:           true,
				},
				"opensearch_version": resource.StringAttribute{
					Computed:           true,
					DeprecationMessage: "\"opensearch_version\" is deprecated",
					Description:        "OpenSearch major version.",
					Optional:           true,
				},
				"project_to_fork_from": resource.StringAttribute{
					Computed:           true,
					DeprecationMessage: "\"project_to_fork_from\" is deprecated",
					Description:        "Name of another project to fork a service from. This has effect only when a new service is being created.",
					Optional:           true,
				},
				"recovery_basebackup_name": resource.StringAttribute{
					Computed:           true,
					DeprecationMessage: "\"recovery_basebackup_name\" is deprecated",
					Description:        "Name of the basebackup to restore in forked service.",
					Optional:           true,
				},
				"service_to_fork_from": resource.StringAttribute{
					Computed:           true,
					DeprecationMessage: "\"service_to_fork_from\" is deprecated",
					Description:        "Name of another service to fork from. This has effect only when a new service is being created.",
					Optional:           true,
				},
				"static_ips": resource.BoolAttribute{
					Computed:           true,
					DeprecationMessage: "\"static_ips\" is deprecated",
					Description:        "Use static public IP addresses.",
					Optional:           true,
				},
			},
			Blocks: map[string]resource.Block{
				"elasticsearch": resource.SetNestedBlock{
					DeprecationMessage: "\"elasticsearch\" is deprecated",
					Description:        "Elasticsearch settings",
					NestedObject: resource.NestedBlockObject{Attributes: map[string]resource.Attribute{
						"action_auto_create_index_enabled": resource.BoolAttribute{
							Computed:           true,
							DeprecationMessage: "\"action_auto_create_index_enabled\" is deprecated",
							Description:        "Explicitly allow or block automatic creation of indices. Defaults to true.",
							Optional:           true,
						},
						"action_destructive_requires_name": resource.BoolAttribute{
							Computed:           true,
							DeprecationMessage: "\"action_destructive_requires_name\" is deprecated",
							Description:        "Require explicit index names when deleting.",
							Optional:           true,
						},
						"cluster_max_shards_per_node": resource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"cluster_max_shards_per_node\" is deprecated",
							Description:        "Controls the number of shards allowed in the cluster per data node.",
							Optional:           true,
						},
						"cluster_routing_allocation_node_concurrent_recoveries": resource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"cluster_routing_allocation_node_concurrent_recoveries\" is deprecated",
							Description:        "How many concurrent incoming/outgoing shard recoveries (normally replicas) are allowed to happen on a node. Defaults to 2.",
							Optional:           true,
						},
						"email_sender_name": resource.StringAttribute{
							Computed:           true,
							DeprecationMessage: "\"email_sender_name\" is deprecated",
							Description:        "Sender email name placeholder to be used in Opensearch Dashboards and Opensearch keystore.",
							Optional:           true,
						},
						"email_sender_password": resource.StringAttribute{
							Computed:           true,
							DeprecationMessage: "\"email_sender_password\" is deprecated",
							Description:        "Sender email password for Opensearch alerts to authenticate with SMTP server.",
							Optional:           true,
						},
						"email_sender_username": resource.StringAttribute{
							Computed:           true,
							DeprecationMessage: "\"email_sender_username\" is deprecated",
							Description:        "Sender email address for Opensearch alerts.",
							Optional:           true,
						},
						"http_max_content_length": resource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"http_max_content_length\" is deprecated",
							Description:        "Maximum content length for HTTP requests to the Elasticsearch HTTP API, in bytes.",
							Optional:           true,
						},
						"http_max_header_size": resource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"http_max_header_size\" is deprecated",
							Description:        "The max size of allowed headers, in bytes.",
							Optional:           true,
						},
						"http_max_initial_line_length": resource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"http_max_initial_line_length\" is deprecated",
							Description:        "The max length of an HTTP URL, in bytes.",
							Optional:           true,
						},
						"indices_fielddata_cache_size": resource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"indices_fielddata_cache_size\" is deprecated",
							Description:        "Relative amount. Maximum amount of heap memory used for field data cache. This is an expert setting; decreasing the value too much will increase overhead of loading field data; too much memory used for field data cache will decrease amount of heap available for other operations.",
							Optional:           true,
						},
						"indices_memory_index_buffer_size": resource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"indices_memory_index_buffer_size\" is deprecated",
							Description:        "Percentage value. Default is 10%. Total amount of heap used for indexing buffer, before writing segments to disk. This is an expert setting. Too low value will slow down indexing; too high value will increase indexing performance but causes performance issues for query performance.",
							Optional:           true,
						},
						"indices_queries_cache_size": resource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"indices_queries_cache_size\" is deprecated",
							Description:        "Percentage value. Default is 10%. Maximum amount of heap used for query cache. This is an expert setting. Too low value will decrease query performance and increase performance for other operations; too high value will cause issues with other Elasticsearch functionality.",
							Optional:           true,
						},
						"indices_query_bool_max_clause_count": resource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"indices_query_bool_max_clause_count\" is deprecated",
							Description:        "Maximum number of clauses Lucene BooleanQuery can have. The default value (1024) is relatively high, and increasing it may cause performance issues. Investigate other approaches first before increasing this value.",
							Optional:           true,
						},
						"indices_recovery_max_bytes_per_sec": resource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"indices_recovery_max_bytes_per_sec\" is deprecated",
							Description:        "Limits total inbound and outbound recovery traffic for each node. Applies to both peer recoveries as well as snapshot recoveries (i.e., restores from a snapshot). Defaults to 40mb.",
							Optional:           true,
						},
						"indices_recovery_max_concurrent_file_chunks": resource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"indices_recovery_max_concurrent_file_chunks\" is deprecated",
							Description:        "Number of file chunks sent in parallel for each recovery. Defaults to 2.",
							Optional:           true,
						},
						"override_main_response_version": resource.BoolAttribute{
							Computed:           true,
							DeprecationMessage: "\"override_main_response_version\" is deprecated",
							Description:        "Compatibility mode sets OpenSearch to report its version as 7.10 so clients continue to work. Default is false.",
							Optional:           true,
						},
						"reindex_remote_whitelist": resource.SetAttribute{
							Computed:           true,
							DeprecationMessage: "\"reindex_remote_whitelist\" is deprecated",
							Description:        "Whitelisted addresses for reindexing. Changing this value will cause all Elasticsearch instances to restart.",
							ElementType:        types.StringType,
							Optional:           true,
							Validators:         []validator.Set{setvalidator.SizeAtMost(32)},
						},
						"script_max_compilations_rate": resource.StringAttribute{
							Computed:           true,
							DeprecationMessage: "\"script_max_compilations_rate\" is deprecated",
							Description:        "Script compilation circuit breaker limits the number of inline script compilations within a period of time. Default is use-context.",
							Optional:           true,
						},
						"search_max_buckets": resource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"search_max_buckets\" is deprecated",
							Description:        "Maximum number of aggregation buckets allowed in a single response. Elasticsearch default value is used when this is not defined.",
							Optional:           true,
						},
						"thread_pool_analyze_queue_size": resource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"thread_pool_analyze_queue_size\" is deprecated",
							Description:        "Size for the thread pool queue. See documentation for exact details.",
							Optional:           true,
						},
						"thread_pool_analyze_size": resource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"thread_pool_analyze_size\" is deprecated",
							Description:        "Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.",
							Optional:           true,
						},
						"thread_pool_force_merge_size": resource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"thread_pool_force_merge_size\" is deprecated",
							Description:        "Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.",
							Optional:           true,
						},
						"thread_pool_get_queue_size": resource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"thread_pool_get_queue_size\" is deprecated",
							Description:        "Size for the thread pool queue. See documentation for exact details.",
							Optional:           true,
						},
						"thread_pool_get_size": resource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"thread_pool_get_size\" is deprecated",
							Description:        "Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.",
							Optional:           true,
						},
						"thread_pool_search_queue_size": resource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"thread_pool_search_queue_size\" is deprecated",
							Description:        "Size for the thread pool queue. See documentation for exact details.",
							Optional:           true,
						},
						"thread_pool_search_size": resource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"thread_pool_search_size\" is deprecated",
							Description:        "Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.",
							Optional:           true,
						},
						"thread_pool_search_throttled_queue_size": resource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"thread_pool_search_throttled_queue_size\" is deprecated",
							Description:        "Size for the thread pool queue. See documentation for exact details.",
							Optional:           true,
						},
						"thread_pool_search_throttled_size": resource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"thread_pool_search_throttled_size\" is deprecated",
							Description:        "Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.",
							Optional:           true,
						},
						"thread_pool_write_queue_size": resource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"thread_pool_write_queue_size\" is deprecated",
							Description:        "Size for the thread pool queue. See documentation for exact details.",
							Optional:           true,
						},
						"thread_pool_write_size": resource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"thread_pool_write_size\" is deprecated",
							Description:        "Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.",
							Optional:           true,
						},
					}},
				},
				"index_patterns": resource.SetNestedBlock{
					DeprecationMessage: "\"index_patterns\" is deprecated",
					Description:        "Index patterns",
					NestedObject: resource.NestedBlockObject{Attributes: map[string]resource.Attribute{
						"max_index_count": resource.Int64Attribute{
							Description: "Maximum number of indexes to keep.",
							Required:    true,
						},
						"pattern": resource.StringAttribute{
							Description: "fnmatch pattern.",
							Required:    true,
						},
						"sorting_algorithm": resource.StringAttribute{
							Computed:    true,
							Default:     stringdefault.StaticString("creation_date"),
							Description: "Deletion sorting algorithm. The default value is `creation_date`.",
							Optional:    true,
						},
					}},
					Validators: []validator.Set{setvalidator.SizeAtMost(512)},
				},
				"index_template": resource.SetNestedBlock{
					DeprecationMessage: "\"index_template\" is deprecated",
					Description:        "Template settings for all new indexes",
					NestedObject: resource.NestedBlockObject{Attributes: map[string]resource.Attribute{
						"mapping_nested_objects_limit": resource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"mapping_nested_objects_limit\" is deprecated",
							Description:        "The maximum number of nested JSON objects that a single document can contain across all nested types. This limit helps to prevent out of memory errors when a document contains too many nested objects. Default is 10000.",
							Optional:           true,
						},
						"number_of_replicas": resource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"number_of_replicas\" is deprecated",
							Description:        "The number of replicas each primary shard has.",
							Optional:           true,
						},
						"number_of_shards": resource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"number_of_shards\" is deprecated",
							Description:        "The number of primary shards that an index should have.",
							Optional:           true,
						},
					}},
				},
				"ip_filter": resource.SetNestedBlock{
					DeprecationMessage: "\"ip_filter\" is deprecated",
					Description:        "Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'",
					NestedObject: resource.NestedBlockObject{Attributes: map[string]resource.Attribute{
						"description": resource.StringAttribute{
							Computed:    true,
							Description: "Description for IP filter list entry.",
							Optional:    true,
						},
						"network": resource.StringAttribute{
							Description: "CIDR address block.",
							Required:    true,
						},
					}},
					Validators: []validator.Set{setvalidator.SizeAtMost(1024)},
				},
				"kibana": resource.SetNestedBlock{
					DeprecationMessage: "\"kibana\" is deprecated",
					Description:        "Kibana settings",
					NestedObject: resource.NestedBlockObject{Attributes: map[string]resource.Attribute{
						"elasticsearch_request_timeout": resource.Int64Attribute{
							Computed:           true,
							Default:            int64default.StaticInt64(30000),
							DeprecationMessage: "\"elasticsearch_request_timeout\" is deprecated",
							Description:        "Timeout in milliseconds for requests made by Kibana towards Elasticsearch. The default value is `30000`.",
							Optional:           true,
						},
						"enabled": resource.BoolAttribute{
							Computed:           true,
							Default:            booldefault.StaticBool(true),
							DeprecationMessage: "\"enabled\" is deprecated",
							Description:        "Enable or disable Kibana. The default value is `true`.",
							Optional:           true,
						},
						"max_old_space_size": resource.Int64Attribute{
							Computed:           true,
							Default:            int64default.StaticInt64(128),
							DeprecationMessage: "\"max_old_space_size\" is deprecated",
							Description:        "Limits the maximum amount of memory (in MiB) the Kibana process can use. This sets the max_old_space_size option of the nodejs running the Kibana. Note: the memory reserved by Kibana is not available for Elasticsearch. The default value is `128`.",
							Optional:           true,
						},
					}},
				},
				"private_access": resource.SetNestedBlock{
					DeprecationMessage: "\"private_access\" is deprecated",
					Description:        "Allow access to selected service ports from private networks",
					NestedObject: resource.NestedBlockObject{Attributes: map[string]resource.Attribute{
						"elasticsearch": resource.BoolAttribute{
							Computed:           true,
							DeprecationMessage: "\"elasticsearch\" is deprecated",
							Description:        "Allow clients to connect to elasticsearch with a DNS name that always resolves to the service's private IP addresses. Only available in certain network locations.",
							Optional:           true,
						},
						"kibana": resource.BoolAttribute{
							Computed:           true,
							DeprecationMessage: "\"kibana\" is deprecated",
							Description:        "Allow clients to connect to kibana with a DNS name that always resolves to the service's private IP addresses. Only available in certain network locations.",
							Optional:           true,
						},
						"prometheus": resource.BoolAttribute{
							Computed:           true,
							DeprecationMessage: "\"prometheus\" is deprecated",
							Description:        "Allow clients to connect to prometheus with a DNS name that always resolves to the service's private IP addresses. Only available in certain network locations.",
							Optional:           true,
						},
					}},
				},
				"privatelink_access": resource.SetNestedBlock{
					DeprecationMessage: "\"privatelink_access\" is deprecated",
					Description:        "Allow access to selected service components through Privatelink",
					NestedObject: resource.NestedBlockObject{Attributes: map[string]resource.Attribute{
						"elasticsearch": resource.BoolAttribute{
							Computed:           true,
							DeprecationMessage: "\"elasticsearch\" is deprecated",
							Description:        "Enable elasticsearch.",
							Optional:           true,
						},
						"kibana": resource.BoolAttribute{
							Computed:           true,
							DeprecationMessage: "\"kibana\" is deprecated",
							Description:        "Enable kibana.",
							Optional:           true,
						},
						"prometheus": resource.BoolAttribute{
							Computed:           true,
							DeprecationMessage: "\"prometheus\" is deprecated",
							Description:        "Enable prometheus.",
							Optional:           true,
						},
					}},
				},
				"public_access": resource.SetNestedBlock{
					DeprecationMessage: "\"public_access\" is deprecated",
					Description:        "Allow access to selected service ports from the public Internet",
					NestedObject: resource.NestedBlockObject{Attributes: map[string]resource.Attribute{
						"elasticsearch": resource.BoolAttribute{
							Computed:           true,
							DeprecationMessage: "\"elasticsearch\" is deprecated",
							Description:        "Allow clients to connect to elasticsearch from the public internet for service nodes that are in a project VPC or another type of private network.",
							Optional:           true,
						},
						"kibana": resource.BoolAttribute{
							Computed:           true,
							DeprecationMessage: "\"kibana\" is deprecated",
							Description:        "Allow clients to connect to kibana from the public internet for service nodes that are in a project VPC or another type of private network.",
							Optional:           true,
						},
						"prometheus": resource.BoolAttribute{
							Computed:           true,
							DeprecationMessage: "\"prometheus\" is deprecated",
							Description:        "Allow clients to connect to prometheus from the public internet for service nodes that are in a project VPC or another type of private network.",
							Optional:           true,
						},
					}},
				},
			},
		},
		Validators: []validator.Set{setvalidator.SizeAtMost(1)},
	}
}

// NewDataSourceSchema returns datasource schema
func NewDataSourceSchema() datasource.SetNestedBlock {
	return datasource.SetNestedBlock{
		DeprecationMessage: "\"UserConfig\" is deprecated",
		Description:        "Elasticsearch user configurable settings",
		NestedObject: datasource.NestedBlockObject{
			Attributes: map[string]datasource.Attribute{
				"additional_backup_regions": datasource.SetAttribute{
					Computed:           true,
					DeprecationMessage: "\"additional_backup_regions\" is deprecated",
					Description:        "Additional Cloud Regions for Backup Replication.",
					ElementType:        types.StringType,
					Validators:         []validator.Set{setvalidator.SizeAtMost(1)},
				},
				"custom_domain": datasource.StringAttribute{
					Computed:           true,
					DeprecationMessage: "\"custom_domain\" is deprecated",
					Description:        "Serve the web frontend using a custom CNAME pointing to the Aiven DNS name.",
				},
				"disable_replication_factor_adjustment": datasource.BoolAttribute{
					Computed:           true,
					DeprecationMessage: "\"disable_replication_factor_adjustment\" is deprecated",
					Description:        "DEPRECATED: Disable automatic replication factor adjustment for multi-node services. By default, Aiven ensures all indexes are replicated at least to two nodes. Note: Due to potential data loss in case of losing a service node, this setting can no longer be activated.",
				},
				"elasticsearch_version": datasource.StringAttribute{
					Computed:           true,
					DeprecationMessage: "\"elasticsearch_version\" is deprecated",
					Description:        "Elasticsearch major version.",
				},
				"keep_index_refresh_interval": datasource.BoolAttribute{
					Computed:           true,
					DeprecationMessage: "\"keep_index_refresh_interval\" is deprecated",
					Description:        "Aiven automation resets index.refresh_interval to default value for every index to be sure that indices are always visible to search. If it doesn't fit your case, you can disable this by setting up this flag to true.",
				},
				"max_index_count": datasource.Int64Attribute{
					Computed:           true,
					DeprecationMessage: "\"max_index_count\" is deprecated",
					Description:        "DEPRECATED: use index_patterns instead. The default value is `0`.",
				},
				"opensearch_version": datasource.StringAttribute{
					Computed:           true,
					DeprecationMessage: "\"opensearch_version\" is deprecated",
					Description:        "OpenSearch major version.",
				},
				"project_to_fork_from": datasource.StringAttribute{
					Computed:           true,
					DeprecationMessage: "\"project_to_fork_from\" is deprecated",
					Description:        "Name of another project to fork a service from. This has effect only when a new service is being created.",
				},
				"recovery_basebackup_name": datasource.StringAttribute{
					Computed:           true,
					DeprecationMessage: "\"recovery_basebackup_name\" is deprecated",
					Description:        "Name of the basebackup to restore in forked service.",
				},
				"service_to_fork_from": datasource.StringAttribute{
					Computed:           true,
					DeprecationMessage: "\"service_to_fork_from\" is deprecated",
					Description:        "Name of another service to fork from. This has effect only when a new service is being created.",
				},
				"static_ips": datasource.BoolAttribute{
					Computed:           true,
					DeprecationMessage: "\"static_ips\" is deprecated",
					Description:        "Use static public IP addresses.",
				},
			},
			Blocks: map[string]datasource.Block{
				"elasticsearch": datasource.SetNestedBlock{
					DeprecationMessage: "\"elasticsearch\" is deprecated",
					Description:        "Elasticsearch settings",
					NestedObject: datasource.NestedBlockObject{Attributes: map[string]datasource.Attribute{
						"action_auto_create_index_enabled": datasource.BoolAttribute{
							Computed:           true,
							DeprecationMessage: "\"action_auto_create_index_enabled\" is deprecated",
							Description:        "Explicitly allow or block automatic creation of indices. Defaults to true.",
						},
						"action_destructive_requires_name": datasource.BoolAttribute{
							Computed:           true,
							DeprecationMessage: "\"action_destructive_requires_name\" is deprecated",
							Description:        "Require explicit index names when deleting.",
						},
						"cluster_max_shards_per_node": datasource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"cluster_max_shards_per_node\" is deprecated",
							Description:        "Controls the number of shards allowed in the cluster per data node.",
						},
						"cluster_routing_allocation_node_concurrent_recoveries": datasource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"cluster_routing_allocation_node_concurrent_recoveries\" is deprecated",
							Description:        "How many concurrent incoming/outgoing shard recoveries (normally replicas) are allowed to happen on a node. Defaults to 2.",
						},
						"email_sender_name": datasource.StringAttribute{
							Computed:           true,
							DeprecationMessage: "\"email_sender_name\" is deprecated",
							Description:        "Sender email name placeholder to be used in Opensearch Dashboards and Opensearch keystore.",
						},
						"email_sender_password": datasource.StringAttribute{
							Computed:           true,
							DeprecationMessage: "\"email_sender_password\" is deprecated",
							Description:        "Sender email password for Opensearch alerts to authenticate with SMTP server.",
						},
						"email_sender_username": datasource.StringAttribute{
							Computed:           true,
							DeprecationMessage: "\"email_sender_username\" is deprecated",
							Description:        "Sender email address for Opensearch alerts.",
						},
						"http_max_content_length": datasource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"http_max_content_length\" is deprecated",
							Description:        "Maximum content length for HTTP requests to the Elasticsearch HTTP API, in bytes.",
						},
						"http_max_header_size": datasource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"http_max_header_size\" is deprecated",
							Description:        "The max size of allowed headers, in bytes.",
						},
						"http_max_initial_line_length": datasource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"http_max_initial_line_length\" is deprecated",
							Description:        "The max length of an HTTP URL, in bytes.",
						},
						"indices_fielddata_cache_size": datasource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"indices_fielddata_cache_size\" is deprecated",
							Description:        "Relative amount. Maximum amount of heap memory used for field data cache. This is an expert setting; decreasing the value too much will increase overhead of loading field data; too much memory used for field data cache will decrease amount of heap available for other operations.",
						},
						"indices_memory_index_buffer_size": datasource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"indices_memory_index_buffer_size\" is deprecated",
							Description:        "Percentage value. Default is 10%. Total amount of heap used for indexing buffer, before writing segments to disk. This is an expert setting. Too low value will slow down indexing; too high value will increase indexing performance but causes performance issues for query performance.",
						},
						"indices_queries_cache_size": datasource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"indices_queries_cache_size\" is deprecated",
							Description:        "Percentage value. Default is 10%. Maximum amount of heap used for query cache. This is an expert setting. Too low value will decrease query performance and increase performance for other operations; too high value will cause issues with other Elasticsearch functionality.",
						},
						"indices_query_bool_max_clause_count": datasource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"indices_query_bool_max_clause_count\" is deprecated",
							Description:        "Maximum number of clauses Lucene BooleanQuery can have. The default value (1024) is relatively high, and increasing it may cause performance issues. Investigate other approaches first before increasing this value.",
						},
						"indices_recovery_max_bytes_per_sec": datasource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"indices_recovery_max_bytes_per_sec\" is deprecated",
							Description:        "Limits total inbound and outbound recovery traffic for each node. Applies to both peer recoveries as well as snapshot recoveries (i.e., restores from a snapshot). Defaults to 40mb.",
						},
						"indices_recovery_max_concurrent_file_chunks": datasource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"indices_recovery_max_concurrent_file_chunks\" is deprecated",
							Description:        "Number of file chunks sent in parallel for each recovery. Defaults to 2.",
						},
						"override_main_response_version": datasource.BoolAttribute{
							Computed:           true,
							DeprecationMessage: "\"override_main_response_version\" is deprecated",
							Description:        "Compatibility mode sets OpenSearch to report its version as 7.10 so clients continue to work. Default is false.",
						},
						"reindex_remote_whitelist": datasource.SetAttribute{
							Computed:           true,
							DeprecationMessage: "\"reindex_remote_whitelist\" is deprecated",
							Description:        "Whitelisted addresses for reindexing. Changing this value will cause all Elasticsearch instances to restart.",
							ElementType:        types.StringType,
							Validators:         []validator.Set{setvalidator.SizeAtMost(32)},
						},
						"script_max_compilations_rate": datasource.StringAttribute{
							Computed:           true,
							DeprecationMessage: "\"script_max_compilations_rate\" is deprecated",
							Description:        "Script compilation circuit breaker limits the number of inline script compilations within a period of time. Default is use-context.",
						},
						"search_max_buckets": datasource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"search_max_buckets\" is deprecated",
							Description:        "Maximum number of aggregation buckets allowed in a single response. Elasticsearch default value is used when this is not defined.",
						},
						"thread_pool_analyze_queue_size": datasource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"thread_pool_analyze_queue_size\" is deprecated",
							Description:        "Size for the thread pool queue. See documentation for exact details.",
						},
						"thread_pool_analyze_size": datasource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"thread_pool_analyze_size\" is deprecated",
							Description:        "Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.",
						},
						"thread_pool_force_merge_size": datasource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"thread_pool_force_merge_size\" is deprecated",
							Description:        "Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.",
						},
						"thread_pool_get_queue_size": datasource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"thread_pool_get_queue_size\" is deprecated",
							Description:        "Size for the thread pool queue. See documentation for exact details.",
						},
						"thread_pool_get_size": datasource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"thread_pool_get_size\" is deprecated",
							Description:        "Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.",
						},
						"thread_pool_search_queue_size": datasource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"thread_pool_search_queue_size\" is deprecated",
							Description:        "Size for the thread pool queue. See documentation for exact details.",
						},
						"thread_pool_search_size": datasource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"thread_pool_search_size\" is deprecated",
							Description:        "Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.",
						},
						"thread_pool_search_throttled_queue_size": datasource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"thread_pool_search_throttled_queue_size\" is deprecated",
							Description:        "Size for the thread pool queue. See documentation for exact details.",
						},
						"thread_pool_search_throttled_size": datasource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"thread_pool_search_throttled_size\" is deprecated",
							Description:        "Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.",
						},
						"thread_pool_write_queue_size": datasource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"thread_pool_write_queue_size\" is deprecated",
							Description:        "Size for the thread pool queue. See documentation for exact details.",
						},
						"thread_pool_write_size": datasource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"thread_pool_write_size\" is deprecated",
							Description:        "Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.",
						},
					}},
				},
				"index_patterns": datasource.SetNestedBlock{
					DeprecationMessage: "\"index_patterns\" is deprecated",
					Description:        "Index patterns",
					NestedObject: datasource.NestedBlockObject{Attributes: map[string]datasource.Attribute{
						"max_index_count": datasource.Int64Attribute{
							Computed:    true,
							Description: "Maximum number of indexes to keep.",
						},
						"pattern": datasource.StringAttribute{
							Computed:    true,
							Description: "fnmatch pattern.",
						},
						"sorting_algorithm": datasource.StringAttribute{
							Computed:    true,
							Description: "Deletion sorting algorithm. The default value is `creation_date`.",
						},
					}},
					Validators: []validator.Set{setvalidator.SizeAtMost(512)},
				},
				"index_template": datasource.SetNestedBlock{
					DeprecationMessage: "\"index_template\" is deprecated",
					Description:        "Template settings for all new indexes",
					NestedObject: datasource.NestedBlockObject{Attributes: map[string]datasource.Attribute{
						"mapping_nested_objects_limit": datasource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"mapping_nested_objects_limit\" is deprecated",
							Description:        "The maximum number of nested JSON objects that a single document can contain across all nested types. This limit helps to prevent out of memory errors when a document contains too many nested objects. Default is 10000.",
						},
						"number_of_replicas": datasource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"number_of_replicas\" is deprecated",
							Description:        "The number of replicas each primary shard has.",
						},
						"number_of_shards": datasource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"number_of_shards\" is deprecated",
							Description:        "The number of primary shards that an index should have.",
						},
					}},
				},
				"ip_filter": datasource.SetNestedBlock{
					DeprecationMessage: "\"ip_filter\" is deprecated",
					Description:        "Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'",
					NestedObject: datasource.NestedBlockObject{Attributes: map[string]datasource.Attribute{
						"description": datasource.StringAttribute{
							Computed:    true,
							Description: "Description for IP filter list entry.",
						},
						"network": datasource.StringAttribute{
							Computed:    true,
							Description: "CIDR address block.",
						},
					}},
					Validators: []validator.Set{setvalidator.SizeAtMost(1024)},
				},
				"kibana": datasource.SetNestedBlock{
					DeprecationMessage: "\"kibana\" is deprecated",
					Description:        "Kibana settings",
					NestedObject: datasource.NestedBlockObject{Attributes: map[string]datasource.Attribute{
						"elasticsearch_request_timeout": datasource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"elasticsearch_request_timeout\" is deprecated",
							Description:        "Timeout in milliseconds for requests made by Kibana towards Elasticsearch. The default value is `30000`.",
						},
						"enabled": datasource.BoolAttribute{
							Computed:           true,
							DeprecationMessage: "\"enabled\" is deprecated",
							Description:        "Enable or disable Kibana. The default value is `true`.",
						},
						"max_old_space_size": datasource.Int64Attribute{
							Computed:           true,
							DeprecationMessage: "\"max_old_space_size\" is deprecated",
							Description:        "Limits the maximum amount of memory (in MiB) the Kibana process can use. This sets the max_old_space_size option of the nodejs running the Kibana. Note: the memory reserved by Kibana is not available for Elasticsearch. The default value is `128`.",
						},
					}},
				},
				"private_access": datasource.SetNestedBlock{
					DeprecationMessage: "\"private_access\" is deprecated",
					Description:        "Allow access to selected service ports from private networks",
					NestedObject: datasource.NestedBlockObject{Attributes: map[string]datasource.Attribute{
						"elasticsearch": datasource.BoolAttribute{
							Computed:           true,
							DeprecationMessage: "\"elasticsearch\" is deprecated",
							Description:        "Allow clients to connect to elasticsearch with a DNS name that always resolves to the service's private IP addresses. Only available in certain network locations.",
						},
						"kibana": datasource.BoolAttribute{
							Computed:           true,
							DeprecationMessage: "\"kibana\" is deprecated",
							Description:        "Allow clients to connect to kibana with a DNS name that always resolves to the service's private IP addresses. Only available in certain network locations.",
						},
						"prometheus": datasource.BoolAttribute{
							Computed:           true,
							DeprecationMessage: "\"prometheus\" is deprecated",
							Description:        "Allow clients to connect to prometheus with a DNS name that always resolves to the service's private IP addresses. Only available in certain network locations.",
						},
					}},
				},
				"privatelink_access": datasource.SetNestedBlock{
					DeprecationMessage: "\"privatelink_access\" is deprecated",
					Description:        "Allow access to selected service components through Privatelink",
					NestedObject: datasource.NestedBlockObject{Attributes: map[string]datasource.Attribute{
						"elasticsearch": datasource.BoolAttribute{
							Computed:           true,
							DeprecationMessage: "\"elasticsearch\" is deprecated",
							Description:        "Enable elasticsearch.",
						},
						"kibana": datasource.BoolAttribute{
							Computed:           true,
							DeprecationMessage: "\"kibana\" is deprecated",
							Description:        "Enable kibana.",
						},
						"prometheus": datasource.BoolAttribute{
							Computed:           true,
							DeprecationMessage: "\"prometheus\" is deprecated",
							Description:        "Enable prometheus.",
						},
					}},
				},
				"public_access": datasource.SetNestedBlock{
					DeprecationMessage: "\"public_access\" is deprecated",
					Description:        "Allow access to selected service ports from the public Internet",
					NestedObject: datasource.NestedBlockObject{Attributes: map[string]datasource.Attribute{
						"elasticsearch": datasource.BoolAttribute{
							Computed:           true,
							DeprecationMessage: "\"elasticsearch\" is deprecated",
							Description:        "Allow clients to connect to elasticsearch from the public internet for service nodes that are in a project VPC or another type of private network.",
						},
						"kibana": datasource.BoolAttribute{
							Computed:           true,
							DeprecationMessage: "\"kibana\" is deprecated",
							Description:        "Allow clients to connect to kibana from the public internet for service nodes that are in a project VPC or another type of private network.",
						},
						"prometheus": datasource.BoolAttribute{
							Computed:           true,
							DeprecationMessage: "\"prometheus\" is deprecated",
							Description:        "Allow clients to connect to prometheus from the public internet for service nodes that are in a project VPC or another type of private network.",
						},
					}},
				},
			},
		},
		Validators: []validator.Set{setvalidator.SizeAtMost(1)},
	}
}

// tfoUserConfig Elasticsearch user configurable settings
type tfoUserConfig struct {
	AdditionalBackupRegions            types.Set    `tfsdk:"additional_backup_regions"`
	CustomDomain                       types.String `tfsdk:"custom_domain"`
	DisableReplicationFactorAdjustment types.Bool   `tfsdk:"disable_replication_factor_adjustment"`
	Elasticsearch                      types.Set    `tfsdk:"elasticsearch"`
	ElasticsearchVersion               types.String `tfsdk:"elasticsearch_version"`
	IndexPatterns                      types.Set    `tfsdk:"index_patterns"`
	IndexTemplate                      types.Set    `tfsdk:"index_template"`
	IpFilter                           types.Set    `tfsdk:"ip_filter"`
	KeepIndexRefreshInterval           types.Bool   `tfsdk:"keep_index_refresh_interval"`
	Kibana                             types.Set    `tfsdk:"kibana"`
	MaxIndexCount                      types.Int64  `tfsdk:"max_index_count"`
	OpensearchVersion                  types.String `tfsdk:"opensearch_version"`
	PrivateAccess                      types.Set    `tfsdk:"private_access"`
	PrivatelinkAccess                  types.Set    `tfsdk:"privatelink_access"`
	ProjectToForkFrom                  types.String `tfsdk:"project_to_fork_from"`
	PublicAccess                       types.Set    `tfsdk:"public_access"`
	RecoveryBasebackupName             types.String `tfsdk:"recovery_basebackup_name"`
	ServiceToForkFrom                  types.String `tfsdk:"service_to_fork_from"`
	StaticIps                          types.Bool   `tfsdk:"static_ips"`
}

// dtoUserConfig request/response object
type dtoUserConfig struct {
	AdditionalBackupRegions            []string              `groups:"create,update" json:"additional_backup_regions,omitempty"`
	CustomDomain                       *string               `groups:"create,update" json:"custom_domain,omitempty"`
	DisableReplicationFactorAdjustment *bool                 `groups:"create,update" json:"disable_replication_factor_adjustment,omitempty"`
	Elasticsearch                      *dtoElasticsearch     `groups:"create,update" json:"elasticsearch,omitempty"`
	ElasticsearchVersion               *string               `groups:"create,update" json:"elasticsearch_version,omitempty"`
	IndexPatterns                      []*dtoIndexPatterns   `groups:"create,update" json:"index_patterns,omitempty"`
	IndexTemplate                      *dtoIndexTemplate     `groups:"create,update" json:"index_template,omitempty"`
	IpFilter                           []*dtoIpFilter        `groups:"create,update" json:"ip_filter,omitempty"`
	KeepIndexRefreshInterval           *bool                 `groups:"create,update" json:"keep_index_refresh_interval,omitempty"`
	Kibana                             *dtoKibana            `groups:"create,update" json:"kibana,omitempty"`
	MaxIndexCount                      *int64                `groups:"create,update" json:"max_index_count,omitempty"`
	OpensearchVersion                  *string               `groups:"create,update" json:"opensearch_version,omitempty"`
	PrivateAccess                      *dtoPrivateAccess     `groups:"create,update" json:"private_access,omitempty"`
	PrivatelinkAccess                  *dtoPrivatelinkAccess `groups:"create,update" json:"privatelink_access,omitempty"`
	ProjectToForkFrom                  *string               `groups:"create" json:"project_to_fork_from,omitempty"`
	PublicAccess                       *dtoPublicAccess      `groups:"create,update" json:"public_access,omitempty"`
	RecoveryBasebackupName             *string               `groups:"create,update" json:"recovery_basebackup_name,omitempty"`
	ServiceToForkFrom                  *string               `groups:"create" json:"service_to_fork_from,omitempty"`
	StaticIps                          *bool                 `groups:"create,update" json:"static_ips,omitempty"`
}

// expandUserConfig expands tf object into dto object
func expandUserConfig(ctx context.Context, diags diag.Diagnostics, o *tfoUserConfig) *dtoUserConfig {
	additionalBackupRegionsVar := schemautil.ExpandSet[string](ctx, diags, o.AdditionalBackupRegions)
	if diags.HasError() {
		return nil
	}
	elasticsearchVar := schemautil.ExpandSetBlockNested(ctx, diags, expandElasticsearch, o.Elasticsearch)
	if diags.HasError() {
		return nil
	}
	indexPatternsVar := schemautil.ExpandSetNested(ctx, diags, expandIndexPatterns, o.IndexPatterns)
	if diags.HasError() {
		return nil
	}
	indexTemplateVar := schemautil.ExpandSetBlockNested(ctx, diags, expandIndexTemplate, o.IndexTemplate)
	if diags.HasError() {
		return nil
	}
	ipFilterVar := schemautil.ExpandSetNested(ctx, diags, expandIpFilter, o.IpFilter)
	if diags.HasError() {
		return nil
	}
	kibanaVar := schemautil.ExpandSetBlockNested(ctx, diags, expandKibana, o.Kibana)
	if diags.HasError() {
		return nil
	}
	privateAccessVar := schemautil.ExpandSetBlockNested(ctx, diags, expandPrivateAccess, o.PrivateAccess)
	if diags.HasError() {
		return nil
	}
	privatelinkAccessVar := schemautil.ExpandSetBlockNested(ctx, diags, expandPrivatelinkAccess, o.PrivatelinkAccess)
	if diags.HasError() {
		return nil
	}
	publicAccessVar := schemautil.ExpandSetBlockNested(ctx, diags, expandPublicAccess, o.PublicAccess)
	if diags.HasError() {
		return nil
	}
	return &dtoUserConfig{
		AdditionalBackupRegions:            additionalBackupRegionsVar,
		CustomDomain:                       schemautil.ValueStringPointer(o.CustomDomain),
		DisableReplicationFactorAdjustment: schemautil.ValueBoolPointer(o.DisableReplicationFactorAdjustment),
		Elasticsearch:                      elasticsearchVar,
		ElasticsearchVersion:               schemautil.ValueStringPointer(o.ElasticsearchVersion),
		IndexPatterns:                      indexPatternsVar,
		IndexTemplate:                      indexTemplateVar,
		IpFilter:                           ipFilterVar,
		KeepIndexRefreshInterval:           schemautil.ValueBoolPointer(o.KeepIndexRefreshInterval),
		Kibana:                             kibanaVar,
		MaxIndexCount:                      schemautil.ValueInt64Pointer(o.MaxIndexCount),
		OpensearchVersion:                  schemautil.ValueStringPointer(o.OpensearchVersion),
		PrivateAccess:                      privateAccessVar,
		PrivatelinkAccess:                  privatelinkAccessVar,
		ProjectToForkFrom:                  schemautil.ValueStringPointer(o.ProjectToForkFrom),
		PublicAccess:                       publicAccessVar,
		RecoveryBasebackupName:             schemautil.ValueStringPointer(o.RecoveryBasebackupName),
		ServiceToForkFrom:                  schemautil.ValueStringPointer(o.ServiceToForkFrom),
		StaticIps:                          schemautil.ValueBoolPointer(o.StaticIps),
	}
}

// flattenUserConfig flattens dto object into tf object
func flattenUserConfig(ctx context.Context, diags diag.Diagnostics, o *dtoUserConfig) *tfoUserConfig {
	additionalBackupRegionsVar, d := types.SetValueFrom(ctx, types.StringType, o.AdditionalBackupRegions)
	diags.Append(d...)
	if diags.HasError() {
		return nil
	}
	elasticsearchVar := schemautil.FlattenSetBlockNested(ctx, diags, flattenElasticsearch, o.Elasticsearch, elasticsearchAttrs)
	if diags.HasError() {
		return nil
	}
	indexPatternsVar := schemautil.FlattenSetNested(ctx, diags, flattenIndexPatterns, o.IndexPatterns, indexPatternsAttrs)
	if diags.HasError() {
		return nil
	}
	indexTemplateVar := schemautil.FlattenSetBlockNested(ctx, diags, flattenIndexTemplate, o.IndexTemplate, indexTemplateAttrs)
	if diags.HasError() {
		return nil
	}
	ipFilterVar := schemautil.FlattenSetNested(ctx, diags, flattenIpFilter, o.IpFilter, ipFilterAttrs)
	if diags.HasError() {
		return nil
	}
	kibanaVar := schemautil.FlattenSetBlockNested(ctx, diags, flattenKibana, o.Kibana, kibanaAttrs)
	if diags.HasError() {
		return nil
	}
	privateAccessVar := schemautil.FlattenSetBlockNested(ctx, diags, flattenPrivateAccess, o.PrivateAccess, privateAccessAttrs)
	if diags.HasError() {
		return nil
	}
	privatelinkAccessVar := schemautil.FlattenSetBlockNested(ctx, diags, flattenPrivatelinkAccess, o.PrivatelinkAccess, privatelinkAccessAttrs)
	if diags.HasError() {
		return nil
	}
	publicAccessVar := schemautil.FlattenSetBlockNested(ctx, diags, flattenPublicAccess, o.PublicAccess, publicAccessAttrs)
	if diags.HasError() {
		return nil
	}
	return &tfoUserConfig{
		AdditionalBackupRegions:            additionalBackupRegionsVar,
		CustomDomain:                       types.StringPointerValue(o.CustomDomain),
		DisableReplicationFactorAdjustment: types.BoolPointerValue(o.DisableReplicationFactorAdjustment),
		Elasticsearch:                      elasticsearchVar,
		ElasticsearchVersion:               types.StringPointerValue(o.ElasticsearchVersion),
		IndexPatterns:                      indexPatternsVar,
		IndexTemplate:                      indexTemplateVar,
		IpFilter:                           ipFilterVar,
		KeepIndexRefreshInterval:           types.BoolPointerValue(o.KeepIndexRefreshInterval),
		Kibana:                             kibanaVar,
		MaxIndexCount:                      types.Int64PointerValue(o.MaxIndexCount),
		OpensearchVersion:                  types.StringPointerValue(o.OpensearchVersion),
		PrivateAccess:                      privateAccessVar,
		PrivatelinkAccess:                  privatelinkAccessVar,
		ProjectToForkFrom:                  types.StringPointerValue(o.ProjectToForkFrom),
		PublicAccess:                       publicAccessVar,
		RecoveryBasebackupName:             types.StringPointerValue(o.RecoveryBasebackupName),
		ServiceToForkFrom:                  types.StringPointerValue(o.ServiceToForkFrom),
		StaticIps:                          types.BoolPointerValue(o.StaticIps),
	}
}

var userConfigAttrs = map[string]attr.Type{
	"additional_backup_regions":             types.SetType{ElemType: types.StringType},
	"custom_domain":                         types.StringType,
	"disable_replication_factor_adjustment": types.BoolType,
	"elasticsearch":                         types.SetType{ElemType: types.ObjectType{AttrTypes: elasticsearchAttrs}},
	"elasticsearch_version":                 types.StringType,
	"index_patterns":                        types.SetType{ElemType: types.ObjectType{AttrTypes: indexPatternsAttrs}},
	"index_template":                        types.SetType{ElemType: types.ObjectType{AttrTypes: indexTemplateAttrs}},
	"ip_filter":                             types.SetType{ElemType: types.ObjectType{AttrTypes: ipFilterAttrs}},
	"keep_index_refresh_interval":           types.BoolType,
	"kibana":                                types.SetType{ElemType: types.ObjectType{AttrTypes: kibanaAttrs}},
	"max_index_count":                       types.Int64Type,
	"opensearch_version":                    types.StringType,
	"private_access":                        types.SetType{ElemType: types.ObjectType{AttrTypes: privateAccessAttrs}},
	"privatelink_access":                    types.SetType{ElemType: types.ObjectType{AttrTypes: privatelinkAccessAttrs}},
	"project_to_fork_from":                  types.StringType,
	"public_access":                         types.SetType{ElemType: types.ObjectType{AttrTypes: publicAccessAttrs}},
	"recovery_basebackup_name":              types.StringType,
	"service_to_fork_from":                  types.StringType,
	"static_ips":                            types.BoolType,
}

// tfoElasticsearch Elasticsearch settings
type tfoElasticsearch struct {
	ActionAutoCreateIndexEnabled                     types.Bool   `tfsdk:"action_auto_create_index_enabled"`
	ActionDestructiveRequiresName                    types.Bool   `tfsdk:"action_destructive_requires_name"`
	ClusterMaxShardsPerNode                          types.Int64  `tfsdk:"cluster_max_shards_per_node"`
	ClusterRoutingAllocationNodeConcurrentRecoveries types.Int64  `tfsdk:"cluster_routing_allocation_node_concurrent_recoveries"`
	EmailSenderName                                  types.String `tfsdk:"email_sender_name"`
	EmailSenderPassword                              types.String `tfsdk:"email_sender_password"`
	EmailSenderUsername                              types.String `tfsdk:"email_sender_username"`
	HttpMaxContentLength                             types.Int64  `tfsdk:"http_max_content_length"`
	HttpMaxHeaderSize                                types.Int64  `tfsdk:"http_max_header_size"`
	HttpMaxInitialLineLength                         types.Int64  `tfsdk:"http_max_initial_line_length"`
	IndicesFielddataCacheSize                        types.Int64  `tfsdk:"indices_fielddata_cache_size"`
	IndicesMemoryIndexBufferSize                     types.Int64  `tfsdk:"indices_memory_index_buffer_size"`
	IndicesQueriesCacheSize                          types.Int64  `tfsdk:"indices_queries_cache_size"`
	IndicesQueryBoolMaxClauseCount                   types.Int64  `tfsdk:"indices_query_bool_max_clause_count"`
	IndicesRecoveryMaxBytesPerSec                    types.Int64  `tfsdk:"indices_recovery_max_bytes_per_sec"`
	IndicesRecoveryMaxConcurrentFileChunks           types.Int64  `tfsdk:"indices_recovery_max_concurrent_file_chunks"`
	OverrideMainResponseVersion                      types.Bool   `tfsdk:"override_main_response_version"`
	ReindexRemoteWhitelist                           types.Set    `tfsdk:"reindex_remote_whitelist"`
	ScriptMaxCompilationsRate                        types.String `tfsdk:"script_max_compilations_rate"`
	SearchMaxBuckets                                 types.Int64  `tfsdk:"search_max_buckets"`
	ThreadPoolAnalyzeQueueSize                       types.Int64  `tfsdk:"thread_pool_analyze_queue_size"`
	ThreadPoolAnalyzeSize                            types.Int64  `tfsdk:"thread_pool_analyze_size"`
	ThreadPoolForceMergeSize                         types.Int64  `tfsdk:"thread_pool_force_merge_size"`
	ThreadPoolGetQueueSize                           types.Int64  `tfsdk:"thread_pool_get_queue_size"`
	ThreadPoolGetSize                                types.Int64  `tfsdk:"thread_pool_get_size"`
	ThreadPoolSearchQueueSize                        types.Int64  `tfsdk:"thread_pool_search_queue_size"`
	ThreadPoolSearchSize                             types.Int64  `tfsdk:"thread_pool_search_size"`
	ThreadPoolSearchThrottledQueueSize               types.Int64  `tfsdk:"thread_pool_search_throttled_queue_size"`
	ThreadPoolSearchThrottledSize                    types.Int64  `tfsdk:"thread_pool_search_throttled_size"`
	ThreadPoolWriteQueueSize                         types.Int64  `tfsdk:"thread_pool_write_queue_size"`
	ThreadPoolWriteSize                              types.Int64  `tfsdk:"thread_pool_write_size"`
}

// dtoElasticsearch request/response object
type dtoElasticsearch struct {
	ActionAutoCreateIndexEnabled                     *bool    `groups:"create,update" json:"action_auto_create_index_enabled,omitempty"`
	ActionDestructiveRequiresName                    *bool    `groups:"create,update" json:"action_destructive_requires_name,omitempty"`
	ClusterMaxShardsPerNode                          *int64   `groups:"create,update" json:"cluster_max_shards_per_node,omitempty"`
	ClusterRoutingAllocationNodeConcurrentRecoveries *int64   `groups:"create,update" json:"cluster_routing_allocation_node_concurrent_recoveries,omitempty"`
	EmailSenderName                                  *string  `groups:"create,update" json:"email_sender_name,omitempty"`
	EmailSenderPassword                              *string  `groups:"create,update" json:"email_sender_password,omitempty"`
	EmailSenderUsername                              *string  `groups:"create,update" json:"email_sender_username,omitempty"`
	HttpMaxContentLength                             *int64   `groups:"create,update" json:"http_max_content_length,omitempty"`
	HttpMaxHeaderSize                                *int64   `groups:"create,update" json:"http_max_header_size,omitempty"`
	HttpMaxInitialLineLength                         *int64   `groups:"create,update" json:"http_max_initial_line_length,omitempty"`
	IndicesFielddataCacheSize                        *int64   `groups:"create,update" json:"indices_fielddata_cache_size,omitempty"`
	IndicesMemoryIndexBufferSize                     *int64   `groups:"create,update" json:"indices_memory_index_buffer_size,omitempty"`
	IndicesQueriesCacheSize                          *int64   `groups:"create,update" json:"indices_queries_cache_size,omitempty"`
	IndicesQueryBoolMaxClauseCount                   *int64   `groups:"create,update" json:"indices_query_bool_max_clause_count,omitempty"`
	IndicesRecoveryMaxBytesPerSec                    *int64   `groups:"create,update" json:"indices_recovery_max_bytes_per_sec,omitempty"`
	IndicesRecoveryMaxConcurrentFileChunks           *int64   `groups:"create,update" json:"indices_recovery_max_concurrent_file_chunks,omitempty"`
	OverrideMainResponseVersion                      *bool    `groups:"create,update" json:"override_main_response_version,omitempty"`
	ReindexRemoteWhitelist                           []string `groups:"create,update" json:"reindex_remote_whitelist,omitempty"`
	ScriptMaxCompilationsRate                        *string  `groups:"create,update" json:"script_max_compilations_rate,omitempty"`
	SearchMaxBuckets                                 *int64   `groups:"create,update" json:"search_max_buckets,omitempty"`
	ThreadPoolAnalyzeQueueSize                       *int64   `groups:"create,update" json:"thread_pool_analyze_queue_size,omitempty"`
	ThreadPoolAnalyzeSize                            *int64   `groups:"create,update" json:"thread_pool_analyze_size,omitempty"`
	ThreadPoolForceMergeSize                         *int64   `groups:"create,update" json:"thread_pool_force_merge_size,omitempty"`
	ThreadPoolGetQueueSize                           *int64   `groups:"create,update" json:"thread_pool_get_queue_size,omitempty"`
	ThreadPoolGetSize                                *int64   `groups:"create,update" json:"thread_pool_get_size,omitempty"`
	ThreadPoolSearchQueueSize                        *int64   `groups:"create,update" json:"thread_pool_search_queue_size,omitempty"`
	ThreadPoolSearchSize                             *int64   `groups:"create,update" json:"thread_pool_search_size,omitempty"`
	ThreadPoolSearchThrottledQueueSize               *int64   `groups:"create,update" json:"thread_pool_search_throttled_queue_size,omitempty"`
	ThreadPoolSearchThrottledSize                    *int64   `groups:"create,update" json:"thread_pool_search_throttled_size,omitempty"`
	ThreadPoolWriteQueueSize                         *int64   `groups:"create,update" json:"thread_pool_write_queue_size,omitempty"`
	ThreadPoolWriteSize                              *int64   `groups:"create,update" json:"thread_pool_write_size,omitempty"`
}

// expandElasticsearch expands tf object into dto object
func expandElasticsearch(ctx context.Context, diags diag.Diagnostics, o *tfoElasticsearch) *dtoElasticsearch {
	reindexRemoteWhitelistVar := schemautil.ExpandSet[string](ctx, diags, o.ReindexRemoteWhitelist)
	if diags.HasError() {
		return nil
	}
	return &dtoElasticsearch{
		ActionAutoCreateIndexEnabled:                     schemautil.ValueBoolPointer(o.ActionAutoCreateIndexEnabled),
		ActionDestructiveRequiresName:                    schemautil.ValueBoolPointer(o.ActionDestructiveRequiresName),
		ClusterMaxShardsPerNode:                          schemautil.ValueInt64Pointer(o.ClusterMaxShardsPerNode),
		ClusterRoutingAllocationNodeConcurrentRecoveries: schemautil.ValueInt64Pointer(o.ClusterRoutingAllocationNodeConcurrentRecoveries),
		EmailSenderName:                                  schemautil.ValueStringPointer(o.EmailSenderName),
		EmailSenderPassword:                              schemautil.ValueStringPointer(o.EmailSenderPassword),
		EmailSenderUsername:                              schemautil.ValueStringPointer(o.EmailSenderUsername),
		HttpMaxContentLength:                             schemautil.ValueInt64Pointer(o.HttpMaxContentLength),
		HttpMaxHeaderSize:                                schemautil.ValueInt64Pointer(o.HttpMaxHeaderSize),
		HttpMaxInitialLineLength:                         schemautil.ValueInt64Pointer(o.HttpMaxInitialLineLength),
		IndicesFielddataCacheSize:                        schemautil.ValueInt64Pointer(o.IndicesFielddataCacheSize),
		IndicesMemoryIndexBufferSize:                     schemautil.ValueInt64Pointer(o.IndicesMemoryIndexBufferSize),
		IndicesQueriesCacheSize:                          schemautil.ValueInt64Pointer(o.IndicesQueriesCacheSize),
		IndicesQueryBoolMaxClauseCount:                   schemautil.ValueInt64Pointer(o.IndicesQueryBoolMaxClauseCount),
		IndicesRecoveryMaxBytesPerSec:                    schemautil.ValueInt64Pointer(o.IndicesRecoveryMaxBytesPerSec),
		IndicesRecoveryMaxConcurrentFileChunks:           schemautil.ValueInt64Pointer(o.IndicesRecoveryMaxConcurrentFileChunks),
		OverrideMainResponseVersion:                      schemautil.ValueBoolPointer(o.OverrideMainResponseVersion),
		ReindexRemoteWhitelist:                           reindexRemoteWhitelistVar,
		ScriptMaxCompilationsRate:                        schemautil.ValueStringPointer(o.ScriptMaxCompilationsRate),
		SearchMaxBuckets:                                 schemautil.ValueInt64Pointer(o.SearchMaxBuckets),
		ThreadPoolAnalyzeQueueSize:                       schemautil.ValueInt64Pointer(o.ThreadPoolAnalyzeQueueSize),
		ThreadPoolAnalyzeSize:                            schemautil.ValueInt64Pointer(o.ThreadPoolAnalyzeSize),
		ThreadPoolForceMergeSize:                         schemautil.ValueInt64Pointer(o.ThreadPoolForceMergeSize),
		ThreadPoolGetQueueSize:                           schemautil.ValueInt64Pointer(o.ThreadPoolGetQueueSize),
		ThreadPoolGetSize:                                schemautil.ValueInt64Pointer(o.ThreadPoolGetSize),
		ThreadPoolSearchQueueSize:                        schemautil.ValueInt64Pointer(o.ThreadPoolSearchQueueSize),
		ThreadPoolSearchSize:                             schemautil.ValueInt64Pointer(o.ThreadPoolSearchSize),
		ThreadPoolSearchThrottledQueueSize:               schemautil.ValueInt64Pointer(o.ThreadPoolSearchThrottledQueueSize),
		ThreadPoolSearchThrottledSize:                    schemautil.ValueInt64Pointer(o.ThreadPoolSearchThrottledSize),
		ThreadPoolWriteQueueSize:                         schemautil.ValueInt64Pointer(o.ThreadPoolWriteQueueSize),
		ThreadPoolWriteSize:                              schemautil.ValueInt64Pointer(o.ThreadPoolWriteSize),
	}
}

// flattenElasticsearch flattens dto object into tf object
func flattenElasticsearch(ctx context.Context, diags diag.Diagnostics, o *dtoElasticsearch) *tfoElasticsearch {
	reindexRemoteWhitelistVar, d := types.SetValueFrom(ctx, types.StringType, o.ReindexRemoteWhitelist)
	diags.Append(d...)
	if diags.HasError() {
		return nil
	}
	return &tfoElasticsearch{
		ActionAutoCreateIndexEnabled:                     types.BoolPointerValue(o.ActionAutoCreateIndexEnabled),
		ActionDestructiveRequiresName:                    types.BoolPointerValue(o.ActionDestructiveRequiresName),
		ClusterMaxShardsPerNode:                          types.Int64PointerValue(o.ClusterMaxShardsPerNode),
		ClusterRoutingAllocationNodeConcurrentRecoveries: types.Int64PointerValue(o.ClusterRoutingAllocationNodeConcurrentRecoveries),
		EmailSenderName:                                  types.StringPointerValue(o.EmailSenderName),
		EmailSenderPassword:                              types.StringPointerValue(o.EmailSenderPassword),
		EmailSenderUsername:                              types.StringPointerValue(o.EmailSenderUsername),
		HttpMaxContentLength:                             types.Int64PointerValue(o.HttpMaxContentLength),
		HttpMaxHeaderSize:                                types.Int64PointerValue(o.HttpMaxHeaderSize),
		HttpMaxInitialLineLength:                         types.Int64PointerValue(o.HttpMaxInitialLineLength),
		IndicesFielddataCacheSize:                        types.Int64PointerValue(o.IndicesFielddataCacheSize),
		IndicesMemoryIndexBufferSize:                     types.Int64PointerValue(o.IndicesMemoryIndexBufferSize),
		IndicesQueriesCacheSize:                          types.Int64PointerValue(o.IndicesQueriesCacheSize),
		IndicesQueryBoolMaxClauseCount:                   types.Int64PointerValue(o.IndicesQueryBoolMaxClauseCount),
		IndicesRecoveryMaxBytesPerSec:                    types.Int64PointerValue(o.IndicesRecoveryMaxBytesPerSec),
		IndicesRecoveryMaxConcurrentFileChunks:           types.Int64PointerValue(o.IndicesRecoveryMaxConcurrentFileChunks),
		OverrideMainResponseVersion:                      types.BoolPointerValue(o.OverrideMainResponseVersion),
		ReindexRemoteWhitelist:                           reindexRemoteWhitelistVar,
		ScriptMaxCompilationsRate:                        types.StringPointerValue(o.ScriptMaxCompilationsRate),
		SearchMaxBuckets:                                 types.Int64PointerValue(o.SearchMaxBuckets),
		ThreadPoolAnalyzeQueueSize:                       types.Int64PointerValue(o.ThreadPoolAnalyzeQueueSize),
		ThreadPoolAnalyzeSize:                            types.Int64PointerValue(o.ThreadPoolAnalyzeSize),
		ThreadPoolForceMergeSize:                         types.Int64PointerValue(o.ThreadPoolForceMergeSize),
		ThreadPoolGetQueueSize:                           types.Int64PointerValue(o.ThreadPoolGetQueueSize),
		ThreadPoolGetSize:                                types.Int64PointerValue(o.ThreadPoolGetSize),
		ThreadPoolSearchQueueSize:                        types.Int64PointerValue(o.ThreadPoolSearchQueueSize),
		ThreadPoolSearchSize:                             types.Int64PointerValue(o.ThreadPoolSearchSize),
		ThreadPoolSearchThrottledQueueSize:               types.Int64PointerValue(o.ThreadPoolSearchThrottledQueueSize),
		ThreadPoolSearchThrottledSize:                    types.Int64PointerValue(o.ThreadPoolSearchThrottledSize),
		ThreadPoolWriteQueueSize:                         types.Int64PointerValue(o.ThreadPoolWriteQueueSize),
		ThreadPoolWriteSize:                              types.Int64PointerValue(o.ThreadPoolWriteSize),
	}
}

var elasticsearchAttrs = map[string]attr.Type{
	"action_auto_create_index_enabled":                      types.BoolType,
	"action_destructive_requires_name":                      types.BoolType,
	"cluster_max_shards_per_node":                           types.Int64Type,
	"cluster_routing_allocation_node_concurrent_recoveries": types.Int64Type,
	"email_sender_name":                                     types.StringType,
	"email_sender_password":                                 types.StringType,
	"email_sender_username":                                 types.StringType,
	"http_max_content_length":                               types.Int64Type,
	"http_max_header_size":                                  types.Int64Type,
	"http_max_initial_line_length":                          types.Int64Type,
	"indices_fielddata_cache_size":                          types.Int64Type,
	"indices_memory_index_buffer_size":                      types.Int64Type,
	"indices_queries_cache_size":                            types.Int64Type,
	"indices_query_bool_max_clause_count":                   types.Int64Type,
	"indices_recovery_max_bytes_per_sec":                    types.Int64Type,
	"indices_recovery_max_concurrent_file_chunks":           types.Int64Type,
	"override_main_response_version":                        types.BoolType,
	"reindex_remote_whitelist":                              types.SetType{ElemType: types.StringType},
	"script_max_compilations_rate":                          types.StringType,
	"search_max_buckets":                                    types.Int64Type,
	"thread_pool_analyze_queue_size":                        types.Int64Type,
	"thread_pool_analyze_size":                              types.Int64Type,
	"thread_pool_force_merge_size":                          types.Int64Type,
	"thread_pool_get_queue_size":                            types.Int64Type,
	"thread_pool_get_size":                                  types.Int64Type,
	"thread_pool_search_queue_size":                         types.Int64Type,
	"thread_pool_search_size":                               types.Int64Type,
	"thread_pool_search_throttled_queue_size":               types.Int64Type,
	"thread_pool_search_throttled_size":                     types.Int64Type,
	"thread_pool_write_queue_size":                          types.Int64Type,
	"thread_pool_write_size":                                types.Int64Type,
}

// tfoIndexPatterns Allows you to create glob style patterns and set a max number of indexes matching this pattern you want to keep. Creating indexes exceeding this value will cause the oldest one to get deleted. You could for example create a pattern looking like 'logs.?' and then create index logs.1, logs.2 etc, it will delete logs.1 once you create logs.6. Do note 'logs.?' does not apply to logs.10. Note: Setting max_index_count to 0 will do nothing and the pattern gets ignored
type tfoIndexPatterns struct {
	MaxIndexCount    types.Int64  `tfsdk:"max_index_count"`
	Pattern          types.String `tfsdk:"pattern"`
	SortingAlgorithm types.String `tfsdk:"sorting_algorithm"`
}

// dtoIndexPatterns request/response object
type dtoIndexPatterns struct {
	MaxIndexCount    int64   `groups:"create,update" json:"max_index_count"`
	Pattern          string  `groups:"create,update" json:"pattern"`
	SortingAlgorithm *string `groups:"create,update" json:"sorting_algorithm,omitempty"`
}

// expandIndexPatterns expands tf object into dto object
func expandIndexPatterns(ctx context.Context, diags diag.Diagnostics, o *tfoIndexPatterns) *dtoIndexPatterns {
	return &dtoIndexPatterns{
		MaxIndexCount:    o.MaxIndexCount.ValueInt64(),
		Pattern:          o.Pattern.ValueString(),
		SortingAlgorithm: schemautil.ValueStringPointer(o.SortingAlgorithm),
	}
}

// flattenIndexPatterns flattens dto object into tf object
func flattenIndexPatterns(ctx context.Context, diags diag.Diagnostics, o *dtoIndexPatterns) *tfoIndexPatterns {
	return &tfoIndexPatterns{
		MaxIndexCount:    types.Int64Value(o.MaxIndexCount),
		Pattern:          types.StringValue(o.Pattern),
		SortingAlgorithm: types.StringPointerValue(o.SortingAlgorithm),
	}
}

var indexPatternsAttrs = map[string]attr.Type{
	"max_index_count":   types.Int64Type,
	"pattern":           types.StringType,
	"sorting_algorithm": types.StringType,
}

// tfoIndexTemplate Template settings for all new indexes
type tfoIndexTemplate struct {
	MappingNestedObjectsLimit types.Int64 `tfsdk:"mapping_nested_objects_limit"`
	NumberOfReplicas          types.Int64 `tfsdk:"number_of_replicas"`
	NumberOfShards            types.Int64 `tfsdk:"number_of_shards"`
}

// dtoIndexTemplate request/response object
type dtoIndexTemplate struct {
	MappingNestedObjectsLimit *int64 `groups:"create,update" json:"mapping_nested_objects_limit,omitempty"`
	NumberOfReplicas          *int64 `groups:"create,update" json:"number_of_replicas,omitempty"`
	NumberOfShards            *int64 `groups:"create,update" json:"number_of_shards,omitempty"`
}

// expandIndexTemplate expands tf object into dto object
func expandIndexTemplate(ctx context.Context, diags diag.Diagnostics, o *tfoIndexTemplate) *dtoIndexTemplate {
	return &dtoIndexTemplate{
		MappingNestedObjectsLimit: schemautil.ValueInt64Pointer(o.MappingNestedObjectsLimit),
		NumberOfReplicas:          schemautil.ValueInt64Pointer(o.NumberOfReplicas),
		NumberOfShards:            schemautil.ValueInt64Pointer(o.NumberOfShards),
	}
}

// flattenIndexTemplate flattens dto object into tf object
func flattenIndexTemplate(ctx context.Context, diags diag.Diagnostics, o *dtoIndexTemplate) *tfoIndexTemplate {
	return &tfoIndexTemplate{
		MappingNestedObjectsLimit: types.Int64PointerValue(o.MappingNestedObjectsLimit),
		NumberOfReplicas:          types.Int64PointerValue(o.NumberOfReplicas),
		NumberOfShards:            types.Int64PointerValue(o.NumberOfShards),
	}
}

var indexTemplateAttrs = map[string]attr.Type{
	"mapping_nested_objects_limit": types.Int64Type,
	"number_of_replicas":           types.Int64Type,
	"number_of_shards":             types.Int64Type,
}

// tfoIpFilter CIDR address block, either as a string, or in a dict with an optional description field
type tfoIpFilter struct {
	Description types.String `tfsdk:"description"`
	Network     types.String `tfsdk:"network"`
}

// dtoIpFilter request/response object
type dtoIpFilter struct {
	Description *string `groups:"create,update" json:"description,omitempty"`
	Network     string  `groups:"create,update" json:"network"`
}

func (d *dtoIpFilter) UnmarshalJSON(data []byte) error {
	var s string
	err := json.Unmarshal(data, &s)
	if err == nil {
		d.Network = s
		return nil
	}

	type obj dtoIpFilter
	o := &struct {
		Description *string `groups:"create,update" json:"description,omitempty"`
		Network     string  `groups:"create,update" json:"network"`
	}{}
	err = json.Unmarshal(data, o)
	if err != nil {
		return err
	}

	d.Description = o.Description
	d.Network = o.Network
	return nil
}

// expandIpFilter expands tf object into dto object
func expandIpFilter(ctx context.Context, diags diag.Diagnostics, o *tfoIpFilter) *dtoIpFilter {
	return &dtoIpFilter{
		Description: schemautil.ValueStringPointer(o.Description),
		Network:     o.Network.ValueString(),
	}
}

// flattenIpFilter flattens dto object into tf object
func flattenIpFilter(ctx context.Context, diags diag.Diagnostics, o *dtoIpFilter) *tfoIpFilter {
	return &tfoIpFilter{
		Description: types.StringPointerValue(o.Description),
		Network:     types.StringValue(o.Network),
	}
}

var ipFilterAttrs = map[string]attr.Type{
	"description": types.StringType,
	"network":     types.StringType,
}

// tfoKibana Kibana settings
type tfoKibana struct {
	ElasticsearchRequestTimeout types.Int64 `tfsdk:"elasticsearch_request_timeout"`
	Enabled                     types.Bool  `tfsdk:"enabled"`
	MaxOldSpaceSize             types.Int64 `tfsdk:"max_old_space_size"`
}

// dtoKibana request/response object
type dtoKibana struct {
	ElasticsearchRequestTimeout *int64 `groups:"create,update" json:"elasticsearch_request_timeout,omitempty"`
	Enabled                     *bool  `groups:"create,update" json:"enabled,omitempty"`
	MaxOldSpaceSize             *int64 `groups:"create,update" json:"max_old_space_size,omitempty"`
}

// expandKibana expands tf object into dto object
func expandKibana(ctx context.Context, diags diag.Diagnostics, o *tfoKibana) *dtoKibana {
	return &dtoKibana{
		ElasticsearchRequestTimeout: schemautil.ValueInt64Pointer(o.ElasticsearchRequestTimeout),
		Enabled:                     schemautil.ValueBoolPointer(o.Enabled),
		MaxOldSpaceSize:             schemautil.ValueInt64Pointer(o.MaxOldSpaceSize),
	}
}

// flattenKibana flattens dto object into tf object
func flattenKibana(ctx context.Context, diags diag.Diagnostics, o *dtoKibana) *tfoKibana {
	return &tfoKibana{
		ElasticsearchRequestTimeout: types.Int64PointerValue(o.ElasticsearchRequestTimeout),
		Enabled:                     types.BoolPointerValue(o.Enabled),
		MaxOldSpaceSize:             types.Int64PointerValue(o.MaxOldSpaceSize),
	}
}

var kibanaAttrs = map[string]attr.Type{
	"elasticsearch_request_timeout": types.Int64Type,
	"enabled":                       types.BoolType,
	"max_old_space_size":            types.Int64Type,
}

// tfoPrivateAccess Allow access to selected service ports from private networks
type tfoPrivateAccess struct {
	Elasticsearch types.Bool `tfsdk:"elasticsearch"`
	Kibana        types.Bool `tfsdk:"kibana"`
	Prometheus    types.Bool `tfsdk:"prometheus"`
}

// dtoPrivateAccess request/response object
type dtoPrivateAccess struct {
	Elasticsearch *bool `groups:"create,update" json:"elasticsearch,omitempty"`
	Kibana        *bool `groups:"create,update" json:"kibana,omitempty"`
	Prometheus    *bool `groups:"create,update" json:"prometheus,omitempty"`
}

// expandPrivateAccess expands tf object into dto object
func expandPrivateAccess(ctx context.Context, diags diag.Diagnostics, o *tfoPrivateAccess) *dtoPrivateAccess {
	return &dtoPrivateAccess{
		Elasticsearch: schemautil.ValueBoolPointer(o.Elasticsearch),
		Kibana:        schemautil.ValueBoolPointer(o.Kibana),
		Prometheus:    schemautil.ValueBoolPointer(o.Prometheus),
	}
}

// flattenPrivateAccess flattens dto object into tf object
func flattenPrivateAccess(ctx context.Context, diags diag.Diagnostics, o *dtoPrivateAccess) *tfoPrivateAccess {
	return &tfoPrivateAccess{
		Elasticsearch: types.BoolPointerValue(o.Elasticsearch),
		Kibana:        types.BoolPointerValue(o.Kibana),
		Prometheus:    types.BoolPointerValue(o.Prometheus),
	}
}

var privateAccessAttrs = map[string]attr.Type{
	"elasticsearch": types.BoolType,
	"kibana":        types.BoolType,
	"prometheus":    types.BoolType,
}

// tfoPrivatelinkAccess Allow access to selected service components through Privatelink
type tfoPrivatelinkAccess struct {
	Elasticsearch types.Bool `tfsdk:"elasticsearch"`
	Kibana        types.Bool `tfsdk:"kibana"`
	Prometheus    types.Bool `tfsdk:"prometheus"`
}

// dtoPrivatelinkAccess request/response object
type dtoPrivatelinkAccess struct {
	Elasticsearch *bool `groups:"create,update" json:"elasticsearch,omitempty"`
	Kibana        *bool `groups:"create,update" json:"kibana,omitempty"`
	Prometheus    *bool `groups:"create,update" json:"prometheus,omitempty"`
}

// expandPrivatelinkAccess expands tf object into dto object
func expandPrivatelinkAccess(ctx context.Context, diags diag.Diagnostics, o *tfoPrivatelinkAccess) *dtoPrivatelinkAccess {
	return &dtoPrivatelinkAccess{
		Elasticsearch: schemautil.ValueBoolPointer(o.Elasticsearch),
		Kibana:        schemautil.ValueBoolPointer(o.Kibana),
		Prometheus:    schemautil.ValueBoolPointer(o.Prometheus),
	}
}

// flattenPrivatelinkAccess flattens dto object into tf object
func flattenPrivatelinkAccess(ctx context.Context, diags diag.Diagnostics, o *dtoPrivatelinkAccess) *tfoPrivatelinkAccess {
	return &tfoPrivatelinkAccess{
		Elasticsearch: types.BoolPointerValue(o.Elasticsearch),
		Kibana:        types.BoolPointerValue(o.Kibana),
		Prometheus:    types.BoolPointerValue(o.Prometheus),
	}
}

var privatelinkAccessAttrs = map[string]attr.Type{
	"elasticsearch": types.BoolType,
	"kibana":        types.BoolType,
	"prometheus":    types.BoolType,
}

// tfoPublicAccess Allow access to selected service ports from the public Internet
type tfoPublicAccess struct {
	Elasticsearch types.Bool `tfsdk:"elasticsearch"`
	Kibana        types.Bool `tfsdk:"kibana"`
	Prometheus    types.Bool `tfsdk:"prometheus"`
}

// dtoPublicAccess request/response object
type dtoPublicAccess struct {
	Elasticsearch *bool `groups:"create,update" json:"elasticsearch,omitempty"`
	Kibana        *bool `groups:"create,update" json:"kibana,omitempty"`
	Prometheus    *bool `groups:"create,update" json:"prometheus,omitempty"`
}

// expandPublicAccess expands tf object into dto object
func expandPublicAccess(ctx context.Context, diags diag.Diagnostics, o *tfoPublicAccess) *dtoPublicAccess {
	return &dtoPublicAccess{
		Elasticsearch: schemautil.ValueBoolPointer(o.Elasticsearch),
		Kibana:        schemautil.ValueBoolPointer(o.Kibana),
		Prometheus:    schemautil.ValueBoolPointer(o.Prometheus),
	}
}

// flattenPublicAccess flattens dto object into tf object
func flattenPublicAccess(ctx context.Context, diags diag.Diagnostics, o *dtoPublicAccess) *tfoPublicAccess {
	return &tfoPublicAccess{
		Elasticsearch: types.BoolPointerValue(o.Elasticsearch),
		Kibana:        types.BoolPointerValue(o.Kibana),
		Prometheus:    types.BoolPointerValue(o.Prometheus),
	}
}

var publicAccessAttrs = map[string]attr.Type{
	"elasticsearch": types.BoolType,
	"kibana":        types.BoolType,
	"prometheus":    types.BoolType,
}

// Expand public function that converts tf object into dto
func Expand(ctx context.Context, diags diag.Diagnostics, set types.Set) *dtoUserConfig {
	return schemautil.ExpandSetBlockNested[tfoUserConfig, dtoUserConfig](ctx, diags, expandUserConfig, set)
}

// Flatten public function that converts dto into tf object
func Flatten(ctx context.Context, diags diag.Diagnostics, m map[string]any) types.Set {
	o := new(dtoUserConfig)
	err := schemautil.MapToDTO(m, o)
	if err != nil {
		diags.AddError("Failed to marshal map user config to dto", err.Error())
		return types.SetNull(types.ObjectType{AttrTypes: userConfigAttrs})
	}
	return schemautil.FlattenSetBlockNested[dtoUserConfig, tfoUserConfig](ctx, diags, flattenUserConfig, o, userConfigAttrs)
}
