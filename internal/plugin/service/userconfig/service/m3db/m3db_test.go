// Code generated by user config generator. DO NOT EDIT.

package m3db

import (
	"context"
	"encoding/json"
	"testing"

	"github.com/google/go-cmp/cmp"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/stretchr/testify/require"

	"github.com/aiven/terraform-provider-aiven/internal/schemautil"
)

const allFields = `{
    "additional_backup_regions": [
        "foo"
    ],
    "custom_domain": "foo",
    "ip_filter": [
        {
            "description": "foo",
            "network": "foo"
        }
    ],
    "limits": {
        "max_recently_queried_series_blocks": 1,
        "max_recently_queried_series_disk_bytes_read": 1,
        "max_recently_queried_series_lookback": "foo",
        "query_docs": 1,
        "query_require_exhaustive": true,
        "query_series": 1
    },
    "m3": {
        "tag_options": {
            "allow_tag_name_duplicates": true,
            "allow_tag_value_empty": true
        }
    },
    "m3_version": "foo",
    "m3coordinator_enable_graphite_carbon_ingest": true,
    "m3db_version": "foo",
    "namespaces": [
        {
            "name": "foo",
            "options": {
                "retention_options": {
                    "block_data_expiry_duration": "foo",
                    "blocksize_duration": "foo",
                    "buffer_future_duration": "foo",
                    "buffer_past_duration": "foo",
                    "retention_period_duration": "foo"
                },
                "snapshot_enabled": true,
                "writes_to_commitlog": true
            },
            "resolution": "foo",
            "type": "foo"
        }
    ],
    "private_access": {
        "m3coordinator": true
    },
    "project_to_fork_from": "foo",
    "public_access": {
        "m3coordinator": true
    },
    "rules": {
        "mapping": [
            {
                "aggregations": [
                    "foo"
                ],
                "drop": true,
                "filter": "foo",
                "name": "foo",
                "namespaces": [
                    {
                        "resolution": "foo",
                        "retention": "foo"
                    }
                ],
                "tags": [
                    {
                        "name": "foo",
                        "value": "foo"
                    }
                ]
            }
        ]
    },
    "service_to_fork_from": "foo",
    "static_ips": true
}`
const updateOnlyFields = `{
    "additional_backup_regions": [
        "foo"
    ],
    "custom_domain": "foo",
    "ip_filter": [
        {
            "description": "foo",
            "network": "foo"
        }
    ],
    "limits": {
        "max_recently_queried_series_blocks": 1,
        "max_recently_queried_series_disk_bytes_read": 1,
        "max_recently_queried_series_lookback": "foo",
        "query_docs": 1,
        "query_require_exhaustive": true,
        "query_series": 1
    },
    "m3": {
        "tag_options": {
            "allow_tag_name_duplicates": true,
            "allow_tag_value_empty": true
        }
    },
    "m3_version": "foo",
    "m3coordinator_enable_graphite_carbon_ingest": true,
    "m3db_version": "foo",
    "namespaces": [
        {
            "name": "foo",
            "options": {
                "retention_options": {
                    "block_data_expiry_duration": "foo",
                    "blocksize_duration": "foo",
                    "buffer_future_duration": "foo",
                    "buffer_past_duration": "foo",
                    "retention_period_duration": "foo"
                },
                "snapshot_enabled": true,
                "writes_to_commitlog": true
            },
            "resolution": "foo",
            "type": "foo"
        }
    ],
    "private_access": {
        "m3coordinator": true
    },
    "public_access": {
        "m3coordinator": true
    },
    "rules": {
        "mapping": [
            {
                "aggregations": [
                    "foo"
                ],
                "drop": true,
                "filter": "foo",
                "name": "foo",
                "namespaces": [
                    {
                        "resolution": "foo",
                        "retention": "foo"
                    }
                ],
                "tags": [
                    {
                        "name": "foo",
                        "value": "foo"
                    }
                ]
            }
        ]
    },
    "static_ips": true
}`

func TestUserConfig(t *testing.T) {
	cases := []struct {
		name   string
		source string
		expect string
		create bool
	}{
		{
			name:   "fields to create resource",
			source: allFields,
			expect: allFields,
			create: true,
		},
		{
			name:   "only fields to update resource",
			source: allFields,
			expect: updateOnlyFields, // usually, fewer fields
			create: false,
		},
	}

	ctx := context.Background()
	diags := make(diag.Diagnostics, 0)
	for _, opt := range cases {
		t.Run(opt.name, func(t *testing.T) {
			dto := new(dtoUserConfig)
			err := json.Unmarshal([]byte(opt.source), dto)
			require.NoError(t, err)

			// From json to TF
			tfo := flattenUserConfig(ctx, diags, dto)
			require.Empty(t, diags)

			// From TF to json
			config := expandUserConfig(ctx, diags, tfo)
			require.Empty(t, diags)

			// Run specific marshal (create or update resource)
			dtoConfig, err := schemautil.MarshalUserConfig(config, opt.create)
			require.NoError(t, err)

			// Compares that output is strictly equal to the input
			// If so, the flow is valid
			b, err := json.MarshalIndent(dtoConfig, "", "    ")
			require.NoError(t, err)
			require.Empty(t, cmp.Diff(opt.expect, string(b)))
		})
	}
}
