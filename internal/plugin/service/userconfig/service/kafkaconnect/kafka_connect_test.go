// Code generated by user config generator. DO NOT EDIT.

package kafkaconnect

import (
	"context"
	"encoding/json"
	"testing"

	"github.com/google/go-cmp/cmp"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/stretchr/testify/require"

	"github.com/aiven/terraform-provider-aiven/internal/schemautil"
)

const allFields = `{
    "additional_backup_regions": [
        "foo"
    ],
    "ip_filter": [
        {
            "description": "foo",
            "network": "foo"
        }
    ],
    "kafka_connect": {
        "connector_client_config_override_policy": "foo",
        "consumer_auto_offset_reset": "foo",
        "consumer_fetch_max_bytes": 1,
        "consumer_isolation_level": "foo",
        "consumer_max_partition_fetch_bytes": 1,
        "consumer_max_poll_interval_ms": 1,
        "consumer_max_poll_records": 1,
        "offset_flush_interval_ms": 1,
        "offset_flush_timeout_ms": 1,
        "producer_batch_size": 1,
        "producer_buffer_memory": 1,
        "producer_compression_type": "foo",
        "producer_linger_ms": 1,
        "producer_max_request_size": 1,
        "scheduled_rebalance_max_delay_ms": 1,
        "session_timeout_ms": 1
    },
    "private_access": {
        "kafka_connect": true,
        "prometheus": true
    },
    "privatelink_access": {
        "jolokia": true,
        "kafka_connect": true,
        "prometheus": true
    },
    "public_access": {
        "kafka_connect": true,
        "prometheus": true
    },
    "static_ips": true
}`
const updateOnlyFields = `{
    "additional_backup_regions": [
        "foo"
    ],
    "ip_filter": [
        {
            "description": "foo",
            "network": "foo"
        }
    ],
    "kafka_connect": {
        "connector_client_config_override_policy": "foo",
        "consumer_auto_offset_reset": "foo",
        "consumer_fetch_max_bytes": 1,
        "consumer_isolation_level": "foo",
        "consumer_max_partition_fetch_bytes": 1,
        "consumer_max_poll_interval_ms": 1,
        "consumer_max_poll_records": 1,
        "offset_flush_interval_ms": 1,
        "offset_flush_timeout_ms": 1,
        "producer_batch_size": 1,
        "producer_buffer_memory": 1,
        "producer_compression_type": "foo",
        "producer_linger_ms": 1,
        "producer_max_request_size": 1,
        "scheduled_rebalance_max_delay_ms": 1,
        "session_timeout_ms": 1
    },
    "private_access": {
        "kafka_connect": true,
        "prometheus": true
    },
    "privatelink_access": {
        "jolokia": true,
        "kafka_connect": true,
        "prometheus": true
    },
    "public_access": {
        "kafka_connect": true,
        "prometheus": true
    },
    "static_ips": true
}`

func TestUserConfig(t *testing.T) {
	cases := []struct {
		name   string
		source string
		expect string
		create bool
	}{
		{
			name:   "fields to create resource",
			source: allFields,
			expect: allFields,
			create: true,
		},
		{
			name:   "only fields to update resource",
			source: allFields,
			expect: updateOnlyFields, // usually, fewer fields
			create: false,
		},
	}

	ctx := context.Background()
	diags := make(diag.Diagnostics, 0)
	for _, opt := range cases {
		t.Run(opt.name, func(t *testing.T) {
			dto := new(dtoUserConfig)
			err := json.Unmarshal([]byte(opt.source), dto)
			require.NoError(t, err)

			// From json to TF
			tfo := flattenUserConfig(ctx, diags, dto)
			require.Empty(t, diags)

			// From TF to json
			config := expandUserConfig(ctx, diags, tfo)
			require.Empty(t, diags)

			// Run specific marshal (create or update resource)
			dtoConfig, err := schemautil.MarshalUserConfig(config, opt.create)
			require.NoError(t, err)

			// Compares that output is strictly equal to the input
			// If so, the flow is valid
			b, err := json.MarshalIndent(dtoConfig, "", "    ")
			require.NoError(t, err)
			require.Empty(t, cmp.Diff(opt.expect, string(b)))
		})
	}
}
