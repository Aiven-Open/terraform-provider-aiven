// Code generated by user config generator. DO NOT EDIT.

package kafkaconnect

import (
	"context"
	"encoding/json"

	setvalidator "github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	attr "github.com/hashicorp/terraform-plugin-framework/attr"
	datasource "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	diag "github.com/hashicorp/terraform-plugin-framework/diag"
	resource "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	validator "github.com/hashicorp/terraform-plugin-framework/schema/validator"
	types "github.com/hashicorp/terraform-plugin-framework/types"

	schemautil "github.com/aiven/terraform-provider-aiven/internal/schemautil"
)

// NewResourceSchema returns resource schema
func NewResourceSchema() resource.SetNestedBlock {
	return resource.SetNestedBlock{
		Description: "KafkaConnect user configurable settings",
		NestedObject: resource.NestedBlockObject{
			Attributes: map[string]resource.Attribute{
				"additional_backup_regions": resource.SetAttribute{
					Computed:    true,
					Description: "Additional Cloud Regions for Backup Replication.",
					ElementType: types.StringType,
					Optional:    true,
					Validators:  []validator.Set{setvalidator.SizeAtMost(1)},
				},
				"static_ips": resource.BoolAttribute{
					Computed:    true,
					Description: "Use static public IP addresses.",
					Optional:    true,
				},
			},
			Blocks: map[string]resource.Block{
				"ip_filter": resource.SetNestedBlock{
					Description: "Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'",
					NestedObject: resource.NestedBlockObject{Attributes: map[string]resource.Attribute{
						"description": resource.StringAttribute{
							Computed:    true,
							Description: "Description for IP filter list entry.",
							Optional:    true,
						},
						"network": resource.StringAttribute{
							Description: "CIDR address block.",
							Required:    true,
						},
					}},
					Validators: []validator.Set{setvalidator.SizeAtMost(1024)},
				},
				"kafka_connect": resource.SetNestedBlock{
					Description: "Kafka Connect configuration values",
					NestedObject: resource.NestedBlockObject{Attributes: map[string]resource.Attribute{
						"connector_client_config_override_policy": resource.StringAttribute{
							Computed:    true,
							Description: "Defines what client configurations can be overridden by the connector. Default is None.",
							Optional:    true,
						},
						"consumer_auto_offset_reset": resource.StringAttribute{
							Computed:    true,
							Description: "What to do when there is no initial offset in Kafka or if the current offset does not exist any more on the server. Default is earliest.",
							Optional:    true,
						},
						"consumer_fetch_max_bytes": resource.Int64Attribute{
							Computed:    true,
							Description: "Records are fetched in batches by the consumer, and if the first record batch in the first non-empty partition of the fetch is larger than this value, the record batch will still be returned to ensure that the consumer can make progress. As such, this is not a absolute maximum.",
							Optional:    true,
						},
						"consumer_isolation_level": resource.StringAttribute{
							Computed:    true,
							Description: "Transaction read isolation level. read_uncommitted is the default, but read_committed can be used if consume-exactly-once behavior is desired.",
							Optional:    true,
						},
						"consumer_max_partition_fetch_bytes": resource.Int64Attribute{
							Computed:    true,
							Description: "Records are fetched in batches by the consumer.If the first record batch in the first non-empty partition of the fetch is larger than this limit, the batch will still be returned to ensure that the consumer can make progress. .",
							Optional:    true,
						},
						"consumer_max_poll_interval_ms": resource.Int64Attribute{
							Computed:    true,
							Description: "The maximum delay in milliseconds between invocations of poll() when using consumer group management (defaults to 300000).",
							Optional:    true,
						},
						"consumer_max_poll_records": resource.Int64Attribute{
							Computed:    true,
							Description: "The maximum number of records returned in a single call to poll() (defaults to 500).",
							Optional:    true,
						},
						"offset_flush_interval_ms": resource.Int64Attribute{
							Computed:    true,
							Description: "The interval at which to try committing offsets for tasks (defaults to 60000).",
							Optional:    true,
						},
						"offset_flush_timeout_ms": resource.Int64Attribute{
							Computed:    true,
							Description: "Maximum number of milliseconds to wait for records to flush and partition offset data to be committed to offset storage before cancelling the process and restoring the offset data to be committed in a future attempt (defaults to 5000).",
							Optional:    true,
						},
						"producer_batch_size": resource.Int64Attribute{
							Computed:    true,
							Description: "This setting gives the upper bound of the batch size to be sent. If there are fewer than this many bytes accumulated for this partition, the producer will 'linger' for the linger.ms time waiting for more records to show up. A batch size of zero will disable batching entirely (defaults to 16384).",
							Optional:    true,
						},
						"producer_buffer_memory": resource.Int64Attribute{
							Computed:    true,
							Description: "The total bytes of memory the producer can use to buffer records waiting to be sent to the broker (defaults to 33554432).",
							Optional:    true,
						},
						"producer_compression_type": resource.StringAttribute{
							Computed:    true,
							Description: "Specify the default compression type for producers. This configuration accepts the standard compression codecs ('gzip', 'snappy', 'lz4', 'zstd'). It additionally accepts 'none' which is the default and equivalent to no compression.",
							Optional:    true,
						},
						"producer_linger_ms": resource.Int64Attribute{
							Computed:    true,
							Description: "This setting gives the upper bound on the delay for batching: once there is batch.size worth of records for a partition it will be sent immediately regardless of this setting, however if there are fewer than this many bytes accumulated for this partition the producer will 'linger' for the specified time waiting for more records to show up. Defaults to 0.",
							Optional:    true,
						},
						"producer_max_request_size": resource.Int64Attribute{
							Computed:    true,
							Description: "This setting will limit the number of record batches the producer will send in a single request to avoid sending huge requests.",
							Optional:    true,
						},
						"scheduled_rebalance_max_delay_ms": resource.Int64Attribute{
							Computed:    true,
							Description: "The maximum delay that is scheduled in order to wait for the return of one or more departed workers before rebalancing and reassigning their connectors and tasks to the group. During this period the connectors and tasks of the departed workers remain unassigned.  Defaults to 5 minutes.",
							Optional:    true,
						},
						"session_timeout_ms": resource.Int64Attribute{
							Computed:    true,
							Description: "The timeout in milliseconds used to detect failures when using Kafkaâ€™s group management facilities (defaults to 10000).",
							Optional:    true,
						},
					}},
				},
				"private_access": resource.SetNestedBlock{
					Description: "Allow access to selected service ports from private networks",
					NestedObject: resource.NestedBlockObject{Attributes: map[string]resource.Attribute{
						"kafka_connect": resource.BoolAttribute{
							Computed:    true,
							Description: "Allow clients to connect to kafka_connect with a DNS name that always resolves to the service's private IP addresses. Only available in certain network locations.",
							Optional:    true,
						},
						"prometheus": resource.BoolAttribute{
							Computed:    true,
							Description: "Allow clients to connect to prometheus with a DNS name that always resolves to the service's private IP addresses. Only available in certain network locations.",
							Optional:    true,
						},
					}},
				},
				"privatelink_access": resource.SetNestedBlock{
					Description: "Allow access to selected service components through Privatelink",
					NestedObject: resource.NestedBlockObject{Attributes: map[string]resource.Attribute{
						"jolokia": resource.BoolAttribute{
							Computed:    true,
							Description: "Enable jolokia.",
							Optional:    true,
						},
						"kafka_connect": resource.BoolAttribute{
							Computed:    true,
							Description: "Enable kafka_connect.",
							Optional:    true,
						},
						"prometheus": resource.BoolAttribute{
							Computed:    true,
							Description: "Enable prometheus.",
							Optional:    true,
						},
					}},
				},
				"public_access": resource.SetNestedBlock{
					Description: "Allow access to selected service ports from the public Internet",
					NestedObject: resource.NestedBlockObject{Attributes: map[string]resource.Attribute{
						"kafka_connect": resource.BoolAttribute{
							Computed:    true,
							Description: "Allow clients to connect to kafka_connect from the public internet for service nodes that are in a project VPC or another type of private network.",
							Optional:    true,
						},
						"prometheus": resource.BoolAttribute{
							Computed:    true,
							Description: "Allow clients to connect to prometheus from the public internet for service nodes that are in a project VPC or another type of private network.",
							Optional:    true,
						},
					}},
				},
			},
		},
		Validators: []validator.Set{setvalidator.SizeAtMost(1)},
	}
}

// NewDataSourceSchema returns datasource schema
func NewDataSourceSchema() datasource.SetNestedBlock {
	return datasource.SetNestedBlock{
		Description: "KafkaConnect user configurable settings",
		NestedObject: datasource.NestedBlockObject{
			Attributes: map[string]datasource.Attribute{
				"additional_backup_regions": datasource.SetAttribute{
					Computed:    true,
					Description: "Additional Cloud Regions for Backup Replication.",
					ElementType: types.StringType,
					Validators:  []validator.Set{setvalidator.SizeAtMost(1)},
				},
				"static_ips": datasource.BoolAttribute{
					Computed:    true,
					Description: "Use static public IP addresses.",
				},
			},
			Blocks: map[string]datasource.Block{
				"ip_filter": datasource.SetNestedBlock{
					Description: "Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'",
					NestedObject: datasource.NestedBlockObject{Attributes: map[string]datasource.Attribute{
						"description": datasource.StringAttribute{
							Computed:    true,
							Description: "Description for IP filter list entry.",
						},
						"network": datasource.StringAttribute{
							Computed:    true,
							Description: "CIDR address block.",
						},
					}},
					Validators: []validator.Set{setvalidator.SizeAtMost(1024)},
				},
				"kafka_connect": datasource.SetNestedBlock{
					Description: "Kafka Connect configuration values",
					NestedObject: datasource.NestedBlockObject{Attributes: map[string]datasource.Attribute{
						"connector_client_config_override_policy": datasource.StringAttribute{
							Computed:    true,
							Description: "Defines what client configurations can be overridden by the connector. Default is None.",
						},
						"consumer_auto_offset_reset": datasource.StringAttribute{
							Computed:    true,
							Description: "What to do when there is no initial offset in Kafka or if the current offset does not exist any more on the server. Default is earliest.",
						},
						"consumer_fetch_max_bytes": datasource.Int64Attribute{
							Computed:    true,
							Description: "Records are fetched in batches by the consumer, and if the first record batch in the first non-empty partition of the fetch is larger than this value, the record batch will still be returned to ensure that the consumer can make progress. As such, this is not a absolute maximum.",
						},
						"consumer_isolation_level": datasource.StringAttribute{
							Computed:    true,
							Description: "Transaction read isolation level. read_uncommitted is the default, but read_committed can be used if consume-exactly-once behavior is desired.",
						},
						"consumer_max_partition_fetch_bytes": datasource.Int64Attribute{
							Computed:    true,
							Description: "Records are fetched in batches by the consumer.If the first record batch in the first non-empty partition of the fetch is larger than this limit, the batch will still be returned to ensure that the consumer can make progress. .",
						},
						"consumer_max_poll_interval_ms": datasource.Int64Attribute{
							Computed:    true,
							Description: "The maximum delay in milliseconds between invocations of poll() when using consumer group management (defaults to 300000).",
						},
						"consumer_max_poll_records": datasource.Int64Attribute{
							Computed:    true,
							Description: "The maximum number of records returned in a single call to poll() (defaults to 500).",
						},
						"offset_flush_interval_ms": datasource.Int64Attribute{
							Computed:    true,
							Description: "The interval at which to try committing offsets for tasks (defaults to 60000).",
						},
						"offset_flush_timeout_ms": datasource.Int64Attribute{
							Computed:    true,
							Description: "Maximum number of milliseconds to wait for records to flush and partition offset data to be committed to offset storage before cancelling the process and restoring the offset data to be committed in a future attempt (defaults to 5000).",
						},
						"producer_batch_size": datasource.Int64Attribute{
							Computed:    true,
							Description: "This setting gives the upper bound of the batch size to be sent. If there are fewer than this many bytes accumulated for this partition, the producer will 'linger' for the linger.ms time waiting for more records to show up. A batch size of zero will disable batching entirely (defaults to 16384).",
						},
						"producer_buffer_memory": datasource.Int64Attribute{
							Computed:    true,
							Description: "The total bytes of memory the producer can use to buffer records waiting to be sent to the broker (defaults to 33554432).",
						},
						"producer_compression_type": datasource.StringAttribute{
							Computed:    true,
							Description: "Specify the default compression type for producers. This configuration accepts the standard compression codecs ('gzip', 'snappy', 'lz4', 'zstd'). It additionally accepts 'none' which is the default and equivalent to no compression.",
						},
						"producer_linger_ms": datasource.Int64Attribute{
							Computed:    true,
							Description: "This setting gives the upper bound on the delay for batching: once there is batch.size worth of records for a partition it will be sent immediately regardless of this setting, however if there are fewer than this many bytes accumulated for this partition the producer will 'linger' for the specified time waiting for more records to show up. Defaults to 0.",
						},
						"producer_max_request_size": datasource.Int64Attribute{
							Computed:    true,
							Description: "This setting will limit the number of record batches the producer will send in a single request to avoid sending huge requests.",
						},
						"scheduled_rebalance_max_delay_ms": datasource.Int64Attribute{
							Computed:    true,
							Description: "The maximum delay that is scheduled in order to wait for the return of one or more departed workers before rebalancing and reassigning their connectors and tasks to the group. During this period the connectors and tasks of the departed workers remain unassigned.  Defaults to 5 minutes.",
						},
						"session_timeout_ms": datasource.Int64Attribute{
							Computed:    true,
							Description: "The timeout in milliseconds used to detect failures when using Kafkaâ€™s group management facilities (defaults to 10000).",
						},
					}},
				},
				"private_access": datasource.SetNestedBlock{
					Description: "Allow access to selected service ports from private networks",
					NestedObject: datasource.NestedBlockObject{Attributes: map[string]datasource.Attribute{
						"kafka_connect": datasource.BoolAttribute{
							Computed:    true,
							Description: "Allow clients to connect to kafka_connect with a DNS name that always resolves to the service's private IP addresses. Only available in certain network locations.",
						},
						"prometheus": datasource.BoolAttribute{
							Computed:    true,
							Description: "Allow clients to connect to prometheus with a DNS name that always resolves to the service's private IP addresses. Only available in certain network locations.",
						},
					}},
				},
				"privatelink_access": datasource.SetNestedBlock{
					Description: "Allow access to selected service components through Privatelink",
					NestedObject: datasource.NestedBlockObject{Attributes: map[string]datasource.Attribute{
						"jolokia": datasource.BoolAttribute{
							Computed:    true,
							Description: "Enable jolokia.",
						},
						"kafka_connect": datasource.BoolAttribute{
							Computed:    true,
							Description: "Enable kafka_connect.",
						},
						"prometheus": datasource.BoolAttribute{
							Computed:    true,
							Description: "Enable prometheus.",
						},
					}},
				},
				"public_access": datasource.SetNestedBlock{
					Description: "Allow access to selected service ports from the public Internet",
					NestedObject: datasource.NestedBlockObject{Attributes: map[string]datasource.Attribute{
						"kafka_connect": datasource.BoolAttribute{
							Computed:    true,
							Description: "Allow clients to connect to kafka_connect from the public internet for service nodes that are in a project VPC or another type of private network.",
						},
						"prometheus": datasource.BoolAttribute{
							Computed:    true,
							Description: "Allow clients to connect to prometheus from the public internet for service nodes that are in a project VPC or another type of private network.",
						},
					}},
				},
			},
		},
		Validators: []validator.Set{setvalidator.SizeAtMost(1)},
	}
}

// tfoUserConfig KafkaConnect user configurable settings
type tfoUserConfig struct {
	AdditionalBackupRegions types.Set  `tfsdk:"additional_backup_regions"`
	IpFilter                types.Set  `tfsdk:"ip_filter"`
	KafkaConnect            types.Set  `tfsdk:"kafka_connect"`
	PrivateAccess           types.Set  `tfsdk:"private_access"`
	PrivatelinkAccess       types.Set  `tfsdk:"privatelink_access"`
	PublicAccess            types.Set  `tfsdk:"public_access"`
	StaticIps               types.Bool `tfsdk:"static_ips"`
}

// dtoUserConfig request/response object
type dtoUserConfig struct {
	AdditionalBackupRegions []string              `groups:"create,update" json:"additional_backup_regions,omitempty"`
	IpFilter                []*dtoIpFilter        `groups:"create,update" json:"ip_filter,omitempty"`
	KafkaConnect            *dtoKafkaConnect      `groups:"create,update" json:"kafka_connect,omitempty"`
	PrivateAccess           *dtoPrivateAccess     `groups:"create,update" json:"private_access,omitempty"`
	PrivatelinkAccess       *dtoPrivatelinkAccess `groups:"create,update" json:"privatelink_access,omitempty"`
	PublicAccess            *dtoPublicAccess      `groups:"create,update" json:"public_access,omitempty"`
	StaticIps               *bool                 `groups:"create,update" json:"static_ips,omitempty"`
}

// expandUserConfig expands tf object into dto object
func expandUserConfig(ctx context.Context, diags diag.Diagnostics, o *tfoUserConfig) *dtoUserConfig {
	additionalBackupRegionsVar := schemautil.ExpandSet[string](ctx, diags, o.AdditionalBackupRegions)
	if diags.HasError() {
		return nil
	}
	ipFilterVar := schemautil.ExpandSetNested(ctx, diags, expandIpFilter, o.IpFilter)
	if diags.HasError() {
		return nil
	}
	kafkaConnectVar := schemautil.ExpandSetBlockNested(ctx, diags, expandKafkaConnect, o.KafkaConnect)
	if diags.HasError() {
		return nil
	}
	privateAccessVar := schemautil.ExpandSetBlockNested(ctx, diags, expandPrivateAccess, o.PrivateAccess)
	if diags.HasError() {
		return nil
	}
	privatelinkAccessVar := schemautil.ExpandSetBlockNested(ctx, diags, expandPrivatelinkAccess, o.PrivatelinkAccess)
	if diags.HasError() {
		return nil
	}
	publicAccessVar := schemautil.ExpandSetBlockNested(ctx, diags, expandPublicAccess, o.PublicAccess)
	if diags.HasError() {
		return nil
	}
	return &dtoUserConfig{
		AdditionalBackupRegions: additionalBackupRegionsVar,
		IpFilter:                ipFilterVar,
		KafkaConnect:            kafkaConnectVar,
		PrivateAccess:           privateAccessVar,
		PrivatelinkAccess:       privatelinkAccessVar,
		PublicAccess:            publicAccessVar,
		StaticIps:               schemautil.ValueBoolPointer(o.StaticIps),
	}
}

// flattenUserConfig flattens dto object into tf object
func flattenUserConfig(ctx context.Context, diags diag.Diagnostics, o *dtoUserConfig) *tfoUserConfig {
	additionalBackupRegionsVar, d := types.SetValueFrom(ctx, types.StringType, o.AdditionalBackupRegions)
	diags.Append(d...)
	if diags.HasError() {
		return nil
	}
	ipFilterVar := schemautil.FlattenSetNested(ctx, diags, flattenIpFilter, o.IpFilter, ipFilterAttrs)
	if diags.HasError() {
		return nil
	}
	kafkaConnectVar := schemautil.FlattenSetBlockNested(ctx, diags, flattenKafkaConnect, o.KafkaConnect, kafkaConnectAttrs)
	if diags.HasError() {
		return nil
	}
	privateAccessVar := schemautil.FlattenSetBlockNested(ctx, diags, flattenPrivateAccess, o.PrivateAccess, privateAccessAttrs)
	if diags.HasError() {
		return nil
	}
	privatelinkAccessVar := schemautil.FlattenSetBlockNested(ctx, diags, flattenPrivatelinkAccess, o.PrivatelinkAccess, privatelinkAccessAttrs)
	if diags.HasError() {
		return nil
	}
	publicAccessVar := schemautil.FlattenSetBlockNested(ctx, diags, flattenPublicAccess, o.PublicAccess, publicAccessAttrs)
	if diags.HasError() {
		return nil
	}
	return &tfoUserConfig{
		AdditionalBackupRegions: additionalBackupRegionsVar,
		IpFilter:                ipFilterVar,
		KafkaConnect:            kafkaConnectVar,
		PrivateAccess:           privateAccessVar,
		PrivatelinkAccess:       privatelinkAccessVar,
		PublicAccess:            publicAccessVar,
		StaticIps:               types.BoolPointerValue(o.StaticIps),
	}
}

var userConfigAttrs = map[string]attr.Type{
	"additional_backup_regions": types.SetType{ElemType: types.StringType},
	"ip_filter":                 types.SetType{ElemType: types.ObjectType{AttrTypes: ipFilterAttrs}},
	"kafka_connect":             types.SetType{ElemType: types.ObjectType{AttrTypes: kafkaConnectAttrs}},
	"private_access":            types.SetType{ElemType: types.ObjectType{AttrTypes: privateAccessAttrs}},
	"privatelink_access":        types.SetType{ElemType: types.ObjectType{AttrTypes: privatelinkAccessAttrs}},
	"public_access":             types.SetType{ElemType: types.ObjectType{AttrTypes: publicAccessAttrs}},
	"static_ips":                types.BoolType,
}

// tfoIpFilter CIDR address block, either as a string, or in a dict with an optional description field
type tfoIpFilter struct {
	Description types.String `tfsdk:"description"`
	Network     types.String `tfsdk:"network"`
}

// dtoIpFilter request/response object
type dtoIpFilter struct {
	Description *string `groups:"create,update" json:"description,omitempty"`
	Network     string  `groups:"create,update" json:"network"`
}

func (d *dtoIpFilter) UnmarshalJSON(data []byte) error {
	var s string
	err := json.Unmarshal(data, &s)
	if err == nil {
		d.Network = s
		return nil
	}

	type obj dtoIpFilter
	o := &struct {
		Description *string `groups:"create,update" json:"description,omitempty"`
		Network     string  `groups:"create,update" json:"network"`
	}{}
	err = json.Unmarshal(data, o)
	if err != nil {
		return err
	}

	d.Description = o.Description
	d.Network = o.Network
	return nil
}

// expandIpFilter expands tf object into dto object
func expandIpFilter(ctx context.Context, diags diag.Diagnostics, o *tfoIpFilter) *dtoIpFilter {
	return &dtoIpFilter{
		Description: schemautil.ValueStringPointer(o.Description),
		Network:     o.Network.ValueString(),
	}
}

// flattenIpFilter flattens dto object into tf object
func flattenIpFilter(ctx context.Context, diags diag.Diagnostics, o *dtoIpFilter) *tfoIpFilter {
	return &tfoIpFilter{
		Description: types.StringPointerValue(o.Description),
		Network:     types.StringValue(o.Network),
	}
}

var ipFilterAttrs = map[string]attr.Type{
	"description": types.StringType,
	"network":     types.StringType,
}

// tfoKafkaConnect Kafka Connect configuration values
type tfoKafkaConnect struct {
	ConnectorClientConfigOverridePolicy types.String `tfsdk:"connector_client_config_override_policy"`
	ConsumerAutoOffsetReset             types.String `tfsdk:"consumer_auto_offset_reset"`
	ConsumerFetchMaxBytes               types.Int64  `tfsdk:"consumer_fetch_max_bytes"`
	ConsumerIsolationLevel              types.String `tfsdk:"consumer_isolation_level"`
	ConsumerMaxPartitionFetchBytes      types.Int64  `tfsdk:"consumer_max_partition_fetch_bytes"`
	ConsumerMaxPollIntervalMs           types.Int64  `tfsdk:"consumer_max_poll_interval_ms"`
	ConsumerMaxPollRecords              types.Int64  `tfsdk:"consumer_max_poll_records"`
	OffsetFlushIntervalMs               types.Int64  `tfsdk:"offset_flush_interval_ms"`
	OffsetFlushTimeoutMs                types.Int64  `tfsdk:"offset_flush_timeout_ms"`
	ProducerBatchSize                   types.Int64  `tfsdk:"producer_batch_size"`
	ProducerBufferMemory                types.Int64  `tfsdk:"producer_buffer_memory"`
	ProducerCompressionType             types.String `tfsdk:"producer_compression_type"`
	ProducerLingerMs                    types.Int64  `tfsdk:"producer_linger_ms"`
	ProducerMaxRequestSize              types.Int64  `tfsdk:"producer_max_request_size"`
	ScheduledRebalanceMaxDelayMs        types.Int64  `tfsdk:"scheduled_rebalance_max_delay_ms"`
	SessionTimeoutMs                    types.Int64  `tfsdk:"session_timeout_ms"`
}

// dtoKafkaConnect request/response object
type dtoKafkaConnect struct {
	ConnectorClientConfigOverridePolicy *string `groups:"create,update" json:"connector_client_config_override_policy,omitempty"`
	ConsumerAutoOffsetReset             *string `groups:"create,update" json:"consumer_auto_offset_reset,omitempty"`
	ConsumerFetchMaxBytes               *int64  `groups:"create,update" json:"consumer_fetch_max_bytes,omitempty"`
	ConsumerIsolationLevel              *string `groups:"create,update" json:"consumer_isolation_level,omitempty"`
	ConsumerMaxPartitionFetchBytes      *int64  `groups:"create,update" json:"consumer_max_partition_fetch_bytes,omitempty"`
	ConsumerMaxPollIntervalMs           *int64  `groups:"create,update" json:"consumer_max_poll_interval_ms,omitempty"`
	ConsumerMaxPollRecords              *int64  `groups:"create,update" json:"consumer_max_poll_records,omitempty"`
	OffsetFlushIntervalMs               *int64  `groups:"create,update" json:"offset_flush_interval_ms,omitempty"`
	OffsetFlushTimeoutMs                *int64  `groups:"create,update" json:"offset_flush_timeout_ms,omitempty"`
	ProducerBatchSize                   *int64  `groups:"create,update" json:"producer_batch_size,omitempty"`
	ProducerBufferMemory                *int64  `groups:"create,update" json:"producer_buffer_memory,omitempty"`
	ProducerCompressionType             *string `groups:"create,update" json:"producer_compression_type,omitempty"`
	ProducerLingerMs                    *int64  `groups:"create,update" json:"producer_linger_ms,omitempty"`
	ProducerMaxRequestSize              *int64  `groups:"create,update" json:"producer_max_request_size,omitempty"`
	ScheduledRebalanceMaxDelayMs        *int64  `groups:"create,update" json:"scheduled_rebalance_max_delay_ms,omitempty"`
	SessionTimeoutMs                    *int64  `groups:"create,update" json:"session_timeout_ms,omitempty"`
}

// expandKafkaConnect expands tf object into dto object
func expandKafkaConnect(ctx context.Context, diags diag.Diagnostics, o *tfoKafkaConnect) *dtoKafkaConnect {
	return &dtoKafkaConnect{
		ConnectorClientConfigOverridePolicy: schemautil.ValueStringPointer(o.ConnectorClientConfigOverridePolicy),
		ConsumerAutoOffsetReset:             schemautil.ValueStringPointer(o.ConsumerAutoOffsetReset),
		ConsumerFetchMaxBytes:               schemautil.ValueInt64Pointer(o.ConsumerFetchMaxBytes),
		ConsumerIsolationLevel:              schemautil.ValueStringPointer(o.ConsumerIsolationLevel),
		ConsumerMaxPartitionFetchBytes:      schemautil.ValueInt64Pointer(o.ConsumerMaxPartitionFetchBytes),
		ConsumerMaxPollIntervalMs:           schemautil.ValueInt64Pointer(o.ConsumerMaxPollIntervalMs),
		ConsumerMaxPollRecords:              schemautil.ValueInt64Pointer(o.ConsumerMaxPollRecords),
		OffsetFlushIntervalMs:               schemautil.ValueInt64Pointer(o.OffsetFlushIntervalMs),
		OffsetFlushTimeoutMs:                schemautil.ValueInt64Pointer(o.OffsetFlushTimeoutMs),
		ProducerBatchSize:                   schemautil.ValueInt64Pointer(o.ProducerBatchSize),
		ProducerBufferMemory:                schemautil.ValueInt64Pointer(o.ProducerBufferMemory),
		ProducerCompressionType:             schemautil.ValueStringPointer(o.ProducerCompressionType),
		ProducerLingerMs:                    schemautil.ValueInt64Pointer(o.ProducerLingerMs),
		ProducerMaxRequestSize:              schemautil.ValueInt64Pointer(o.ProducerMaxRequestSize),
		ScheduledRebalanceMaxDelayMs:        schemautil.ValueInt64Pointer(o.ScheduledRebalanceMaxDelayMs),
		SessionTimeoutMs:                    schemautil.ValueInt64Pointer(o.SessionTimeoutMs),
	}
}

// flattenKafkaConnect flattens dto object into tf object
func flattenKafkaConnect(ctx context.Context, diags diag.Diagnostics, o *dtoKafkaConnect) *tfoKafkaConnect {
	return &tfoKafkaConnect{
		ConnectorClientConfigOverridePolicy: types.StringPointerValue(o.ConnectorClientConfigOverridePolicy),
		ConsumerAutoOffsetReset:             types.StringPointerValue(o.ConsumerAutoOffsetReset),
		ConsumerFetchMaxBytes:               types.Int64PointerValue(o.ConsumerFetchMaxBytes),
		ConsumerIsolationLevel:              types.StringPointerValue(o.ConsumerIsolationLevel),
		ConsumerMaxPartitionFetchBytes:      types.Int64PointerValue(o.ConsumerMaxPartitionFetchBytes),
		ConsumerMaxPollIntervalMs:           types.Int64PointerValue(o.ConsumerMaxPollIntervalMs),
		ConsumerMaxPollRecords:              types.Int64PointerValue(o.ConsumerMaxPollRecords),
		OffsetFlushIntervalMs:               types.Int64PointerValue(o.OffsetFlushIntervalMs),
		OffsetFlushTimeoutMs:                types.Int64PointerValue(o.OffsetFlushTimeoutMs),
		ProducerBatchSize:                   types.Int64PointerValue(o.ProducerBatchSize),
		ProducerBufferMemory:                types.Int64PointerValue(o.ProducerBufferMemory),
		ProducerCompressionType:             types.StringPointerValue(o.ProducerCompressionType),
		ProducerLingerMs:                    types.Int64PointerValue(o.ProducerLingerMs),
		ProducerMaxRequestSize:              types.Int64PointerValue(o.ProducerMaxRequestSize),
		ScheduledRebalanceMaxDelayMs:        types.Int64PointerValue(o.ScheduledRebalanceMaxDelayMs),
		SessionTimeoutMs:                    types.Int64PointerValue(o.SessionTimeoutMs),
	}
}

var kafkaConnectAttrs = map[string]attr.Type{
	"connector_client_config_override_policy": types.StringType,
	"consumer_auto_offset_reset":              types.StringType,
	"consumer_fetch_max_bytes":                types.Int64Type,
	"consumer_isolation_level":                types.StringType,
	"consumer_max_partition_fetch_bytes":      types.Int64Type,
	"consumer_max_poll_interval_ms":           types.Int64Type,
	"consumer_max_poll_records":               types.Int64Type,
	"offset_flush_interval_ms":                types.Int64Type,
	"offset_flush_timeout_ms":                 types.Int64Type,
	"producer_batch_size":                     types.Int64Type,
	"producer_buffer_memory":                  types.Int64Type,
	"producer_compression_type":               types.StringType,
	"producer_linger_ms":                      types.Int64Type,
	"producer_max_request_size":               types.Int64Type,
	"scheduled_rebalance_max_delay_ms":        types.Int64Type,
	"session_timeout_ms":                      types.Int64Type,
}

// tfoPrivateAccess Allow access to selected service ports from private networks
type tfoPrivateAccess struct {
	KafkaConnect types.Bool `tfsdk:"kafka_connect"`
	Prometheus   types.Bool `tfsdk:"prometheus"`
}

// dtoPrivateAccess request/response object
type dtoPrivateAccess struct {
	KafkaConnect *bool `groups:"create,update" json:"kafka_connect,omitempty"`
	Prometheus   *bool `groups:"create,update" json:"prometheus,omitempty"`
}

// expandPrivateAccess expands tf object into dto object
func expandPrivateAccess(ctx context.Context, diags diag.Diagnostics, o *tfoPrivateAccess) *dtoPrivateAccess {
	return &dtoPrivateAccess{
		KafkaConnect: schemautil.ValueBoolPointer(o.KafkaConnect),
		Prometheus:   schemautil.ValueBoolPointer(o.Prometheus),
	}
}

// flattenPrivateAccess flattens dto object into tf object
func flattenPrivateAccess(ctx context.Context, diags diag.Diagnostics, o *dtoPrivateAccess) *tfoPrivateAccess {
	return &tfoPrivateAccess{
		KafkaConnect: types.BoolPointerValue(o.KafkaConnect),
		Prometheus:   types.BoolPointerValue(o.Prometheus),
	}
}

var privateAccessAttrs = map[string]attr.Type{
	"kafka_connect": types.BoolType,
	"prometheus":    types.BoolType,
}

// tfoPrivatelinkAccess Allow access to selected service components through Privatelink
type tfoPrivatelinkAccess struct {
	Jolokia      types.Bool `tfsdk:"jolokia"`
	KafkaConnect types.Bool `tfsdk:"kafka_connect"`
	Prometheus   types.Bool `tfsdk:"prometheus"`
}

// dtoPrivatelinkAccess request/response object
type dtoPrivatelinkAccess struct {
	Jolokia      *bool `groups:"create,update" json:"jolokia,omitempty"`
	KafkaConnect *bool `groups:"create,update" json:"kafka_connect,omitempty"`
	Prometheus   *bool `groups:"create,update" json:"prometheus,omitempty"`
}

// expandPrivatelinkAccess expands tf object into dto object
func expandPrivatelinkAccess(ctx context.Context, diags diag.Diagnostics, o *tfoPrivatelinkAccess) *dtoPrivatelinkAccess {
	return &dtoPrivatelinkAccess{
		Jolokia:      schemautil.ValueBoolPointer(o.Jolokia),
		KafkaConnect: schemautil.ValueBoolPointer(o.KafkaConnect),
		Prometheus:   schemautil.ValueBoolPointer(o.Prometheus),
	}
}

// flattenPrivatelinkAccess flattens dto object into tf object
func flattenPrivatelinkAccess(ctx context.Context, diags diag.Diagnostics, o *dtoPrivatelinkAccess) *tfoPrivatelinkAccess {
	return &tfoPrivatelinkAccess{
		Jolokia:      types.BoolPointerValue(o.Jolokia),
		KafkaConnect: types.BoolPointerValue(o.KafkaConnect),
		Prometheus:   types.BoolPointerValue(o.Prometheus),
	}
}

var privatelinkAccessAttrs = map[string]attr.Type{
	"jolokia":       types.BoolType,
	"kafka_connect": types.BoolType,
	"prometheus":    types.BoolType,
}

// tfoPublicAccess Allow access to selected service ports from the public Internet
type tfoPublicAccess struct {
	KafkaConnect types.Bool `tfsdk:"kafka_connect"`
	Prometheus   types.Bool `tfsdk:"prometheus"`
}

// dtoPublicAccess request/response object
type dtoPublicAccess struct {
	KafkaConnect *bool `groups:"create,update" json:"kafka_connect,omitempty"`
	Prometheus   *bool `groups:"create,update" json:"prometheus,omitempty"`
}

// expandPublicAccess expands tf object into dto object
func expandPublicAccess(ctx context.Context, diags diag.Diagnostics, o *tfoPublicAccess) *dtoPublicAccess {
	return &dtoPublicAccess{
		KafkaConnect: schemautil.ValueBoolPointer(o.KafkaConnect),
		Prometheus:   schemautil.ValueBoolPointer(o.Prometheus),
	}
}

// flattenPublicAccess flattens dto object into tf object
func flattenPublicAccess(ctx context.Context, diags diag.Diagnostics, o *dtoPublicAccess) *tfoPublicAccess {
	return &tfoPublicAccess{
		KafkaConnect: types.BoolPointerValue(o.KafkaConnect),
		Prometheus:   types.BoolPointerValue(o.Prometheus),
	}
}

var publicAccessAttrs = map[string]attr.Type{
	"kafka_connect": types.BoolType,
	"prometheus":    types.BoolType,
}

// Expand public function that converts tf object into dto
func Expand(ctx context.Context, diags diag.Diagnostics, set types.Set) *dtoUserConfig {
	return schemautil.ExpandSetBlockNested[tfoUserConfig, dtoUserConfig](ctx, diags, expandUserConfig, set)
}

// Flatten public function that converts dto into tf object
func Flatten(ctx context.Context, diags diag.Diagnostics, m map[string]any) types.Set {
	o := new(dtoUserConfig)
	err := schemautil.MapToDTO(m, o)
	if err != nil {
		diags.AddError("Failed to marshal map user config to dto", err.Error())
		return types.SetNull(types.ObjectType{AttrTypes: userConfigAttrs})
	}
	return schemautil.FlattenSetBlockNested[dtoUserConfig, tfoUserConfig](ctx, diags, flattenUserConfig, o, userConfigAttrs)
}
