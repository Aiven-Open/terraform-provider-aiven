// Code generated by user config generator. DO NOT EDIT.

package mysql

import (
	"context"
	"encoding/json"
	"testing"

	"github.com/google/go-cmp/cmp"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/stretchr/testify/require"

	"github.com/aiven/terraform-provider-aiven/internal/schemautil"
)

const allFields = `{
    "additional_backup_regions": [
        "foo"
    ],
    "admin_password": "foo",
    "admin_username": "foo",
    "backup_hour": 1,
    "backup_minute": 1,
    "binlog_retention_period": 1,
    "ip_filter": [
        {
            "description": "foo",
            "network": "foo"
        }
    ],
    "migration": {
        "dbname": "foo",
        "host": "foo",
        "ignore_dbs": "foo",
        "method": "foo",
        "password": "foo",
        "port": 1,
        "ssl": true,
        "username": "foo"
    },
    "mysql": {
        "connect_timeout": 1,
        "default_time_zone": "foo",
        "group_concat_max_len": 1,
        "information_schema_stats_expiry": 1,
        "innodb_change_buffer_max_size": 1,
        "innodb_flush_neighbors": 1,
        "innodb_ft_min_token_size": 1,
        "innodb_ft_server_stopword_table": "foo",
        "innodb_lock_wait_timeout": 1,
        "innodb_log_buffer_size": 1,
        "innodb_online_alter_log_max_size": 1,
        "innodb_print_all_deadlocks": true,
        "innodb_read_io_threads": 1,
        "innodb_rollback_on_timeout": true,
        "innodb_thread_concurrency": 1,
        "innodb_write_io_threads": 1,
        "interactive_timeout": 1,
        "internal_tmp_mem_storage_engine": "foo",
        "long_query_time": 1,
        "max_allowed_packet": 1,
        "max_heap_table_size": 1,
        "net_buffer_length": 1,
        "net_read_timeout": 1,
        "net_write_timeout": 1,
        "slow_query_log": true,
        "sort_buffer_size": 1,
        "sql_mode": "foo",
        "sql_require_primary_key": true,
        "tmp_table_size": 1,
        "wait_timeout": 1
    },
    "mysql_version": "foo",
    "private_access": {
        "mysql": true,
        "mysqlx": true,
        "prometheus": true
    },
    "privatelink_access": {
        "mysql": true,
        "mysqlx": true,
        "prometheus": true
    },
    "project_to_fork_from": "foo",
    "public_access": {
        "mysql": true,
        "mysqlx": true,
        "prometheus": true
    },
    "recovery_target_time": "foo",
    "service_to_fork_from": "foo",
    "static_ips": true
}`
const updateOnlyFields = `{
    "additional_backup_regions": [
        "foo"
    ],
    "backup_hour": 1,
    "backup_minute": 1,
    "binlog_retention_period": 1,
    "ip_filter": [
        {
            "description": "foo",
            "network": "foo"
        }
    ],
    "migration": {
        "dbname": "foo",
        "host": "foo",
        "ignore_dbs": "foo",
        "method": "foo",
        "password": "foo",
        "port": 1,
        "ssl": true,
        "username": "foo"
    },
    "mysql": {
        "connect_timeout": 1,
        "default_time_zone": "foo",
        "group_concat_max_len": 1,
        "information_schema_stats_expiry": 1,
        "innodb_change_buffer_max_size": 1,
        "innodb_flush_neighbors": 1,
        "innodb_ft_min_token_size": 1,
        "innodb_ft_server_stopword_table": "foo",
        "innodb_lock_wait_timeout": 1,
        "innodb_log_buffer_size": 1,
        "innodb_online_alter_log_max_size": 1,
        "innodb_print_all_deadlocks": true,
        "innodb_read_io_threads": 1,
        "innodb_rollback_on_timeout": true,
        "innodb_thread_concurrency": 1,
        "innodb_write_io_threads": 1,
        "interactive_timeout": 1,
        "internal_tmp_mem_storage_engine": "foo",
        "long_query_time": 1,
        "max_allowed_packet": 1,
        "max_heap_table_size": 1,
        "net_buffer_length": 1,
        "net_read_timeout": 1,
        "net_write_timeout": 1,
        "slow_query_log": true,
        "sort_buffer_size": 1,
        "sql_mode": "foo",
        "sql_require_primary_key": true,
        "tmp_table_size": 1,
        "wait_timeout": 1
    },
    "mysql_version": "foo",
    "private_access": {
        "mysql": true,
        "mysqlx": true,
        "prometheus": true
    },
    "privatelink_access": {
        "mysql": true,
        "mysqlx": true,
        "prometheus": true
    },
    "public_access": {
        "mysql": true,
        "mysqlx": true,
        "prometheus": true
    },
    "static_ips": true
}`

func TestUserConfig(t *testing.T) {
	cases := []struct {
		name   string
		source string
		expect string
		create bool
	}{
		{
			name:   "fields to create resource",
			source: allFields,
			expect: allFields,
			create: true,
		},
		{
			name:   "only fields to update resource",
			source: allFields,
			expect: updateOnlyFields, // usually, fewer fields
			create: false,
		},
	}

	ctx := context.Background()
	diags := make(diag.Diagnostics, 0)
	for _, opt := range cases {
		t.Run(opt.name, func(t *testing.T) {
			dto := new(dtoUserConfig)
			err := json.Unmarshal([]byte(opt.source), dto)
			require.NoError(t, err)

			// From json to TF
			tfo := flattenUserConfig(ctx, diags, dto)
			require.Empty(t, diags)

			// From TF to json
			config := expandUserConfig(ctx, diags, tfo)
			require.Empty(t, diags)

			// Run specific marshal (create or update resource)
			dtoConfig, err := schemautil.MarshalUserConfig(config, opt.create)
			require.NoError(t, err)

			// Compares that output is strictly equal to the input
			// If so, the flow is valid
			b, err := json.MarshalIndent(dtoConfig, "", "    ")
			require.NoError(t, err)
			require.Empty(t, cmp.Diff(opt.expect, string(b)))
		})
	}
}
