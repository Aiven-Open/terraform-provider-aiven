// Code generated by user config generator. DO NOT EDIT.

package redis

import (
	"context"
	"encoding/json"

	setvalidator "github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	attr "github.com/hashicorp/terraform-plugin-framework/attr"
	datasource "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	diag "github.com/hashicorp/terraform-plugin-framework/diag"
	resource "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	booldefault "github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	int64default "github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	stringdefault "github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	validator "github.com/hashicorp/terraform-plugin-framework/schema/validator"
	types "github.com/hashicorp/terraform-plugin-framework/types"

	schemautil "github.com/aiven/terraform-provider-aiven/internal/schemautil"
)

// NewResourceSchema returns resource schema
func NewResourceSchema() resource.SetNestedBlock {
	return resource.SetNestedBlock{
		Description: "Redis user configurable settings",
		NestedObject: resource.NestedBlockObject{
			Attributes: map[string]resource.Attribute{
				"additional_backup_regions": resource.SetAttribute{
					Computed:    true,
					Description: "Additional Cloud Regions for Backup Replication.",
					ElementType: types.StringType,
					Optional:    true,
					Validators:  []validator.Set{setvalidator.SizeAtMost(1)},
				},
				"project_to_fork_from": resource.StringAttribute{
					Computed:    true,
					Description: "Name of another project to fork a service from. This has effect only when a new service is being created.",
					Optional:    true,
				},
				"recovery_basebackup_name": resource.StringAttribute{
					Computed:    true,
					Description: "Name of the basebackup to restore in forked service.",
					Optional:    true,
				},
				"redis_acl_channels_default": resource.StringAttribute{
					Computed:    true,
					Description: "Determines default pub/sub channels' ACL for new users if ACL is not supplied. When this option is not defined, all_channels is assumed to keep backward compatibility. This option doesn't affect Redis configuration acl-pubsub-default.",
					Optional:    true,
				},
				"redis_io_threads": resource.Int64Attribute{
					Computed:    true,
					Description: "Set Redis IO thread count. Changing this will cause a restart of the Redis service.",
					Optional:    true,
				},
				"redis_lfu_decay_time": resource.Int64Attribute{
					Computed:    true,
					Default:     int64default.StaticInt64(1),
					Description: "LFU maxmemory-policy counter decay time in minutes. The default value is `1`.",
					Optional:    true,
				},
				"redis_lfu_log_factor": resource.Int64Attribute{
					Computed:    true,
					Default:     int64default.StaticInt64(10),
					Description: "Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies. The default value is `10`.",
					Optional:    true,
				},
				"redis_maxmemory_policy": resource.StringAttribute{
					Computed:    true,
					Default:     stringdefault.StaticString("noeviction"),
					Description: "Redis maxmemory-policy. The default value is `noeviction`.",
					Optional:    true,
				},
				"redis_notify_keyspace_events": resource.StringAttribute{
					Computed:    true,
					Default:     stringdefault.StaticString(""),
					Description: "Set notify-keyspace-events option. The default value is ``.",
					Optional:    true,
				},
				"redis_number_of_databases": resource.Int64Attribute{
					Computed:    true,
					Description: "Set number of Redis databases. Changing this will cause a restart of the Redis service.",
					Optional:    true,
				},
				"redis_persistence": resource.StringAttribute{
					Computed:    true,
					Description: "When persistence is 'rdb', Redis does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is 'off', no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can't be forked.",
					Optional:    true,
				},
				"redis_pubsub_client_output_buffer_limit": resource.Int64Attribute{
					Computed:    true,
					Description: "Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.",
					Optional:    true,
				},
				"redis_ssl": resource.BoolAttribute{
					Computed:    true,
					Default:     booldefault.StaticBool(true),
					Description: "Require SSL to access Redis. The default value is `true`.",
					Optional:    true,
				},
				"redis_timeout": resource.Int64Attribute{
					Computed:    true,
					Default:     int64default.StaticInt64(300),
					Description: "Redis idle connection timeout in seconds. The default value is `300`.",
					Optional:    true,
				},
				"service_to_fork_from": resource.StringAttribute{
					Computed:    true,
					Description: "Name of another service to fork from. This has effect only when a new service is being created.",
					Optional:    true,
				},
				"static_ips": resource.BoolAttribute{
					Computed:    true,
					Description: "Use static public IP addresses.",
					Optional:    true,
				},
			},
			Blocks: map[string]resource.Block{
				"ip_filter": resource.SetNestedBlock{
					Description: "Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'",
					NestedObject: resource.NestedBlockObject{Attributes: map[string]resource.Attribute{
						"description": resource.StringAttribute{
							Computed:    true,
							Description: "Description for IP filter list entry.",
							Optional:    true,
						},
						"network": resource.StringAttribute{
							Description: "CIDR address block.",
							Required:    true,
						},
					}},
					Validators: []validator.Set{setvalidator.SizeAtMost(1024)},
				},
				"migration": resource.SetNestedBlock{
					Description: "Migrate data from existing server",
					NestedObject: resource.NestedBlockObject{Attributes: map[string]resource.Attribute{
						"dbname": resource.StringAttribute{
							Computed:    true,
							Description: "Database name for bootstrapping the initial connection.",
							Optional:    true,
						},
						"host": resource.StringAttribute{
							Description: "Hostname or IP address of the server where to migrate data from.",
							Required:    true,
						},
						"ignore_dbs": resource.StringAttribute{
							Computed:    true,
							Description: "Comma-separated list of databases, which should be ignored during migration (supported by MySQL and PostgreSQL only at the moment).",
							Optional:    true,
						},
						"method": resource.StringAttribute{
							Computed:    true,
							Description: "The migration method to be used (currently supported only by Redis, MySQL and PostgreSQL service types).",
							Optional:    true,
						},
						"password": resource.StringAttribute{
							Computed:    true,
							Description: "Password for authentication with the server where to migrate data from.",
							Optional:    true,
						},
						"port": resource.Int64Attribute{
							Description: "Port number of the server where to migrate data from.",
							Required:    true,
						},
						"ssl": resource.BoolAttribute{
							Computed:    true,
							Default:     booldefault.StaticBool(true),
							Description: "The server where to migrate data from is secured with SSL. The default value is `true`.",
							Optional:    true,
						},
						"username": resource.StringAttribute{
							Computed:    true,
							Description: "User name for authentication with the server where to migrate data from.",
							Optional:    true,
						},
					}},
				},
				"private_access": resource.SetNestedBlock{
					Description: "Allow access to selected service ports from private networks",
					NestedObject: resource.NestedBlockObject{Attributes: map[string]resource.Attribute{
						"prometheus": resource.BoolAttribute{
							Computed:    true,
							Description: "Allow clients to connect to prometheus with a DNS name that always resolves to the service's private IP addresses. Only available in certain network locations.",
							Optional:    true,
						},
						"redis": resource.BoolAttribute{
							Computed:    true,
							Description: "Allow clients to connect to redis with a DNS name that always resolves to the service's private IP addresses. Only available in certain network locations.",
							Optional:    true,
						},
					}},
				},
				"privatelink_access": resource.SetNestedBlock{
					Description: "Allow access to selected service components through Privatelink",
					NestedObject: resource.NestedBlockObject{Attributes: map[string]resource.Attribute{
						"prometheus": resource.BoolAttribute{
							Computed:    true,
							Description: "Enable prometheus.",
							Optional:    true,
						},
						"redis": resource.BoolAttribute{
							Computed:    true,
							Description: "Enable redis.",
							Optional:    true,
						},
					}},
				},
				"public_access": resource.SetNestedBlock{
					Description: "Allow access to selected service ports from the public Internet",
					NestedObject: resource.NestedBlockObject{Attributes: map[string]resource.Attribute{
						"prometheus": resource.BoolAttribute{
							Computed:    true,
							Description: "Allow clients to connect to prometheus from the public internet for service nodes that are in a project VPC or another type of private network.",
							Optional:    true,
						},
						"redis": resource.BoolAttribute{
							Computed:    true,
							Description: "Allow clients to connect to redis from the public internet for service nodes that are in a project VPC or another type of private network.",
							Optional:    true,
						},
					}},
				},
			},
		},
		Validators: []validator.Set{setvalidator.SizeAtMost(1)},
	}
}

// NewDataSourceSchema returns datasource schema
func NewDataSourceSchema() datasource.SetNestedBlock {
	return datasource.SetNestedBlock{
		Description: "Redis user configurable settings",
		NestedObject: datasource.NestedBlockObject{
			Attributes: map[string]datasource.Attribute{
				"additional_backup_regions": datasource.SetAttribute{
					Computed:    true,
					Description: "Additional Cloud Regions for Backup Replication.",
					ElementType: types.StringType,
					Validators:  []validator.Set{setvalidator.SizeAtMost(1)},
				},
				"project_to_fork_from": datasource.StringAttribute{
					Computed:    true,
					Description: "Name of another project to fork a service from. This has effect only when a new service is being created.",
				},
				"recovery_basebackup_name": datasource.StringAttribute{
					Computed:    true,
					Description: "Name of the basebackup to restore in forked service.",
				},
				"redis_acl_channels_default": datasource.StringAttribute{
					Computed:    true,
					Description: "Determines default pub/sub channels' ACL for new users if ACL is not supplied. When this option is not defined, all_channels is assumed to keep backward compatibility. This option doesn't affect Redis configuration acl-pubsub-default.",
				},
				"redis_io_threads": datasource.Int64Attribute{
					Computed:    true,
					Description: "Set Redis IO thread count. Changing this will cause a restart of the Redis service.",
				},
				"redis_lfu_decay_time": datasource.Int64Attribute{
					Computed:    true,
					Description: "LFU maxmemory-policy counter decay time in minutes. The default value is `1`.",
				},
				"redis_lfu_log_factor": datasource.Int64Attribute{
					Computed:    true,
					Description: "Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies. The default value is `10`.",
				},
				"redis_maxmemory_policy": datasource.StringAttribute{
					Computed:    true,
					Description: "Redis maxmemory-policy. The default value is `noeviction`.",
				},
				"redis_notify_keyspace_events": datasource.StringAttribute{
					Computed:    true,
					Description: "Set notify-keyspace-events option. The default value is ``.",
				},
				"redis_number_of_databases": datasource.Int64Attribute{
					Computed:    true,
					Description: "Set number of Redis databases. Changing this will cause a restart of the Redis service.",
				},
				"redis_persistence": datasource.StringAttribute{
					Computed:    true,
					Description: "When persistence is 'rdb', Redis does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is 'off', no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can't be forked.",
				},
				"redis_pubsub_client_output_buffer_limit": datasource.Int64Attribute{
					Computed:    true,
					Description: "Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.",
				},
				"redis_ssl": datasource.BoolAttribute{
					Computed:    true,
					Description: "Require SSL to access Redis. The default value is `true`.",
				},
				"redis_timeout": datasource.Int64Attribute{
					Computed:    true,
					Description: "Redis idle connection timeout in seconds. The default value is `300`.",
				},
				"service_to_fork_from": datasource.StringAttribute{
					Computed:    true,
					Description: "Name of another service to fork from. This has effect only when a new service is being created.",
				},
				"static_ips": datasource.BoolAttribute{
					Computed:    true,
					Description: "Use static public IP addresses.",
				},
			},
			Blocks: map[string]datasource.Block{
				"ip_filter": datasource.SetNestedBlock{
					Description: "Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'",
					NestedObject: datasource.NestedBlockObject{Attributes: map[string]datasource.Attribute{
						"description": datasource.StringAttribute{
							Computed:    true,
							Description: "Description for IP filter list entry.",
						},
						"network": datasource.StringAttribute{
							Computed:    true,
							Description: "CIDR address block.",
						},
					}},
					Validators: []validator.Set{setvalidator.SizeAtMost(1024)},
				},
				"migration": datasource.SetNestedBlock{
					Description: "Migrate data from existing server",
					NestedObject: datasource.NestedBlockObject{Attributes: map[string]datasource.Attribute{
						"dbname": datasource.StringAttribute{
							Computed:    true,
							Description: "Database name for bootstrapping the initial connection.",
						},
						"host": datasource.StringAttribute{
							Computed:    true,
							Description: "Hostname or IP address of the server where to migrate data from.",
						},
						"ignore_dbs": datasource.StringAttribute{
							Computed:    true,
							Description: "Comma-separated list of databases, which should be ignored during migration (supported by MySQL and PostgreSQL only at the moment).",
						},
						"method": datasource.StringAttribute{
							Computed:    true,
							Description: "The migration method to be used (currently supported only by Redis, MySQL and PostgreSQL service types).",
						},
						"password": datasource.StringAttribute{
							Computed:    true,
							Description: "Password for authentication with the server where to migrate data from.",
						},
						"port": datasource.Int64Attribute{
							Computed:    true,
							Description: "Port number of the server where to migrate data from.",
						},
						"ssl": datasource.BoolAttribute{
							Computed:    true,
							Description: "The server where to migrate data from is secured with SSL. The default value is `true`.",
						},
						"username": datasource.StringAttribute{
							Computed:    true,
							Description: "User name for authentication with the server where to migrate data from.",
						},
					}},
				},
				"private_access": datasource.SetNestedBlock{
					Description: "Allow access to selected service ports from private networks",
					NestedObject: datasource.NestedBlockObject{Attributes: map[string]datasource.Attribute{
						"prometheus": datasource.BoolAttribute{
							Computed:    true,
							Description: "Allow clients to connect to prometheus with a DNS name that always resolves to the service's private IP addresses. Only available in certain network locations.",
						},
						"redis": datasource.BoolAttribute{
							Computed:    true,
							Description: "Allow clients to connect to redis with a DNS name that always resolves to the service's private IP addresses. Only available in certain network locations.",
						},
					}},
				},
				"privatelink_access": datasource.SetNestedBlock{
					Description: "Allow access to selected service components through Privatelink",
					NestedObject: datasource.NestedBlockObject{Attributes: map[string]datasource.Attribute{
						"prometheus": datasource.BoolAttribute{
							Computed:    true,
							Description: "Enable prometheus.",
						},
						"redis": datasource.BoolAttribute{
							Computed:    true,
							Description: "Enable redis.",
						},
					}},
				},
				"public_access": datasource.SetNestedBlock{
					Description: "Allow access to selected service ports from the public Internet",
					NestedObject: datasource.NestedBlockObject{Attributes: map[string]datasource.Attribute{
						"prometheus": datasource.BoolAttribute{
							Computed:    true,
							Description: "Allow clients to connect to prometheus from the public internet for service nodes that are in a project VPC or another type of private network.",
						},
						"redis": datasource.BoolAttribute{
							Computed:    true,
							Description: "Allow clients to connect to redis from the public internet for service nodes that are in a project VPC or another type of private network.",
						},
					}},
				},
			},
		},
		Validators: []validator.Set{setvalidator.SizeAtMost(1)},
	}
}

// tfoUserConfig Redis user configurable settings
type tfoUserConfig struct {
	AdditionalBackupRegions            types.Set    `tfsdk:"additional_backup_regions"`
	IpFilter                           types.Set    `tfsdk:"ip_filter"`
	Migration                          types.Set    `tfsdk:"migration"`
	PrivateAccess                      types.Set    `tfsdk:"private_access"`
	PrivatelinkAccess                  types.Set    `tfsdk:"privatelink_access"`
	ProjectToForkFrom                  types.String `tfsdk:"project_to_fork_from"`
	PublicAccess                       types.Set    `tfsdk:"public_access"`
	RecoveryBasebackupName             types.String `tfsdk:"recovery_basebackup_name"`
	RedisAclChannelsDefault            types.String `tfsdk:"redis_acl_channels_default"`
	RedisIoThreads                     types.Int64  `tfsdk:"redis_io_threads"`
	RedisLfuDecayTime                  types.Int64  `tfsdk:"redis_lfu_decay_time"`
	RedisLfuLogFactor                  types.Int64  `tfsdk:"redis_lfu_log_factor"`
	RedisMaxmemoryPolicy               types.String `tfsdk:"redis_maxmemory_policy"`
	RedisNotifyKeyspaceEvents          types.String `tfsdk:"redis_notify_keyspace_events"`
	RedisNumberOfDatabases             types.Int64  `tfsdk:"redis_number_of_databases"`
	RedisPersistence                   types.String `tfsdk:"redis_persistence"`
	RedisPubsubClientOutputBufferLimit types.Int64  `tfsdk:"redis_pubsub_client_output_buffer_limit"`
	RedisSsl                           types.Bool   `tfsdk:"redis_ssl"`
	RedisTimeout                       types.Int64  `tfsdk:"redis_timeout"`
	ServiceToForkFrom                  types.String `tfsdk:"service_to_fork_from"`
	StaticIps                          types.Bool   `tfsdk:"static_ips"`
}

// dtoUserConfig request/response object
type dtoUserConfig struct {
	AdditionalBackupRegions            []string              `groups:"create,update" json:"additional_backup_regions,omitempty"`
	IpFilter                           []*dtoIpFilter        `groups:"create,update" json:"ip_filter,omitempty"`
	Migration                          *dtoMigration         `groups:"create,update" json:"migration,omitempty"`
	PrivateAccess                      *dtoPrivateAccess     `groups:"create,update" json:"private_access,omitempty"`
	PrivatelinkAccess                  *dtoPrivatelinkAccess `groups:"create,update" json:"privatelink_access,omitempty"`
	ProjectToForkFrom                  *string               `groups:"create" json:"project_to_fork_from,omitempty"`
	PublicAccess                       *dtoPublicAccess      `groups:"create,update" json:"public_access,omitempty"`
	RecoveryBasebackupName             *string               `groups:"create,update" json:"recovery_basebackup_name,omitempty"`
	RedisAclChannelsDefault            *string               `groups:"create,update" json:"redis_acl_channels_default,omitempty"`
	RedisIoThreads                     *int64                `groups:"create,update" json:"redis_io_threads,omitempty"`
	RedisLfuDecayTime                  *int64                `groups:"create,update" json:"redis_lfu_decay_time,omitempty"`
	RedisLfuLogFactor                  *int64                `groups:"create,update" json:"redis_lfu_log_factor,omitempty"`
	RedisMaxmemoryPolicy               *string               `groups:"create,update" json:"redis_maxmemory_policy,omitempty"`
	RedisNotifyKeyspaceEvents          *string               `groups:"create,update" json:"redis_notify_keyspace_events,omitempty"`
	RedisNumberOfDatabases             *int64                `groups:"create,update" json:"redis_number_of_databases,omitempty"`
	RedisPersistence                   *string               `groups:"create,update" json:"redis_persistence,omitempty"`
	RedisPubsubClientOutputBufferLimit *int64                `groups:"create,update" json:"redis_pubsub_client_output_buffer_limit,omitempty"`
	RedisSsl                           *bool                 `groups:"create,update" json:"redis_ssl,omitempty"`
	RedisTimeout                       *int64                `groups:"create,update" json:"redis_timeout,omitempty"`
	ServiceToForkFrom                  *string               `groups:"create" json:"service_to_fork_from,omitempty"`
	StaticIps                          *bool                 `groups:"create,update" json:"static_ips,omitempty"`
}

// expandUserConfig expands tf object into dto object
func expandUserConfig(ctx context.Context, diags diag.Diagnostics, o *tfoUserConfig) *dtoUserConfig {
	additionalBackupRegionsVar := schemautil.ExpandSet[string](ctx, diags, o.AdditionalBackupRegions)
	if diags.HasError() {
		return nil
	}
	ipFilterVar := schemautil.ExpandSetNested(ctx, diags, expandIpFilter, o.IpFilter)
	if diags.HasError() {
		return nil
	}
	migrationVar := schemautil.ExpandSetBlockNested(ctx, diags, expandMigration, o.Migration)
	if diags.HasError() {
		return nil
	}
	privateAccessVar := schemautil.ExpandSetBlockNested(ctx, diags, expandPrivateAccess, o.PrivateAccess)
	if diags.HasError() {
		return nil
	}
	privatelinkAccessVar := schemautil.ExpandSetBlockNested(ctx, diags, expandPrivatelinkAccess, o.PrivatelinkAccess)
	if diags.HasError() {
		return nil
	}
	publicAccessVar := schemautil.ExpandSetBlockNested(ctx, diags, expandPublicAccess, o.PublicAccess)
	if diags.HasError() {
		return nil
	}
	return &dtoUserConfig{
		AdditionalBackupRegions:            additionalBackupRegionsVar,
		IpFilter:                           ipFilterVar,
		Migration:                          migrationVar,
		PrivateAccess:                      privateAccessVar,
		PrivatelinkAccess:                  privatelinkAccessVar,
		ProjectToForkFrom:                  schemautil.ValueStringPointer(o.ProjectToForkFrom),
		PublicAccess:                       publicAccessVar,
		RecoveryBasebackupName:             schemautil.ValueStringPointer(o.RecoveryBasebackupName),
		RedisAclChannelsDefault:            schemautil.ValueStringPointer(o.RedisAclChannelsDefault),
		RedisIoThreads:                     schemautil.ValueInt64Pointer(o.RedisIoThreads),
		RedisLfuDecayTime:                  schemautil.ValueInt64Pointer(o.RedisLfuDecayTime),
		RedisLfuLogFactor:                  schemautil.ValueInt64Pointer(o.RedisLfuLogFactor),
		RedisMaxmemoryPolicy:               schemautil.ValueStringPointer(o.RedisMaxmemoryPolicy),
		RedisNotifyKeyspaceEvents:          schemautil.ValueStringPointer(o.RedisNotifyKeyspaceEvents),
		RedisNumberOfDatabases:             schemautil.ValueInt64Pointer(o.RedisNumberOfDatabases),
		RedisPersistence:                   schemautil.ValueStringPointer(o.RedisPersistence),
		RedisPubsubClientOutputBufferLimit: schemautil.ValueInt64Pointer(o.RedisPubsubClientOutputBufferLimit),
		RedisSsl:                           schemautil.ValueBoolPointer(o.RedisSsl),
		RedisTimeout:                       schemautil.ValueInt64Pointer(o.RedisTimeout),
		ServiceToForkFrom:                  schemautil.ValueStringPointer(o.ServiceToForkFrom),
		StaticIps:                          schemautil.ValueBoolPointer(o.StaticIps),
	}
}

// flattenUserConfig flattens dto object into tf object
func flattenUserConfig(ctx context.Context, diags diag.Diagnostics, o *dtoUserConfig) *tfoUserConfig {
	additionalBackupRegionsVar, d := types.SetValueFrom(ctx, types.StringType, o.AdditionalBackupRegions)
	diags.Append(d...)
	if diags.HasError() {
		return nil
	}
	ipFilterVar := schemautil.FlattenSetNested(ctx, diags, flattenIpFilter, o.IpFilter, ipFilterAttrs)
	if diags.HasError() {
		return nil
	}
	migrationVar := schemautil.FlattenSetBlockNested(ctx, diags, flattenMigration, o.Migration, migrationAttrs)
	if diags.HasError() {
		return nil
	}
	privateAccessVar := schemautil.FlattenSetBlockNested(ctx, diags, flattenPrivateAccess, o.PrivateAccess, privateAccessAttrs)
	if diags.HasError() {
		return nil
	}
	privatelinkAccessVar := schemautil.FlattenSetBlockNested(ctx, diags, flattenPrivatelinkAccess, o.PrivatelinkAccess, privatelinkAccessAttrs)
	if diags.HasError() {
		return nil
	}
	publicAccessVar := schemautil.FlattenSetBlockNested(ctx, diags, flattenPublicAccess, o.PublicAccess, publicAccessAttrs)
	if diags.HasError() {
		return nil
	}
	return &tfoUserConfig{
		AdditionalBackupRegions:            additionalBackupRegionsVar,
		IpFilter:                           ipFilterVar,
		Migration:                          migrationVar,
		PrivateAccess:                      privateAccessVar,
		PrivatelinkAccess:                  privatelinkAccessVar,
		ProjectToForkFrom:                  types.StringPointerValue(o.ProjectToForkFrom),
		PublicAccess:                       publicAccessVar,
		RecoveryBasebackupName:             types.StringPointerValue(o.RecoveryBasebackupName),
		RedisAclChannelsDefault:            types.StringPointerValue(o.RedisAclChannelsDefault),
		RedisIoThreads:                     types.Int64PointerValue(o.RedisIoThreads),
		RedisLfuDecayTime:                  types.Int64PointerValue(o.RedisLfuDecayTime),
		RedisLfuLogFactor:                  types.Int64PointerValue(o.RedisLfuLogFactor),
		RedisMaxmemoryPolicy:               types.StringPointerValue(o.RedisMaxmemoryPolicy),
		RedisNotifyKeyspaceEvents:          types.StringPointerValue(o.RedisNotifyKeyspaceEvents),
		RedisNumberOfDatabases:             types.Int64PointerValue(o.RedisNumberOfDatabases),
		RedisPersistence:                   types.StringPointerValue(o.RedisPersistence),
		RedisPubsubClientOutputBufferLimit: types.Int64PointerValue(o.RedisPubsubClientOutputBufferLimit),
		RedisSsl:                           types.BoolPointerValue(o.RedisSsl),
		RedisTimeout:                       types.Int64PointerValue(o.RedisTimeout),
		ServiceToForkFrom:                  types.StringPointerValue(o.ServiceToForkFrom),
		StaticIps:                          types.BoolPointerValue(o.StaticIps),
	}
}

var userConfigAttrs = map[string]attr.Type{
	"additional_backup_regions":               types.SetType{ElemType: types.StringType},
	"ip_filter":                               types.SetType{ElemType: types.ObjectType{AttrTypes: ipFilterAttrs}},
	"migration":                               types.SetType{ElemType: types.ObjectType{AttrTypes: migrationAttrs}},
	"private_access":                          types.SetType{ElemType: types.ObjectType{AttrTypes: privateAccessAttrs}},
	"privatelink_access":                      types.SetType{ElemType: types.ObjectType{AttrTypes: privatelinkAccessAttrs}},
	"project_to_fork_from":                    types.StringType,
	"public_access":                           types.SetType{ElemType: types.ObjectType{AttrTypes: publicAccessAttrs}},
	"recovery_basebackup_name":                types.StringType,
	"redis_acl_channels_default":              types.StringType,
	"redis_io_threads":                        types.Int64Type,
	"redis_lfu_decay_time":                    types.Int64Type,
	"redis_lfu_log_factor":                    types.Int64Type,
	"redis_maxmemory_policy":                  types.StringType,
	"redis_notify_keyspace_events":            types.StringType,
	"redis_number_of_databases":               types.Int64Type,
	"redis_persistence":                       types.StringType,
	"redis_pubsub_client_output_buffer_limit": types.Int64Type,
	"redis_ssl":                               types.BoolType,
	"redis_timeout":                           types.Int64Type,
	"service_to_fork_from":                    types.StringType,
	"static_ips":                              types.BoolType,
}

// tfoIpFilter CIDR address block, either as a string, or in a dict with an optional description field
type tfoIpFilter struct {
	Description types.String `tfsdk:"description"`
	Network     types.String `tfsdk:"network"`
}

// dtoIpFilter request/response object
type dtoIpFilter struct {
	Description *string `groups:"create,update" json:"description,omitempty"`
	Network     string  `groups:"create,update" json:"network"`
}

func (d *dtoIpFilter) UnmarshalJSON(data []byte) error {
	var s string
	err := json.Unmarshal(data, &s)
	if err == nil {
		d.Network = s
		return nil
	}

	type obj dtoIpFilter
	o := &struct {
		Description *string `groups:"create,update" json:"description,omitempty"`
		Network     string  `groups:"create,update" json:"network"`
	}{}
	err = json.Unmarshal(data, o)
	if err != nil {
		return err
	}

	d.Description = o.Description
	d.Network = o.Network
	return nil
}

// expandIpFilter expands tf object into dto object
func expandIpFilter(ctx context.Context, diags diag.Diagnostics, o *tfoIpFilter) *dtoIpFilter {
	return &dtoIpFilter{
		Description: schemautil.ValueStringPointer(o.Description),
		Network:     o.Network.ValueString(),
	}
}

// flattenIpFilter flattens dto object into tf object
func flattenIpFilter(ctx context.Context, diags diag.Diagnostics, o *dtoIpFilter) *tfoIpFilter {
	return &tfoIpFilter{
		Description: types.StringPointerValue(o.Description),
		Network:     types.StringValue(o.Network),
	}
}

var ipFilterAttrs = map[string]attr.Type{
	"description": types.StringType,
	"network":     types.StringType,
}

// tfoMigration Migrate data from existing server
type tfoMigration struct {
	Dbname    types.String `tfsdk:"dbname"`
	Host      types.String `tfsdk:"host"`
	IgnoreDbs types.String `tfsdk:"ignore_dbs"`
	Method    types.String `tfsdk:"method"`
	Password  types.String `tfsdk:"password"`
	Port      types.Int64  `tfsdk:"port"`
	Ssl       types.Bool   `tfsdk:"ssl"`
	Username  types.String `tfsdk:"username"`
}

// dtoMigration request/response object
type dtoMigration struct {
	Dbname    *string `groups:"create,update" json:"dbname,omitempty"`
	Host      string  `groups:"create,update" json:"host"`
	IgnoreDbs *string `groups:"create,update" json:"ignore_dbs,omitempty"`
	Method    *string `groups:"create,update" json:"method,omitempty"`
	Password  *string `groups:"create,update" json:"password,omitempty"`
	Port      int64   `groups:"create,update" json:"port"`
	Ssl       *bool   `groups:"create,update" json:"ssl,omitempty"`
	Username  *string `groups:"create,update" json:"username,omitempty"`
}

// expandMigration expands tf object into dto object
func expandMigration(ctx context.Context, diags diag.Diagnostics, o *tfoMigration) *dtoMigration {
	return &dtoMigration{
		Dbname:    schemautil.ValueStringPointer(o.Dbname),
		Host:      o.Host.ValueString(),
		IgnoreDbs: schemautil.ValueStringPointer(o.IgnoreDbs),
		Method:    schemautil.ValueStringPointer(o.Method),
		Password:  schemautil.ValueStringPointer(o.Password),
		Port:      o.Port.ValueInt64(),
		Ssl:       schemautil.ValueBoolPointer(o.Ssl),
		Username:  schemautil.ValueStringPointer(o.Username),
	}
}

// flattenMigration flattens dto object into tf object
func flattenMigration(ctx context.Context, diags diag.Diagnostics, o *dtoMigration) *tfoMigration {
	return &tfoMigration{
		Dbname:    types.StringPointerValue(o.Dbname),
		Host:      types.StringValue(o.Host),
		IgnoreDbs: types.StringPointerValue(o.IgnoreDbs),
		Method:    types.StringPointerValue(o.Method),
		Password:  types.StringPointerValue(o.Password),
		Port:      types.Int64Value(o.Port),
		Ssl:       types.BoolPointerValue(o.Ssl),
		Username:  types.StringPointerValue(o.Username),
	}
}

var migrationAttrs = map[string]attr.Type{
	"dbname":     types.StringType,
	"host":       types.StringType,
	"ignore_dbs": types.StringType,
	"method":     types.StringType,
	"password":   types.StringType,
	"port":       types.Int64Type,
	"ssl":        types.BoolType,
	"username":   types.StringType,
}

// tfoPrivateAccess Allow access to selected service ports from private networks
type tfoPrivateAccess struct {
	Prometheus types.Bool `tfsdk:"prometheus"`
	Redis      types.Bool `tfsdk:"redis"`
}

// dtoPrivateAccess request/response object
type dtoPrivateAccess struct {
	Prometheus *bool `groups:"create,update" json:"prometheus,omitempty"`
	Redis      *bool `groups:"create,update" json:"redis,omitempty"`
}

// expandPrivateAccess expands tf object into dto object
func expandPrivateAccess(ctx context.Context, diags diag.Diagnostics, o *tfoPrivateAccess) *dtoPrivateAccess {
	return &dtoPrivateAccess{
		Prometheus: schemautil.ValueBoolPointer(o.Prometheus),
		Redis:      schemautil.ValueBoolPointer(o.Redis),
	}
}

// flattenPrivateAccess flattens dto object into tf object
func flattenPrivateAccess(ctx context.Context, diags diag.Diagnostics, o *dtoPrivateAccess) *tfoPrivateAccess {
	return &tfoPrivateAccess{
		Prometheus: types.BoolPointerValue(o.Prometheus),
		Redis:      types.BoolPointerValue(o.Redis),
	}
}

var privateAccessAttrs = map[string]attr.Type{
	"prometheus": types.BoolType,
	"redis":      types.BoolType,
}

// tfoPrivatelinkAccess Allow access to selected service components through Privatelink
type tfoPrivatelinkAccess struct {
	Prometheus types.Bool `tfsdk:"prometheus"`
	Redis      types.Bool `tfsdk:"redis"`
}

// dtoPrivatelinkAccess request/response object
type dtoPrivatelinkAccess struct {
	Prometheus *bool `groups:"create,update" json:"prometheus,omitempty"`
	Redis      *bool `groups:"create,update" json:"redis,omitempty"`
}

// expandPrivatelinkAccess expands tf object into dto object
func expandPrivatelinkAccess(ctx context.Context, diags diag.Diagnostics, o *tfoPrivatelinkAccess) *dtoPrivatelinkAccess {
	return &dtoPrivatelinkAccess{
		Prometheus: schemautil.ValueBoolPointer(o.Prometheus),
		Redis:      schemautil.ValueBoolPointer(o.Redis),
	}
}

// flattenPrivatelinkAccess flattens dto object into tf object
func flattenPrivatelinkAccess(ctx context.Context, diags diag.Diagnostics, o *dtoPrivatelinkAccess) *tfoPrivatelinkAccess {
	return &tfoPrivatelinkAccess{
		Prometheus: types.BoolPointerValue(o.Prometheus),
		Redis:      types.BoolPointerValue(o.Redis),
	}
}

var privatelinkAccessAttrs = map[string]attr.Type{
	"prometheus": types.BoolType,
	"redis":      types.BoolType,
}

// tfoPublicAccess Allow access to selected service ports from the public Internet
type tfoPublicAccess struct {
	Prometheus types.Bool `tfsdk:"prometheus"`
	Redis      types.Bool `tfsdk:"redis"`
}

// dtoPublicAccess request/response object
type dtoPublicAccess struct {
	Prometheus *bool `groups:"create,update" json:"prometheus,omitempty"`
	Redis      *bool `groups:"create,update" json:"redis,omitempty"`
}

// expandPublicAccess expands tf object into dto object
func expandPublicAccess(ctx context.Context, diags diag.Diagnostics, o *tfoPublicAccess) *dtoPublicAccess {
	return &dtoPublicAccess{
		Prometheus: schemautil.ValueBoolPointer(o.Prometheus),
		Redis:      schemautil.ValueBoolPointer(o.Redis),
	}
}

// flattenPublicAccess flattens dto object into tf object
func flattenPublicAccess(ctx context.Context, diags diag.Diagnostics, o *dtoPublicAccess) *tfoPublicAccess {
	return &tfoPublicAccess{
		Prometheus: types.BoolPointerValue(o.Prometheus),
		Redis:      types.BoolPointerValue(o.Redis),
	}
}

var publicAccessAttrs = map[string]attr.Type{
	"prometheus": types.BoolType,
	"redis":      types.BoolType,
}

// Expand public function that converts tf object into dto
func Expand(ctx context.Context, diags diag.Diagnostics, set types.Set) *dtoUserConfig {
	return schemautil.ExpandSetBlockNested[tfoUserConfig, dtoUserConfig](ctx, diags, expandUserConfig, set)
}

// Flatten public function that converts dto into tf object
func Flatten(ctx context.Context, diags diag.Diagnostics, m map[string]any) types.Set {
	o := new(dtoUserConfig)
	err := schemautil.MapToDTO(m, o)
	if err != nil {
		diags.AddError("Failed to marshal map user config to dto", err.Error())
		return types.SetNull(types.ObjectType{AttrTypes: userConfigAttrs})
	}
	return schemautil.FlattenSetBlockNested[dtoUserConfig, tfoUserConfig](ctx, diags, flattenUserConfig, o, userConfigAttrs)
}
