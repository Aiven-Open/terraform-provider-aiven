// Code generated by user config generator. DO NOT EDIT.

package grafana

import (
	"context"
	"encoding/json"
	"testing"

	"github.com/google/go-cmp/cmp"
	"github.com/hashicorp/terraform-plugin-framework/diag"
	"github.com/stretchr/testify/require"

	"github.com/aiven/terraform-provider-aiven/internal/schemautil"
)

const allFields = `{
    "additional_backup_regions": [
        "foo"
    ],
    "alerting_enabled": true,
    "alerting_error_or_timeout": "foo",
    "alerting_max_annotations_to_keep": 1,
    "alerting_nodata_or_nullvalues": "foo",
    "allow_embedding": true,
    "auth_azuread": {
        "allow_sign_up": true,
        "allowed_domains": [
            "foo"
        ],
        "allowed_groups": [
            "foo"
        ],
        "auth_url": "foo",
        "client_id": "foo",
        "client_secret": "foo",
        "token_url": "foo"
    },
    "auth_basic_enabled": true,
    "auth_generic_oauth": {
        "allow_sign_up": true,
        "allowed_domains": [
            "foo"
        ],
        "allowed_organizations": [
            "foo"
        ],
        "api_url": "foo",
        "auth_url": "foo",
        "auto_login": true,
        "client_id": "foo",
        "client_secret": "foo",
        "name": "foo",
        "scopes": [
            "foo"
        ],
        "token_url": "foo"
    },
    "auth_github": {
        "allow_sign_up": true,
        "allowed_organizations": [
            "foo"
        ],
        "client_id": "foo",
        "client_secret": "foo",
        "team_ids": [
            1
        ]
    },
    "auth_gitlab": {
        "allow_sign_up": true,
        "allowed_groups": [
            "foo"
        ],
        "api_url": "foo",
        "auth_url": "foo",
        "client_id": "foo",
        "client_secret": "foo",
        "token_url": "foo"
    },
    "auth_google": {
        "allow_sign_up": true,
        "allowed_domains": [
            "foo"
        ],
        "client_id": "foo",
        "client_secret": "foo"
    },
    "cookie_samesite": "foo",
    "custom_domain": "foo",
    "dashboard_previews_enabled": true,
    "dashboards_min_refresh_interval": "foo",
    "dashboards_versions_to_keep": 1,
    "dataproxy_send_user_header": true,
    "dataproxy_timeout": 1,
    "date_formats": {
        "default_timezone": "foo",
        "full_date": "foo",
        "interval_day": "foo",
        "interval_hour": "foo",
        "interval_minute": "foo",
        "interval_month": "foo",
        "interval_second": "foo",
        "interval_year": "foo"
    },
    "disable_gravatar": true,
    "editors_can_admin": true,
    "external_image_storage": {
        "access_key": "foo",
        "bucket_url": "foo",
        "provider": "foo",
        "secret_key": "foo"
    },
    "google_analytics_ua_id": "foo",
    "ip_filter": [
        {
            "description": "foo",
            "network": "foo"
        }
    ],
    "metrics_enabled": true,
    "oauth_allow_insecure_email_lookup": true,
    "private_access": {
        "grafana": true
    },
    "privatelink_access": {
        "grafana": true
    },
    "project_to_fork_from": "foo",
    "public_access": {
        "grafana": true
    },
    "recovery_basebackup_name": "foo",
    "service_to_fork_from": "foo",
    "smtp_server": {
        "from_address": "foo",
        "from_name": "foo",
        "host": "foo",
        "password": "foo",
        "port": 1,
        "skip_verify": true,
        "starttls_policy": "foo",
        "username": "foo"
    },
    "static_ips": true,
    "unified_alerting_enabled": true,
    "user_auto_assign_org": true,
    "user_auto_assign_org_role": "foo",
    "viewers_can_edit": true
}`
const updateOnlyFields = `{
    "additional_backup_regions": [
        "foo"
    ],
    "alerting_enabled": true,
    "alerting_error_or_timeout": "foo",
    "alerting_max_annotations_to_keep": 1,
    "alerting_nodata_or_nullvalues": "foo",
    "allow_embedding": true,
    "auth_azuread": {
        "allow_sign_up": true,
        "allowed_domains": [
            "foo"
        ],
        "allowed_groups": [
            "foo"
        ],
        "auth_url": "foo",
        "client_id": "foo",
        "client_secret": "foo",
        "token_url": "foo"
    },
    "auth_basic_enabled": true,
    "auth_generic_oauth": {
        "allow_sign_up": true,
        "allowed_domains": [
            "foo"
        ],
        "allowed_organizations": [
            "foo"
        ],
        "api_url": "foo",
        "auth_url": "foo",
        "auto_login": true,
        "client_id": "foo",
        "client_secret": "foo",
        "name": "foo",
        "scopes": [
            "foo"
        ],
        "token_url": "foo"
    },
    "auth_github": {
        "allow_sign_up": true,
        "allowed_organizations": [
            "foo"
        ],
        "client_id": "foo",
        "client_secret": "foo",
        "team_ids": [
            1
        ]
    },
    "auth_gitlab": {
        "allow_sign_up": true,
        "allowed_groups": [
            "foo"
        ],
        "api_url": "foo",
        "auth_url": "foo",
        "client_id": "foo",
        "client_secret": "foo",
        "token_url": "foo"
    },
    "auth_google": {
        "allow_sign_up": true,
        "allowed_domains": [
            "foo"
        ],
        "client_id": "foo",
        "client_secret": "foo"
    },
    "cookie_samesite": "foo",
    "custom_domain": "foo",
    "dashboard_previews_enabled": true,
    "dashboards_min_refresh_interval": "foo",
    "dashboards_versions_to_keep": 1,
    "dataproxy_send_user_header": true,
    "dataproxy_timeout": 1,
    "date_formats": {
        "default_timezone": "foo",
        "full_date": "foo",
        "interval_day": "foo",
        "interval_hour": "foo",
        "interval_minute": "foo",
        "interval_month": "foo",
        "interval_second": "foo",
        "interval_year": "foo"
    },
    "disable_gravatar": true,
    "editors_can_admin": true,
    "external_image_storage": {
        "access_key": "foo",
        "bucket_url": "foo",
        "provider": "foo",
        "secret_key": "foo"
    },
    "google_analytics_ua_id": "foo",
    "ip_filter": [
        {
            "description": "foo",
            "network": "foo"
        }
    ],
    "metrics_enabled": true,
    "oauth_allow_insecure_email_lookup": true,
    "private_access": {
        "grafana": true
    },
    "privatelink_access": {
        "grafana": true
    },
    "public_access": {
        "grafana": true
    },
    "recovery_basebackup_name": "foo",
    "smtp_server": {
        "from_address": "foo",
        "from_name": "foo",
        "host": "foo",
        "password": "foo",
        "port": 1,
        "skip_verify": true,
        "starttls_policy": "foo",
        "username": "foo"
    },
    "static_ips": true,
    "unified_alerting_enabled": true,
    "user_auto_assign_org": true,
    "user_auto_assign_org_role": "foo",
    "viewers_can_edit": true
}`

func TestUserConfig(t *testing.T) {
	cases := []struct {
		name   string
		source string
		expect string
		create bool
	}{
		{
			name:   "fields to create resource",
			source: allFields,
			expect: allFields,
			create: true,
		},
		{
			name:   "only fields to update resource",
			source: allFields,
			expect: updateOnlyFields, // usually, fewer fields
			create: false,
		},
	}

	ctx := context.Background()
	diags := make(diag.Diagnostics, 0)
	for _, opt := range cases {
		t.Run(opt.name, func(t *testing.T) {
			dto := new(dtoUserConfig)
			err := json.Unmarshal([]byte(opt.source), dto)
			require.NoError(t, err)

			// From json to TF
			tfo := flattenUserConfig(ctx, diags, dto)
			require.Empty(t, diags)

			// From TF to json
			config := expandUserConfig(ctx, diags, tfo)
			require.Empty(t, diags)

			// Run specific marshal (create or update resource)
			dtoConfig, err := schemautil.MarshalUserConfig(config, opt.create)
			require.NoError(t, err)

			// Compares that output is strictly equal to the input
			// If so, the flow is valid
			b, err := json.MarshalIndent(dtoConfig, "", "    ")
			require.NoError(t, err)
			require.Empty(t, cmp.Diff(opt.expect, string(b)))
		})
	}
}
