// Code generated by user config generator. DO NOT EDIT.

package opensearch

import (
	"context"
	"encoding/json"

	setvalidator "github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	attr "github.com/hashicorp/terraform-plugin-framework/attr"
	datasource "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	diag "github.com/hashicorp/terraform-plugin-framework/diag"
	resource "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	booldefault "github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	int64default "github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	stringdefault "github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	validator "github.com/hashicorp/terraform-plugin-framework/schema/validator"
	types "github.com/hashicorp/terraform-plugin-framework/types"

	schemautil "github.com/aiven/terraform-provider-aiven/internal/schemautil"
)

// NewResourceSchema returns resource schema
func NewResourceSchema() resource.SetNestedBlock {
	return resource.SetNestedBlock{
		Description: "Opensearch user configurable settings",
		NestedObject: resource.NestedBlockObject{
			Attributes: map[string]resource.Attribute{
				"additional_backup_regions": resource.SetAttribute{
					Computed:    true,
					Description: "Additional Cloud Regions for Backup Replication.",
					ElementType: types.StringType,
					Optional:    true,
					Validators:  []validator.Set{setvalidator.SizeAtMost(1)},
				},
				"custom_domain": resource.StringAttribute{
					Computed:    true,
					Description: "Serve the web frontend using a custom CNAME pointing to the Aiven DNS name.",
					Optional:    true,
				},
				"disable_replication_factor_adjustment": resource.BoolAttribute{
					Computed:    true,
					Description: "DEPRECATED: Disable automatic replication factor adjustment for multi-node services. By default, Aiven ensures all indexes are replicated at least to two nodes. Note: Due to potential data loss in case of losing a service node, this setting can no longer be activated.",
					Optional:    true,
				},
				"keep_index_refresh_interval": resource.BoolAttribute{
					Computed:    true,
					Description: "Aiven automation resets index.refresh_interval to default value for every index to be sure that indices are always visible to search. If it doesn't fit your case, you can disable this by setting up this flag to true.",
					Optional:    true,
				},
				"max_index_count": resource.Int64Attribute{
					Computed:    true,
					Default:     int64default.StaticInt64(0),
					Description: "DEPRECATED: use index_patterns instead. The default value is `0`.",
					Optional:    true,
				},
				"opensearch_version": resource.StringAttribute{
					Computed:    true,
					Description: "OpenSearch major version.",
					Optional:    true,
				},
				"project_to_fork_from": resource.StringAttribute{
					Computed:    true,
					Description: "Name of another project to fork a service from. This has effect only when a new service is being created.",
					Optional:    true,
				},
				"recovery_basebackup_name": resource.StringAttribute{
					Computed:    true,
					Description: "Name of the basebackup to restore in forked service.",
					Optional:    true,
				},
				"service_to_fork_from": resource.StringAttribute{
					Computed:    true,
					Description: "Name of another service to fork from. This has effect only when a new service is being created.",
					Optional:    true,
				},
				"static_ips": resource.BoolAttribute{
					Computed:    true,
					Description: "Use static public IP addresses.",
					Optional:    true,
				},
			},
			Blocks: map[string]resource.Block{
				"index_patterns": resource.SetNestedBlock{
					Description: "Index patterns",
					NestedObject: resource.NestedBlockObject{Attributes: map[string]resource.Attribute{
						"max_index_count": resource.Int64Attribute{
							Description: "Maximum number of indexes to keep.",
							Required:    true,
						},
						"pattern": resource.StringAttribute{
							Description: "fnmatch pattern.",
							Required:    true,
						},
						"sorting_algorithm": resource.StringAttribute{
							Computed:    true,
							Default:     stringdefault.StaticString("creation_date"),
							Description: "Deletion sorting algorithm. The default value is `creation_date`.",
							Optional:    true,
						},
					}},
					Validators: []validator.Set{setvalidator.SizeAtMost(512)},
				},
				"index_template": resource.SetNestedBlock{
					Description: "Template settings for all new indexes",
					NestedObject: resource.NestedBlockObject{Attributes: map[string]resource.Attribute{
						"mapping_nested_objects_limit": resource.Int64Attribute{
							Computed:    true,
							Description: "The maximum number of nested JSON objects that a single document can contain across all nested types. This limit helps to prevent out of memory errors when a document contains too many nested objects. Default is 10000.",
							Optional:    true,
						},
						"number_of_replicas": resource.Int64Attribute{
							Computed:    true,
							Description: "The number of replicas each primary shard has.",
							Optional:    true,
						},
						"number_of_shards": resource.Int64Attribute{
							Computed:    true,
							Description: "The number of primary shards that an index should have.",
							Optional:    true,
						},
					}},
				},
				"ip_filter": resource.SetNestedBlock{
					Description: "Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'",
					NestedObject: resource.NestedBlockObject{Attributes: map[string]resource.Attribute{
						"description": resource.StringAttribute{
							Computed:    true,
							Description: "Description for IP filter list entry.",
							Optional:    true,
						},
						"network": resource.StringAttribute{
							Description: "CIDR address block.",
							Required:    true,
						},
					}},
					Validators: []validator.Set{setvalidator.SizeAtMost(1024)},
				},
				"openid": resource.SetNestedBlock{
					Description: "OpenSearch OpenID Connect Configuration",
					NestedObject: resource.NestedBlockObject{Attributes: map[string]resource.Attribute{
						"client_id": resource.StringAttribute{
							Description: "The ID of the OpenID Connect client configured in your IdP. Required.",
							Required:    true,
						},
						"client_secret": resource.StringAttribute{
							Description: "The client secret of the OpenID Connect client configured in your IdP. Required.",
							Required:    true,
						},
						"connect_url": resource.StringAttribute{
							Description: "The URL of your IdP where the Security plugin can find the OpenID Connect metadata/configuration settings.",
							Required:    true,
						},
						"enabled": resource.BoolAttribute{
							Computed:    true,
							Default:     booldefault.StaticBool(true),
							Description: "Enables or disables OpenID Connect authentication for OpenSearch. When enabled, users can authenticate using OpenID Connect with an Identity Provider. The default value is `true`.",
							Optional:    true,
						},
						"header": resource.StringAttribute{
							Computed:    true,
							Default:     stringdefault.StaticString("Authorization"),
							Description: "HTTP header name of the JWT token. Optional. Default is Authorization. The default value is `Authorization`.",
							Optional:    true,
						},
						"jwt_header": resource.StringAttribute{
							Computed:    true,
							Description: "The HTTP header that stores the token. Typically the Authorization header with the Bearer schema: Authorization: Bearer <token>. Optional. Default is Authorization.",
							Optional:    true,
						},
						"jwt_url_parameter": resource.StringAttribute{
							Computed:    true,
							Description: "If the token is not transmitted in the HTTP header, but as an URL parameter, define the name of the parameter here. Optional.",
							Optional:    true,
						},
						"refresh_rate_limit_count": resource.Int64Attribute{
							Computed:    true,
							Default:     int64default.StaticInt64(10),
							Description: "The maximum number of unknown key IDs in the time frame. Default is 10. Optional. The default value is `10`.",
							Optional:    true,
						},
						"refresh_rate_limit_time_window_ms": resource.Int64Attribute{
							Computed:    true,
							Default:     int64default.StaticInt64(10000),
							Description: "The time frame to use when checking the maximum number of unknown key IDs, in milliseconds. Optional.Default is 10000 (10 seconds). The default value is `10000`.",
							Optional:    true,
						},
						"roles_key": resource.StringAttribute{
							Computed:    true,
							Description: "The key in the JSON payload that stores the user’s roles. The value of this key must be a comma-separated list of roles. Required only if you want to use roles in the JWT.",
							Optional:    true,
						},
						"scope": resource.StringAttribute{
							Computed:    true,
							Description: "The scope of the identity token issued by the IdP. Optional. Default is openid profile email address phone.",
							Optional:    true,
						},
						"subject_key": resource.StringAttribute{
							Computed:    true,
							Description: "The key in the JSON payload that stores the user’s name. If not defined, the subject registered claim is used. Most IdP providers use the preferred_username claim. Optional.",
							Optional:    true,
						},
					}},
				},
				"opensearch": resource.SetNestedBlock{
					Description: "OpenSearch settings",
					NestedObject: resource.NestedBlockObject{
						Attributes: map[string]resource.Attribute{
							"action_auto_create_index_enabled": resource.BoolAttribute{
								Computed:    true,
								Description: "Explicitly allow or block automatic creation of indices. Defaults to true.",
								Optional:    true,
							},
							"action_destructive_requires_name": resource.BoolAttribute{
								Computed:    true,
								Description: "Require explicit index names when deleting.",
								Optional:    true,
							},
							"cluster_max_shards_per_node": resource.Int64Attribute{
								Computed:    true,
								Description: "Controls the number of shards allowed in the cluster per data node.",
								Optional:    true,
							},
							"cluster_routing_allocation_node_concurrent_recoveries": resource.Int64Attribute{
								Computed:    true,
								Description: "How many concurrent incoming/outgoing shard recoveries (normally replicas) are allowed to happen on a node. Defaults to 2.",
								Optional:    true,
							},
							"email_sender_name": resource.StringAttribute{
								Computed:    true,
								Description: "Sender name placeholder to be used in Opensearch Dashboards and Opensearch keystore.",
								Optional:    true,
							},
							"email_sender_password": resource.StringAttribute{
								Computed:    true,
								Description: "Sender password for Opensearch alerts to authenticate with SMTP server.",
								Optional:    true,
							},
							"email_sender_username": resource.StringAttribute{
								Computed:    true,
								Description: "Sender username for Opensearch alerts.",
								Optional:    true,
							},
							"http_max_content_length": resource.Int64Attribute{
								Computed:    true,
								Description: "Maximum content length for HTTP requests to the OpenSearch HTTP API, in bytes.",
								Optional:    true,
							},
							"http_max_header_size": resource.Int64Attribute{
								Computed:    true,
								Description: "The max size of allowed headers, in bytes.",
								Optional:    true,
							},
							"http_max_initial_line_length": resource.Int64Attribute{
								Computed:    true,
								Description: "The max length of an HTTP URL, in bytes.",
								Optional:    true,
							},
							"indices_fielddata_cache_size": resource.Int64Attribute{
								Computed:    true,
								Description: "Relative amount. Maximum amount of heap memory used for field data cache. This is an expert setting; decreasing the value too much will increase overhead of loading field data; too much memory used for field data cache will decrease amount of heap available for other operations.",
								Optional:    true,
							},
							"indices_memory_index_buffer_size": resource.Int64Attribute{
								Computed:    true,
								Description: "Percentage value. Default is 10%. Total amount of heap used for indexing buffer, before writing segments to disk. This is an expert setting. Too low value will slow down indexing; too high value will increase indexing performance but causes performance issues for query performance.",
								Optional:    true,
							},
							"indices_queries_cache_size": resource.Int64Attribute{
								Computed:    true,
								Description: "Percentage value. Default is 10%. Maximum amount of heap used for query cache. This is an expert setting. Too low value will decrease query performance and increase performance for other operations; too high value will cause issues with other OpenSearch functionality.",
								Optional:    true,
							},
							"indices_query_bool_max_clause_count": resource.Int64Attribute{
								Computed:    true,
								Description: "Maximum number of clauses Lucene BooleanQuery can have. The default value (1024) is relatively high, and increasing it may cause performance issues. Investigate other approaches first before increasing this value.",
								Optional:    true,
							},
							"indices_recovery_max_bytes_per_sec": resource.Int64Attribute{
								Computed:    true,
								Description: "Limits total inbound and outbound recovery traffic for each node. Applies to both peer recoveries as well as snapshot recoveries (i.e., restores from a snapshot). Defaults to 40mb.",
								Optional:    true,
							},
							"indices_recovery_max_concurrent_file_chunks": resource.Int64Attribute{
								Computed:    true,
								Description: "Number of file chunks sent in parallel for each recovery. Defaults to 2.",
								Optional:    true,
							},
							"ism_enabled": resource.BoolAttribute{
								Computed:    true,
								Default:     booldefault.StaticBool(true),
								Description: "Specifies whether ISM is enabled or not. The default value is `true`.",
								Optional:    true,
							},
							"ism_history_enabled": resource.BoolAttribute{
								Computed:    true,
								Default:     booldefault.StaticBool(true),
								Description: "Specifies whether audit history is enabled or not. The logs from ISM are automatically indexed to a logs document. The default value is `true`.",
								Optional:    true,
							},
							"ism_history_max_age": resource.Int64Attribute{
								Computed:    true,
								Default:     int64default.StaticInt64(24),
								Description: "The maximum age before rolling over the audit history index in hours. The default value is `24`.",
								Optional:    true,
							},
							"ism_history_max_docs": resource.Int64Attribute{
								Computed:    true,
								Default:     int64default.StaticInt64(2500000),
								Description: "The maximum number of documents before rolling over the audit history index. The default value is `2500000`.",
								Optional:    true,
							},
							"ism_history_rollover_check_period": resource.Int64Attribute{
								Computed:    true,
								Default:     int64default.StaticInt64(8),
								Description: "The time between rollover checks for the audit history index in hours. The default value is `8`.",
								Optional:    true,
							},
							"ism_history_rollover_retention_period": resource.Int64Attribute{
								Computed:    true,
								Default:     int64default.StaticInt64(30),
								Description: "How long audit history indices are kept in days. The default value is `30`.",
								Optional:    true,
							},
							"override_main_response_version": resource.BoolAttribute{
								Computed:    true,
								Description: "Compatibility mode sets OpenSearch to report its version as 7.10 so clients continue to work. Default is false.",
								Optional:    true,
							},
							"reindex_remote_whitelist": resource.SetAttribute{
								Computed:    true,
								Description: "Whitelisted addresses for reindexing. Changing this value will cause all OpenSearch instances to restart.",
								ElementType: types.StringType,
								Optional:    true,
								Validators:  []validator.Set{setvalidator.SizeAtMost(32)},
							},
							"script_max_compilations_rate": resource.StringAttribute{
								Computed:    true,
								Description: "Script compilation circuit breaker limits the number of inline script compilations within a period of time. Default is use-context.",
								Optional:    true,
							},
							"search_max_buckets": resource.Int64Attribute{
								Computed:    true,
								Description: "Maximum number of aggregation buckets allowed in a single response. OpenSearch default value is used when this is not defined.",
								Optional:    true,
							},
							"thread_pool_analyze_queue_size": resource.Int64Attribute{
								Computed:    true,
								Description: "Size for the thread pool queue. See documentation for exact details.",
								Optional:    true,
							},
							"thread_pool_analyze_size": resource.Int64Attribute{
								Computed:    true,
								Description: "Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.",
								Optional:    true,
							},
							"thread_pool_force_merge_size": resource.Int64Attribute{
								Computed:    true,
								Description: "Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.",
								Optional:    true,
							},
							"thread_pool_get_queue_size": resource.Int64Attribute{
								Computed:    true,
								Description: "Size for the thread pool queue. See documentation for exact details.",
								Optional:    true,
							},
							"thread_pool_get_size": resource.Int64Attribute{
								Computed:    true,
								Description: "Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.",
								Optional:    true,
							},
							"thread_pool_search_queue_size": resource.Int64Attribute{
								Computed:    true,
								Description: "Size for the thread pool queue. See documentation for exact details.",
								Optional:    true,
							},
							"thread_pool_search_size": resource.Int64Attribute{
								Computed:    true,
								Description: "Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.",
								Optional:    true,
							},
							"thread_pool_search_throttled_queue_size": resource.Int64Attribute{
								Computed:    true,
								Description: "Size for the thread pool queue. See documentation for exact details.",
								Optional:    true,
							},
							"thread_pool_search_throttled_size": resource.Int64Attribute{
								Computed:    true,
								Description: "Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.",
								Optional:    true,
							},
							"thread_pool_write_queue_size": resource.Int64Attribute{
								Computed:    true,
								Description: "Size for the thread pool queue. See documentation for exact details.",
								Optional:    true,
							},
							"thread_pool_write_size": resource.Int64Attribute{
								Computed:    true,
								Description: "Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.",
								Optional:    true,
							},
						},
						Blocks: map[string]resource.Block{"auth_failure_listeners": resource.SetNestedBlock{
							Description: "Opensearch Security Plugin Settings",
							NestedObject: resource.NestedBlockObject{Blocks: map[string]resource.Block{
								"internal_authentication_backend_limiting": resource.SetNestedBlock{NestedObject: resource.NestedBlockObject{Attributes: map[string]resource.Attribute{
									"allowed_tries": resource.Int64Attribute{
										Computed:    true,
										Description: "The number of login attempts allowed before login is blocked.",
										Optional:    true,
									},
									"authentication_backend": resource.StringAttribute{
										Computed:    true,
										Description: "internal_authentication_backend_limiting.authentication_backend.",
										Optional:    true,
									},
									"block_expiry_seconds": resource.Int64Attribute{
										Computed:    true,
										Description: "The duration of time that login remains blocked after a failed login.",
										Optional:    true,
									},
									"max_blocked_clients": resource.Int64Attribute{
										Computed:    true,
										Description: "internal_authentication_backend_limiting.max_blocked_clients.",
										Optional:    true,
									},
									"max_tracked_clients": resource.Int64Attribute{
										Computed:    true,
										Description: "The maximum number of tracked IP addresses that have failed login.",
										Optional:    true,
									},
									"time_window_seconds": resource.Int64Attribute{
										Computed:    true,
										Description: "The window of time in which the value for `allowed_tries` is enforced.",
										Optional:    true,
									},
									"type": resource.StringAttribute{
										Computed:    true,
										Description: "internal_authentication_backend_limiting.type.",
										Optional:    true,
									},
								}}},
								"ip_rate_limiting": resource.SetNestedBlock{
									Description: "IP address rate limiting settings",
									NestedObject: resource.NestedBlockObject{Attributes: map[string]resource.Attribute{
										"allowed_tries": resource.Int64Attribute{
											Computed:    true,
											Description: "The number of login attempts allowed before login is blocked.",
											Optional:    true,
										},
										"block_expiry_seconds": resource.Int64Attribute{
											Computed:    true,
											Description: "The duration of time that login remains blocked after a failed login.",
											Optional:    true,
										},
										"max_blocked_clients": resource.Int64Attribute{
											Computed:    true,
											Description: "The maximum number of blocked IP addresses.",
											Optional:    true,
										},
										"max_tracked_clients": resource.Int64Attribute{
											Computed:    true,
											Description: "The maximum number of tracked IP addresses that have failed login.",
											Optional:    true,
										},
										"time_window_seconds": resource.Int64Attribute{
											Computed:    true,
											Description: "The window of time in which the value for `allowed_tries` is enforced.",
											Optional:    true,
										},
										"type": resource.StringAttribute{
											Computed:    true,
											Description: "The type of rate limiting.",
											Optional:    true,
										},
									}},
								},
							}},
						}},
					},
				},
				"opensearch_dashboards": resource.SetNestedBlock{
					Description: "OpenSearch Dashboards settings",
					NestedObject: resource.NestedBlockObject{Attributes: map[string]resource.Attribute{
						"enabled": resource.BoolAttribute{
							Computed:    true,
							Default:     booldefault.StaticBool(true),
							Description: "Enable or disable OpenSearch Dashboards. The default value is `true`.",
							Optional:    true,
						},
						"max_old_space_size": resource.Int64Attribute{
							Computed:    true,
							Default:     int64default.StaticInt64(128),
							Description: "Limits the maximum amount of memory (in MiB) the OpenSearch Dashboards process can use. This sets the max_old_space_size option of the nodejs running the OpenSearch Dashboards. Note: the memory reserved by OpenSearch Dashboards is not available for OpenSearch. The default value is `128`.",
							Optional:    true,
						},
						"opensearch_request_timeout": resource.Int64Attribute{
							Computed:    true,
							Default:     int64default.StaticInt64(30000),
							Description: "Timeout in milliseconds for requests made by OpenSearch Dashboards towards OpenSearch. The default value is `30000`.",
							Optional:    true,
						},
					}},
				},
				"private_access": resource.SetNestedBlock{
					Description: "Allow access to selected service ports from private networks",
					NestedObject: resource.NestedBlockObject{Attributes: map[string]resource.Attribute{
						"opensearch": resource.BoolAttribute{
							Computed:    true,
							Description: "Allow clients to connect to opensearch with a DNS name that always resolves to the service's private IP addresses. Only available in certain network locations.",
							Optional:    true,
						},
						"opensearch_dashboards": resource.BoolAttribute{
							Computed:    true,
							Description: "Allow clients to connect to opensearch_dashboards with a DNS name that always resolves to the service's private IP addresses. Only available in certain network locations.",
							Optional:    true,
						},
						"prometheus": resource.BoolAttribute{
							Computed:    true,
							Description: "Allow clients to connect to prometheus with a DNS name that always resolves to the service's private IP addresses. Only available in certain network locations.",
							Optional:    true,
						},
					}},
				},
				"privatelink_access": resource.SetNestedBlock{
					Description: "Allow access to selected service components through Privatelink",
					NestedObject: resource.NestedBlockObject{Attributes: map[string]resource.Attribute{
						"opensearch": resource.BoolAttribute{
							Computed:    true,
							Description: "Enable opensearch.",
							Optional:    true,
						},
						"opensearch_dashboards": resource.BoolAttribute{
							Computed:    true,
							Description: "Enable opensearch_dashboards.",
							Optional:    true,
						},
						"prometheus": resource.BoolAttribute{
							Computed:    true,
							Description: "Enable prometheus.",
							Optional:    true,
						},
					}},
				},
				"public_access": resource.SetNestedBlock{
					Description: "Allow access to selected service ports from the public Internet",
					NestedObject: resource.NestedBlockObject{Attributes: map[string]resource.Attribute{
						"opensearch": resource.BoolAttribute{
							Computed:    true,
							Description: "Allow clients to connect to opensearch from the public internet for service nodes that are in a project VPC or another type of private network.",
							Optional:    true,
						},
						"opensearch_dashboards": resource.BoolAttribute{
							Computed:    true,
							Description: "Allow clients to connect to opensearch_dashboards from the public internet for service nodes that are in a project VPC or another type of private network.",
							Optional:    true,
						},
						"prometheus": resource.BoolAttribute{
							Computed:    true,
							Description: "Allow clients to connect to prometheus from the public internet for service nodes that are in a project VPC or another type of private network.",
							Optional:    true,
						},
					}},
				},
				"saml": resource.SetNestedBlock{
					Description: "OpenSearch SAML configuration",
					NestedObject: resource.NestedBlockObject{Attributes: map[string]resource.Attribute{
						"enabled": resource.BoolAttribute{
							Description: "Enables or disables SAML-based authentication for OpenSearch. When enabled, users can authenticate using SAML with an Identity Provider. The default value is `true`.",
							Required:    true,
						},
						"idp_entity_id": resource.StringAttribute{
							Description: "The unique identifier for the Identity Provider (IdP) entity that is used for SAML authentication. This value is typically provided by the IdP.",
							Required:    true,
						},
						"idp_metadata_url": resource.StringAttribute{
							Description: "The URL of the SAML metadata for the Identity Provider (IdP). This is used to configure SAML-based authentication with the IdP.",
							Required:    true,
						},
						"idp_pemtrustedcas_content": resource.StringAttribute{
							Computed:    true,
							Description: "This parameter specifies the PEM-encoded root certificate authority (CA) content for the SAML identity provider (IdP) server verification. The root CA content is used to verify the SSL/TLS certificate presented by the server.",
							Optional:    true,
						},
						"roles_key": resource.StringAttribute{
							Computed:    true,
							Description: "Optional. Specifies the attribute in the SAML response where role information is stored, if available. Role attributes are not required for SAML authentication, but can be included in SAML assertions by most Identity Providers (IdPs) to determine user access levels or permissions.",
							Optional:    true,
						},
						"sp_entity_id": resource.StringAttribute{
							Description: "The unique identifier for the Service Provider (SP) entity that is used for SAML authentication. This value is typically provided by the SP.",
							Required:    true,
						},
						"subject_key": resource.StringAttribute{
							Computed:    true,
							Description: "Optional. Specifies the attribute in the SAML response where the subject identifier is stored. If not configured, the NameID attribute is used by default.",
							Optional:    true,
						},
					}},
				},
			},
		},
		Validators: []validator.Set{setvalidator.SizeAtMost(1)},
	}
}

// NewDataSourceSchema returns datasource schema
func NewDataSourceSchema() datasource.SetNestedBlock {
	return datasource.SetNestedBlock{
		Description: "Opensearch user configurable settings",
		NestedObject: datasource.NestedBlockObject{
			Attributes: map[string]datasource.Attribute{
				"additional_backup_regions": datasource.SetAttribute{
					Computed:    true,
					Description: "Additional Cloud Regions for Backup Replication.",
					ElementType: types.StringType,
					Validators:  []validator.Set{setvalidator.SizeAtMost(1)},
				},
				"custom_domain": datasource.StringAttribute{
					Computed:    true,
					Description: "Serve the web frontend using a custom CNAME pointing to the Aiven DNS name.",
				},
				"disable_replication_factor_adjustment": datasource.BoolAttribute{
					Computed:    true,
					Description: "DEPRECATED: Disable automatic replication factor adjustment for multi-node services. By default, Aiven ensures all indexes are replicated at least to two nodes. Note: Due to potential data loss in case of losing a service node, this setting can no longer be activated.",
				},
				"keep_index_refresh_interval": datasource.BoolAttribute{
					Computed:    true,
					Description: "Aiven automation resets index.refresh_interval to default value for every index to be sure that indices are always visible to search. If it doesn't fit your case, you can disable this by setting up this flag to true.",
				},
				"max_index_count": datasource.Int64Attribute{
					Computed:    true,
					Description: "DEPRECATED: use index_patterns instead. The default value is `0`.",
				},
				"opensearch_version": datasource.StringAttribute{
					Computed:    true,
					Description: "OpenSearch major version.",
				},
				"project_to_fork_from": datasource.StringAttribute{
					Computed:    true,
					Description: "Name of another project to fork a service from. This has effect only when a new service is being created.",
				},
				"recovery_basebackup_name": datasource.StringAttribute{
					Computed:    true,
					Description: "Name of the basebackup to restore in forked service.",
				},
				"service_to_fork_from": datasource.StringAttribute{
					Computed:    true,
					Description: "Name of another service to fork from. This has effect only when a new service is being created.",
				},
				"static_ips": datasource.BoolAttribute{
					Computed:    true,
					Description: "Use static public IP addresses.",
				},
			},
			Blocks: map[string]datasource.Block{
				"index_patterns": datasource.SetNestedBlock{
					Description: "Index patterns",
					NestedObject: datasource.NestedBlockObject{Attributes: map[string]datasource.Attribute{
						"max_index_count": datasource.Int64Attribute{
							Computed:    true,
							Description: "Maximum number of indexes to keep.",
						},
						"pattern": datasource.StringAttribute{
							Computed:    true,
							Description: "fnmatch pattern.",
						},
						"sorting_algorithm": datasource.StringAttribute{
							Computed:    true,
							Description: "Deletion sorting algorithm. The default value is `creation_date`.",
						},
					}},
					Validators: []validator.Set{setvalidator.SizeAtMost(512)},
				},
				"index_template": datasource.SetNestedBlock{
					Description: "Template settings for all new indexes",
					NestedObject: datasource.NestedBlockObject{Attributes: map[string]datasource.Attribute{
						"mapping_nested_objects_limit": datasource.Int64Attribute{
							Computed:    true,
							Description: "The maximum number of nested JSON objects that a single document can contain across all nested types. This limit helps to prevent out of memory errors when a document contains too many nested objects. Default is 10000.",
						},
						"number_of_replicas": datasource.Int64Attribute{
							Computed:    true,
							Description: "The number of replicas each primary shard has.",
						},
						"number_of_shards": datasource.Int64Attribute{
							Computed:    true,
							Description: "The number of primary shards that an index should have.",
						},
					}},
				},
				"ip_filter": datasource.SetNestedBlock{
					Description: "Allow incoming connections from CIDR address block, e.g. '10.20.0.0/16'",
					NestedObject: datasource.NestedBlockObject{Attributes: map[string]datasource.Attribute{
						"description": datasource.StringAttribute{
							Computed:    true,
							Description: "Description for IP filter list entry.",
						},
						"network": datasource.StringAttribute{
							Computed:    true,
							Description: "CIDR address block.",
						},
					}},
					Validators: []validator.Set{setvalidator.SizeAtMost(1024)},
				},
				"openid": datasource.SetNestedBlock{
					Description: "OpenSearch OpenID Connect Configuration",
					NestedObject: datasource.NestedBlockObject{Attributes: map[string]datasource.Attribute{
						"client_id": datasource.StringAttribute{
							Computed:    true,
							Description: "The ID of the OpenID Connect client configured in your IdP. Required.",
						},
						"client_secret": datasource.StringAttribute{
							Computed:    true,
							Description: "The client secret of the OpenID Connect client configured in your IdP. Required.",
						},
						"connect_url": datasource.StringAttribute{
							Computed:    true,
							Description: "The URL of your IdP where the Security plugin can find the OpenID Connect metadata/configuration settings.",
						},
						"enabled": datasource.BoolAttribute{
							Computed:    true,
							Description: "Enables or disables OpenID Connect authentication for OpenSearch. When enabled, users can authenticate using OpenID Connect with an Identity Provider. The default value is `true`.",
						},
						"header": datasource.StringAttribute{
							Computed:    true,
							Description: "HTTP header name of the JWT token. Optional. Default is Authorization. The default value is `Authorization`.",
						},
						"jwt_header": datasource.StringAttribute{
							Computed:    true,
							Description: "The HTTP header that stores the token. Typically the Authorization header with the Bearer schema: Authorization: Bearer <token>. Optional. Default is Authorization.",
						},
						"jwt_url_parameter": datasource.StringAttribute{
							Computed:    true,
							Description: "If the token is not transmitted in the HTTP header, but as an URL parameter, define the name of the parameter here. Optional.",
						},
						"refresh_rate_limit_count": datasource.Int64Attribute{
							Computed:    true,
							Description: "The maximum number of unknown key IDs in the time frame. Default is 10. Optional. The default value is `10`.",
						},
						"refresh_rate_limit_time_window_ms": datasource.Int64Attribute{
							Computed:    true,
							Description: "The time frame to use when checking the maximum number of unknown key IDs, in milliseconds. Optional.Default is 10000 (10 seconds). The default value is `10000`.",
						},
						"roles_key": datasource.StringAttribute{
							Computed:    true,
							Description: "The key in the JSON payload that stores the user’s roles. The value of this key must be a comma-separated list of roles. Required only if you want to use roles in the JWT.",
						},
						"scope": datasource.StringAttribute{
							Computed:    true,
							Description: "The scope of the identity token issued by the IdP. Optional. Default is openid profile email address phone.",
						},
						"subject_key": datasource.StringAttribute{
							Computed:    true,
							Description: "The key in the JSON payload that stores the user’s name. If not defined, the subject registered claim is used. Most IdP providers use the preferred_username claim. Optional.",
						},
					}},
				},
				"opensearch": datasource.SetNestedBlock{
					Description: "OpenSearch settings",
					NestedObject: datasource.NestedBlockObject{
						Attributes: map[string]datasource.Attribute{
							"action_auto_create_index_enabled": datasource.BoolAttribute{
								Computed:    true,
								Description: "Explicitly allow or block automatic creation of indices. Defaults to true.",
							},
							"action_destructive_requires_name": datasource.BoolAttribute{
								Computed:    true,
								Description: "Require explicit index names when deleting.",
							},
							"cluster_max_shards_per_node": datasource.Int64Attribute{
								Computed:    true,
								Description: "Controls the number of shards allowed in the cluster per data node.",
							},
							"cluster_routing_allocation_node_concurrent_recoveries": datasource.Int64Attribute{
								Computed:    true,
								Description: "How many concurrent incoming/outgoing shard recoveries (normally replicas) are allowed to happen on a node. Defaults to 2.",
							},
							"email_sender_name": datasource.StringAttribute{
								Computed:    true,
								Description: "Sender name placeholder to be used in Opensearch Dashboards and Opensearch keystore.",
							},
							"email_sender_password": datasource.StringAttribute{
								Computed:    true,
								Description: "Sender password for Opensearch alerts to authenticate with SMTP server.",
							},
							"email_sender_username": datasource.StringAttribute{
								Computed:    true,
								Description: "Sender username for Opensearch alerts.",
							},
							"http_max_content_length": datasource.Int64Attribute{
								Computed:    true,
								Description: "Maximum content length for HTTP requests to the OpenSearch HTTP API, in bytes.",
							},
							"http_max_header_size": datasource.Int64Attribute{
								Computed:    true,
								Description: "The max size of allowed headers, in bytes.",
							},
							"http_max_initial_line_length": datasource.Int64Attribute{
								Computed:    true,
								Description: "The max length of an HTTP URL, in bytes.",
							},
							"indices_fielddata_cache_size": datasource.Int64Attribute{
								Computed:    true,
								Description: "Relative amount. Maximum amount of heap memory used for field data cache. This is an expert setting; decreasing the value too much will increase overhead of loading field data; too much memory used for field data cache will decrease amount of heap available for other operations.",
							},
							"indices_memory_index_buffer_size": datasource.Int64Attribute{
								Computed:    true,
								Description: "Percentage value. Default is 10%. Total amount of heap used for indexing buffer, before writing segments to disk. This is an expert setting. Too low value will slow down indexing; too high value will increase indexing performance but causes performance issues for query performance.",
							},
							"indices_queries_cache_size": datasource.Int64Attribute{
								Computed:    true,
								Description: "Percentage value. Default is 10%. Maximum amount of heap used for query cache. This is an expert setting. Too low value will decrease query performance and increase performance for other operations; too high value will cause issues with other OpenSearch functionality.",
							},
							"indices_query_bool_max_clause_count": datasource.Int64Attribute{
								Computed:    true,
								Description: "Maximum number of clauses Lucene BooleanQuery can have. The default value (1024) is relatively high, and increasing it may cause performance issues. Investigate other approaches first before increasing this value.",
							},
							"indices_recovery_max_bytes_per_sec": datasource.Int64Attribute{
								Computed:    true,
								Description: "Limits total inbound and outbound recovery traffic for each node. Applies to both peer recoveries as well as snapshot recoveries (i.e., restores from a snapshot). Defaults to 40mb.",
							},
							"indices_recovery_max_concurrent_file_chunks": datasource.Int64Attribute{
								Computed:    true,
								Description: "Number of file chunks sent in parallel for each recovery. Defaults to 2.",
							},
							"ism_enabled": datasource.BoolAttribute{
								Computed:    true,
								Description: "Specifies whether ISM is enabled or not. The default value is `true`.",
							},
							"ism_history_enabled": datasource.BoolAttribute{
								Computed:    true,
								Description: "Specifies whether audit history is enabled or not. The logs from ISM are automatically indexed to a logs document. The default value is `true`.",
							},
							"ism_history_max_age": datasource.Int64Attribute{
								Computed:    true,
								Description: "The maximum age before rolling over the audit history index in hours. The default value is `24`.",
							},
							"ism_history_max_docs": datasource.Int64Attribute{
								Computed:    true,
								Description: "The maximum number of documents before rolling over the audit history index. The default value is `2500000`.",
							},
							"ism_history_rollover_check_period": datasource.Int64Attribute{
								Computed:    true,
								Description: "The time between rollover checks for the audit history index in hours. The default value is `8`.",
							},
							"ism_history_rollover_retention_period": datasource.Int64Attribute{
								Computed:    true,
								Description: "How long audit history indices are kept in days. The default value is `30`.",
							},
							"override_main_response_version": datasource.BoolAttribute{
								Computed:    true,
								Description: "Compatibility mode sets OpenSearch to report its version as 7.10 so clients continue to work. Default is false.",
							},
							"reindex_remote_whitelist": datasource.SetAttribute{
								Computed:    true,
								Description: "Whitelisted addresses for reindexing. Changing this value will cause all OpenSearch instances to restart.",
								ElementType: types.StringType,
								Validators:  []validator.Set{setvalidator.SizeAtMost(32)},
							},
							"script_max_compilations_rate": datasource.StringAttribute{
								Computed:    true,
								Description: "Script compilation circuit breaker limits the number of inline script compilations within a period of time. Default is use-context.",
							},
							"search_max_buckets": datasource.Int64Attribute{
								Computed:    true,
								Description: "Maximum number of aggregation buckets allowed in a single response. OpenSearch default value is used when this is not defined.",
							},
							"thread_pool_analyze_queue_size": datasource.Int64Attribute{
								Computed:    true,
								Description: "Size for the thread pool queue. See documentation for exact details.",
							},
							"thread_pool_analyze_size": datasource.Int64Attribute{
								Computed:    true,
								Description: "Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.",
							},
							"thread_pool_force_merge_size": datasource.Int64Attribute{
								Computed:    true,
								Description: "Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.",
							},
							"thread_pool_get_queue_size": datasource.Int64Attribute{
								Computed:    true,
								Description: "Size for the thread pool queue. See documentation for exact details.",
							},
							"thread_pool_get_size": datasource.Int64Attribute{
								Computed:    true,
								Description: "Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.",
							},
							"thread_pool_search_queue_size": datasource.Int64Attribute{
								Computed:    true,
								Description: "Size for the thread pool queue. See documentation for exact details.",
							},
							"thread_pool_search_size": datasource.Int64Attribute{
								Computed:    true,
								Description: "Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.",
							},
							"thread_pool_search_throttled_queue_size": datasource.Int64Attribute{
								Computed:    true,
								Description: "Size for the thread pool queue. See documentation for exact details.",
							},
							"thread_pool_search_throttled_size": datasource.Int64Attribute{
								Computed:    true,
								Description: "Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.",
							},
							"thread_pool_write_queue_size": datasource.Int64Attribute{
								Computed:    true,
								Description: "Size for the thread pool queue. See documentation for exact details.",
							},
							"thread_pool_write_size": datasource.Int64Attribute{
								Computed:    true,
								Description: "Size for the thread pool. See documentation for exact details. Do note this may have maximum value depending on CPU count - value is automatically lowered if set to higher than maximum value.",
							},
						},
						Blocks: map[string]datasource.Block{"auth_failure_listeners": datasource.SetNestedBlock{
							Description: "Opensearch Security Plugin Settings",
							NestedObject: datasource.NestedBlockObject{Blocks: map[string]datasource.Block{
								"internal_authentication_backend_limiting": datasource.SetNestedBlock{NestedObject: datasource.NestedBlockObject{Attributes: map[string]datasource.Attribute{
									"allowed_tries": datasource.Int64Attribute{
										Computed:    true,
										Description: "The number of login attempts allowed before login is blocked.",
									},
									"authentication_backend": datasource.StringAttribute{
										Computed:    true,
										Description: "internal_authentication_backend_limiting.authentication_backend.",
									},
									"block_expiry_seconds": datasource.Int64Attribute{
										Computed:    true,
										Description: "The duration of time that login remains blocked after a failed login.",
									},
									"max_blocked_clients": datasource.Int64Attribute{
										Computed:    true,
										Description: "internal_authentication_backend_limiting.max_blocked_clients.",
									},
									"max_tracked_clients": datasource.Int64Attribute{
										Computed:    true,
										Description: "The maximum number of tracked IP addresses that have failed login.",
									},
									"time_window_seconds": datasource.Int64Attribute{
										Computed:    true,
										Description: "The window of time in which the value for `allowed_tries` is enforced.",
									},
									"type": datasource.StringAttribute{
										Computed:    true,
										Description: "internal_authentication_backend_limiting.type.",
									},
								}}},
								"ip_rate_limiting": datasource.SetNestedBlock{
									Description: "IP address rate limiting settings",
									NestedObject: datasource.NestedBlockObject{Attributes: map[string]datasource.Attribute{
										"allowed_tries": datasource.Int64Attribute{
											Computed:    true,
											Description: "The number of login attempts allowed before login is blocked.",
										},
										"block_expiry_seconds": datasource.Int64Attribute{
											Computed:    true,
											Description: "The duration of time that login remains blocked after a failed login.",
										},
										"max_blocked_clients": datasource.Int64Attribute{
											Computed:    true,
											Description: "The maximum number of blocked IP addresses.",
										},
										"max_tracked_clients": datasource.Int64Attribute{
											Computed:    true,
											Description: "The maximum number of tracked IP addresses that have failed login.",
										},
										"time_window_seconds": datasource.Int64Attribute{
											Computed:    true,
											Description: "The window of time in which the value for `allowed_tries` is enforced.",
										},
										"type": datasource.StringAttribute{
											Computed:    true,
											Description: "The type of rate limiting.",
										},
									}},
								},
							}},
						}},
					},
				},
				"opensearch_dashboards": datasource.SetNestedBlock{
					Description: "OpenSearch Dashboards settings",
					NestedObject: datasource.NestedBlockObject{Attributes: map[string]datasource.Attribute{
						"enabled": datasource.BoolAttribute{
							Computed:    true,
							Description: "Enable or disable OpenSearch Dashboards. The default value is `true`.",
						},
						"max_old_space_size": datasource.Int64Attribute{
							Computed:    true,
							Description: "Limits the maximum amount of memory (in MiB) the OpenSearch Dashboards process can use. This sets the max_old_space_size option of the nodejs running the OpenSearch Dashboards. Note: the memory reserved by OpenSearch Dashboards is not available for OpenSearch. The default value is `128`.",
						},
						"opensearch_request_timeout": datasource.Int64Attribute{
							Computed:    true,
							Description: "Timeout in milliseconds for requests made by OpenSearch Dashboards towards OpenSearch. The default value is `30000`.",
						},
					}},
				},
				"private_access": datasource.SetNestedBlock{
					Description: "Allow access to selected service ports from private networks",
					NestedObject: datasource.NestedBlockObject{Attributes: map[string]datasource.Attribute{
						"opensearch": datasource.BoolAttribute{
							Computed:    true,
							Description: "Allow clients to connect to opensearch with a DNS name that always resolves to the service's private IP addresses. Only available in certain network locations.",
						},
						"opensearch_dashboards": datasource.BoolAttribute{
							Computed:    true,
							Description: "Allow clients to connect to opensearch_dashboards with a DNS name that always resolves to the service's private IP addresses. Only available in certain network locations.",
						},
						"prometheus": datasource.BoolAttribute{
							Computed:    true,
							Description: "Allow clients to connect to prometheus with a DNS name that always resolves to the service's private IP addresses. Only available in certain network locations.",
						},
					}},
				},
				"privatelink_access": datasource.SetNestedBlock{
					Description: "Allow access to selected service components through Privatelink",
					NestedObject: datasource.NestedBlockObject{Attributes: map[string]datasource.Attribute{
						"opensearch": datasource.BoolAttribute{
							Computed:    true,
							Description: "Enable opensearch.",
						},
						"opensearch_dashboards": datasource.BoolAttribute{
							Computed:    true,
							Description: "Enable opensearch_dashboards.",
						},
						"prometheus": datasource.BoolAttribute{
							Computed:    true,
							Description: "Enable prometheus.",
						},
					}},
				},
				"public_access": datasource.SetNestedBlock{
					Description: "Allow access to selected service ports from the public Internet",
					NestedObject: datasource.NestedBlockObject{Attributes: map[string]datasource.Attribute{
						"opensearch": datasource.BoolAttribute{
							Computed:    true,
							Description: "Allow clients to connect to opensearch from the public internet for service nodes that are in a project VPC or another type of private network.",
						},
						"opensearch_dashboards": datasource.BoolAttribute{
							Computed:    true,
							Description: "Allow clients to connect to opensearch_dashboards from the public internet for service nodes that are in a project VPC or another type of private network.",
						},
						"prometheus": datasource.BoolAttribute{
							Computed:    true,
							Description: "Allow clients to connect to prometheus from the public internet for service nodes that are in a project VPC or another type of private network.",
						},
					}},
				},
				"saml": datasource.SetNestedBlock{
					Description: "OpenSearch SAML configuration",
					NestedObject: datasource.NestedBlockObject{Attributes: map[string]datasource.Attribute{
						"enabled": datasource.BoolAttribute{
							Computed:    true,
							Description: "Enables or disables SAML-based authentication for OpenSearch. When enabled, users can authenticate using SAML with an Identity Provider. The default value is `true`.",
						},
						"idp_entity_id": datasource.StringAttribute{
							Computed:    true,
							Description: "The unique identifier for the Identity Provider (IdP) entity that is used for SAML authentication. This value is typically provided by the IdP.",
						},
						"idp_metadata_url": datasource.StringAttribute{
							Computed:    true,
							Description: "The URL of the SAML metadata for the Identity Provider (IdP). This is used to configure SAML-based authentication with the IdP.",
						},
						"idp_pemtrustedcas_content": datasource.StringAttribute{
							Computed:    true,
							Description: "This parameter specifies the PEM-encoded root certificate authority (CA) content for the SAML identity provider (IdP) server verification. The root CA content is used to verify the SSL/TLS certificate presented by the server.",
						},
						"roles_key": datasource.StringAttribute{
							Computed:    true,
							Description: "Optional. Specifies the attribute in the SAML response where role information is stored, if available. Role attributes are not required for SAML authentication, but can be included in SAML assertions by most Identity Providers (IdPs) to determine user access levels or permissions.",
						},
						"sp_entity_id": datasource.StringAttribute{
							Computed:    true,
							Description: "The unique identifier for the Service Provider (SP) entity that is used for SAML authentication. This value is typically provided by the SP.",
						},
						"subject_key": datasource.StringAttribute{
							Computed:    true,
							Description: "Optional. Specifies the attribute in the SAML response where the subject identifier is stored. If not configured, the NameID attribute is used by default.",
						},
					}},
				},
			},
		},
		Validators: []validator.Set{setvalidator.SizeAtMost(1)},
	}
}

// tfoUserConfig Opensearch user configurable settings
type tfoUserConfig struct {
	AdditionalBackupRegions            types.Set    `tfsdk:"additional_backup_regions"`
	CustomDomain                       types.String `tfsdk:"custom_domain"`
	DisableReplicationFactorAdjustment types.Bool   `tfsdk:"disable_replication_factor_adjustment"`
	IndexPatterns                      types.Set    `tfsdk:"index_patterns"`
	IndexTemplate                      types.Set    `tfsdk:"index_template"`
	IpFilter                           types.Set    `tfsdk:"ip_filter"`
	KeepIndexRefreshInterval           types.Bool   `tfsdk:"keep_index_refresh_interval"`
	MaxIndexCount                      types.Int64  `tfsdk:"max_index_count"`
	Openid                             types.Set    `tfsdk:"openid"`
	Opensearch                         types.Set    `tfsdk:"opensearch"`
	OpensearchDashboards               types.Set    `tfsdk:"opensearch_dashboards"`
	OpensearchVersion                  types.String `tfsdk:"opensearch_version"`
	PrivateAccess                      types.Set    `tfsdk:"private_access"`
	PrivatelinkAccess                  types.Set    `tfsdk:"privatelink_access"`
	ProjectToForkFrom                  types.String `tfsdk:"project_to_fork_from"`
	PublicAccess                       types.Set    `tfsdk:"public_access"`
	RecoveryBasebackupName             types.String `tfsdk:"recovery_basebackup_name"`
	Saml                               types.Set    `tfsdk:"saml"`
	ServiceToForkFrom                  types.String `tfsdk:"service_to_fork_from"`
	StaticIps                          types.Bool   `tfsdk:"static_ips"`
}

// dtoUserConfig request/response object
type dtoUserConfig struct {
	AdditionalBackupRegions            []string                 `groups:"create,update" json:"additional_backup_regions,omitempty"`
	CustomDomain                       *string                  `groups:"create,update" json:"custom_domain,omitempty"`
	DisableReplicationFactorAdjustment *bool                    `groups:"create,update" json:"disable_replication_factor_adjustment,omitempty"`
	IndexPatterns                      []*dtoIndexPatterns      `groups:"create,update" json:"index_patterns,omitempty"`
	IndexTemplate                      *dtoIndexTemplate        `groups:"create,update" json:"index_template,omitempty"`
	IpFilter                           []*dtoIpFilter           `groups:"create,update" json:"ip_filter,omitempty"`
	KeepIndexRefreshInterval           *bool                    `groups:"create,update" json:"keep_index_refresh_interval,omitempty"`
	MaxIndexCount                      *int64                   `groups:"create,update" json:"max_index_count,omitempty"`
	Openid                             *dtoOpenid               `groups:"create,update" json:"openid,omitempty"`
	Opensearch                         *dtoOpensearch           `groups:"create,update" json:"opensearch,omitempty"`
	OpensearchDashboards               *dtoOpensearchDashboards `groups:"create,update" json:"opensearch_dashboards,omitempty"`
	OpensearchVersion                  *string                  `groups:"create,update" json:"opensearch_version,omitempty"`
	PrivateAccess                      *dtoPrivateAccess        `groups:"create,update" json:"private_access,omitempty"`
	PrivatelinkAccess                  *dtoPrivatelinkAccess    `groups:"create,update" json:"privatelink_access,omitempty"`
	ProjectToForkFrom                  *string                  `groups:"create" json:"project_to_fork_from,omitempty"`
	PublicAccess                       *dtoPublicAccess         `groups:"create,update" json:"public_access,omitempty"`
	RecoveryBasebackupName             *string                  `groups:"create,update" json:"recovery_basebackup_name,omitempty"`
	Saml                               *dtoSaml                 `groups:"create,update" json:"saml,omitempty"`
	ServiceToForkFrom                  *string                  `groups:"create" json:"service_to_fork_from,omitempty"`
	StaticIps                          *bool                    `groups:"create,update" json:"static_ips,omitempty"`
}

// expandUserConfig expands tf object into dto object
func expandUserConfig(ctx context.Context, diags diag.Diagnostics, o *tfoUserConfig) *dtoUserConfig {
	additionalBackupRegionsVar := schemautil.ExpandSet[string](ctx, diags, o.AdditionalBackupRegions)
	if diags.HasError() {
		return nil
	}
	indexPatternsVar := schemautil.ExpandSetNested(ctx, diags, expandIndexPatterns, o.IndexPatterns)
	if diags.HasError() {
		return nil
	}
	indexTemplateVar := schemautil.ExpandSetBlockNested(ctx, diags, expandIndexTemplate, o.IndexTemplate)
	if diags.HasError() {
		return nil
	}
	ipFilterVar := schemautil.ExpandSetNested(ctx, diags, expandIpFilter, o.IpFilter)
	if diags.HasError() {
		return nil
	}
	openidVar := schemautil.ExpandSetBlockNested(ctx, diags, expandOpenid, o.Openid)
	if diags.HasError() {
		return nil
	}
	opensearchVar := schemautil.ExpandSetBlockNested(ctx, diags, expandOpensearch, o.Opensearch)
	if diags.HasError() {
		return nil
	}
	opensearchDashboardsVar := schemautil.ExpandSetBlockNested(ctx, diags, expandOpensearchDashboards, o.OpensearchDashboards)
	if diags.HasError() {
		return nil
	}
	privateAccessVar := schemautil.ExpandSetBlockNested(ctx, diags, expandPrivateAccess, o.PrivateAccess)
	if diags.HasError() {
		return nil
	}
	privatelinkAccessVar := schemautil.ExpandSetBlockNested(ctx, diags, expandPrivatelinkAccess, o.PrivatelinkAccess)
	if diags.HasError() {
		return nil
	}
	publicAccessVar := schemautil.ExpandSetBlockNested(ctx, diags, expandPublicAccess, o.PublicAccess)
	if diags.HasError() {
		return nil
	}
	samlVar := schemautil.ExpandSetBlockNested(ctx, diags, expandSaml, o.Saml)
	if diags.HasError() {
		return nil
	}
	return &dtoUserConfig{
		AdditionalBackupRegions:            additionalBackupRegionsVar,
		CustomDomain:                       schemautil.ValueStringPointer(o.CustomDomain),
		DisableReplicationFactorAdjustment: schemautil.ValueBoolPointer(o.DisableReplicationFactorAdjustment),
		IndexPatterns:                      indexPatternsVar,
		IndexTemplate:                      indexTemplateVar,
		IpFilter:                           ipFilterVar,
		KeepIndexRefreshInterval:           schemautil.ValueBoolPointer(o.KeepIndexRefreshInterval),
		MaxIndexCount:                      schemautil.ValueInt64Pointer(o.MaxIndexCount),
		Openid:                             openidVar,
		Opensearch:                         opensearchVar,
		OpensearchDashboards:               opensearchDashboardsVar,
		OpensearchVersion:                  schemautil.ValueStringPointer(o.OpensearchVersion),
		PrivateAccess:                      privateAccessVar,
		PrivatelinkAccess:                  privatelinkAccessVar,
		ProjectToForkFrom:                  schemautil.ValueStringPointer(o.ProjectToForkFrom),
		PublicAccess:                       publicAccessVar,
		RecoveryBasebackupName:             schemautil.ValueStringPointer(o.RecoveryBasebackupName),
		Saml:                               samlVar,
		ServiceToForkFrom:                  schemautil.ValueStringPointer(o.ServiceToForkFrom),
		StaticIps:                          schemautil.ValueBoolPointer(o.StaticIps),
	}
}

// flattenUserConfig flattens dto object into tf object
func flattenUserConfig(ctx context.Context, diags diag.Diagnostics, o *dtoUserConfig) *tfoUserConfig {
	additionalBackupRegionsVar, d := types.SetValueFrom(ctx, types.StringType, o.AdditionalBackupRegions)
	diags.Append(d...)
	if diags.HasError() {
		return nil
	}
	indexPatternsVar := schemautil.FlattenSetNested(ctx, diags, flattenIndexPatterns, o.IndexPatterns, indexPatternsAttrs)
	if diags.HasError() {
		return nil
	}
	indexTemplateVar := schemautil.FlattenSetBlockNested(ctx, diags, flattenIndexTemplate, o.IndexTemplate, indexTemplateAttrs)
	if diags.HasError() {
		return nil
	}
	ipFilterVar := schemautil.FlattenSetNested(ctx, diags, flattenIpFilter, o.IpFilter, ipFilterAttrs)
	if diags.HasError() {
		return nil
	}
	openidVar := schemautil.FlattenSetBlockNested(ctx, diags, flattenOpenid, o.Openid, openidAttrs)
	if diags.HasError() {
		return nil
	}
	opensearchVar := schemautil.FlattenSetBlockNested(ctx, diags, flattenOpensearch, o.Opensearch, opensearchAttrs)
	if diags.HasError() {
		return nil
	}
	opensearchDashboardsVar := schemautil.FlattenSetBlockNested(ctx, diags, flattenOpensearchDashboards, o.OpensearchDashboards, opensearchDashboardsAttrs)
	if diags.HasError() {
		return nil
	}
	privateAccessVar := schemautil.FlattenSetBlockNested(ctx, diags, flattenPrivateAccess, o.PrivateAccess, privateAccessAttrs)
	if diags.HasError() {
		return nil
	}
	privatelinkAccessVar := schemautil.FlattenSetBlockNested(ctx, diags, flattenPrivatelinkAccess, o.PrivatelinkAccess, privatelinkAccessAttrs)
	if diags.HasError() {
		return nil
	}
	publicAccessVar := schemautil.FlattenSetBlockNested(ctx, diags, flattenPublicAccess, o.PublicAccess, publicAccessAttrs)
	if diags.HasError() {
		return nil
	}
	samlVar := schemautil.FlattenSetBlockNested(ctx, diags, flattenSaml, o.Saml, samlAttrs)
	if diags.HasError() {
		return nil
	}
	return &tfoUserConfig{
		AdditionalBackupRegions:            additionalBackupRegionsVar,
		CustomDomain:                       types.StringPointerValue(o.CustomDomain),
		DisableReplicationFactorAdjustment: types.BoolPointerValue(o.DisableReplicationFactorAdjustment),
		IndexPatterns:                      indexPatternsVar,
		IndexTemplate:                      indexTemplateVar,
		IpFilter:                           ipFilterVar,
		KeepIndexRefreshInterval:           types.BoolPointerValue(o.KeepIndexRefreshInterval),
		MaxIndexCount:                      types.Int64PointerValue(o.MaxIndexCount),
		Openid:                             openidVar,
		Opensearch:                         opensearchVar,
		OpensearchDashboards:               opensearchDashboardsVar,
		OpensearchVersion:                  types.StringPointerValue(o.OpensearchVersion),
		PrivateAccess:                      privateAccessVar,
		PrivatelinkAccess:                  privatelinkAccessVar,
		ProjectToForkFrom:                  types.StringPointerValue(o.ProjectToForkFrom),
		PublicAccess:                       publicAccessVar,
		RecoveryBasebackupName:             types.StringPointerValue(o.RecoveryBasebackupName),
		Saml:                               samlVar,
		ServiceToForkFrom:                  types.StringPointerValue(o.ServiceToForkFrom),
		StaticIps:                          types.BoolPointerValue(o.StaticIps),
	}
}

var userConfigAttrs = map[string]attr.Type{
	"additional_backup_regions":             types.SetType{ElemType: types.StringType},
	"custom_domain":                         types.StringType,
	"disable_replication_factor_adjustment": types.BoolType,
	"index_patterns":                        types.SetType{ElemType: types.ObjectType{AttrTypes: indexPatternsAttrs}},
	"index_template":                        types.SetType{ElemType: types.ObjectType{AttrTypes: indexTemplateAttrs}},
	"ip_filter":                             types.SetType{ElemType: types.ObjectType{AttrTypes: ipFilterAttrs}},
	"keep_index_refresh_interval":           types.BoolType,
	"max_index_count":                       types.Int64Type,
	"openid":                                types.SetType{ElemType: types.ObjectType{AttrTypes: openidAttrs}},
	"opensearch":                            types.SetType{ElemType: types.ObjectType{AttrTypes: opensearchAttrs}},
	"opensearch_dashboards":                 types.SetType{ElemType: types.ObjectType{AttrTypes: opensearchDashboardsAttrs}},
	"opensearch_version":                    types.StringType,
	"private_access":                        types.SetType{ElemType: types.ObjectType{AttrTypes: privateAccessAttrs}},
	"privatelink_access":                    types.SetType{ElemType: types.ObjectType{AttrTypes: privatelinkAccessAttrs}},
	"project_to_fork_from":                  types.StringType,
	"public_access":                         types.SetType{ElemType: types.ObjectType{AttrTypes: publicAccessAttrs}},
	"recovery_basebackup_name":              types.StringType,
	"saml":                                  types.SetType{ElemType: types.ObjectType{AttrTypes: samlAttrs}},
	"service_to_fork_from":                  types.StringType,
	"static_ips":                            types.BoolType,
}

// tfoIndexPatterns Allows you to create glob style patterns and set a max number of indexes matching this pattern you want to keep. Creating indexes exceeding this value will cause the oldest one to get deleted. You could for example create a pattern looking like 'logs.?' and then create index logs.1, logs.2 etc, it will delete logs.1 once you create logs.6. Do note 'logs.?' does not apply to logs.10. Note: Setting max_index_count to 0 will do nothing and the pattern gets ignored
type tfoIndexPatterns struct {
	MaxIndexCount    types.Int64  `tfsdk:"max_index_count"`
	Pattern          types.String `tfsdk:"pattern"`
	SortingAlgorithm types.String `tfsdk:"sorting_algorithm"`
}

// dtoIndexPatterns request/response object
type dtoIndexPatterns struct {
	MaxIndexCount    int64   `groups:"create,update" json:"max_index_count"`
	Pattern          string  `groups:"create,update" json:"pattern"`
	SortingAlgorithm *string `groups:"create,update" json:"sorting_algorithm,omitempty"`
}

// expandIndexPatterns expands tf object into dto object
func expandIndexPatterns(ctx context.Context, diags diag.Diagnostics, o *tfoIndexPatterns) *dtoIndexPatterns {
	return &dtoIndexPatterns{
		MaxIndexCount:    o.MaxIndexCount.ValueInt64(),
		Pattern:          o.Pattern.ValueString(),
		SortingAlgorithm: schemautil.ValueStringPointer(o.SortingAlgorithm),
	}
}

// flattenIndexPatterns flattens dto object into tf object
func flattenIndexPatterns(ctx context.Context, diags diag.Diagnostics, o *dtoIndexPatterns) *tfoIndexPatterns {
	return &tfoIndexPatterns{
		MaxIndexCount:    types.Int64Value(o.MaxIndexCount),
		Pattern:          types.StringValue(o.Pattern),
		SortingAlgorithm: types.StringPointerValue(o.SortingAlgorithm),
	}
}

var indexPatternsAttrs = map[string]attr.Type{
	"max_index_count":   types.Int64Type,
	"pattern":           types.StringType,
	"sorting_algorithm": types.StringType,
}

// tfoIndexTemplate Template settings for all new indexes
type tfoIndexTemplate struct {
	MappingNestedObjectsLimit types.Int64 `tfsdk:"mapping_nested_objects_limit"`
	NumberOfReplicas          types.Int64 `tfsdk:"number_of_replicas"`
	NumberOfShards            types.Int64 `tfsdk:"number_of_shards"`
}

// dtoIndexTemplate request/response object
type dtoIndexTemplate struct {
	MappingNestedObjectsLimit *int64 `groups:"create,update" json:"mapping_nested_objects_limit,omitempty"`
	NumberOfReplicas          *int64 `groups:"create,update" json:"number_of_replicas,omitempty"`
	NumberOfShards            *int64 `groups:"create,update" json:"number_of_shards,omitempty"`
}

// expandIndexTemplate expands tf object into dto object
func expandIndexTemplate(ctx context.Context, diags diag.Diagnostics, o *tfoIndexTemplate) *dtoIndexTemplate {
	return &dtoIndexTemplate{
		MappingNestedObjectsLimit: schemautil.ValueInt64Pointer(o.MappingNestedObjectsLimit),
		NumberOfReplicas:          schemautil.ValueInt64Pointer(o.NumberOfReplicas),
		NumberOfShards:            schemautil.ValueInt64Pointer(o.NumberOfShards),
	}
}

// flattenIndexTemplate flattens dto object into tf object
func flattenIndexTemplate(ctx context.Context, diags diag.Diagnostics, o *dtoIndexTemplate) *tfoIndexTemplate {
	return &tfoIndexTemplate{
		MappingNestedObjectsLimit: types.Int64PointerValue(o.MappingNestedObjectsLimit),
		NumberOfReplicas:          types.Int64PointerValue(o.NumberOfReplicas),
		NumberOfShards:            types.Int64PointerValue(o.NumberOfShards),
	}
}

var indexTemplateAttrs = map[string]attr.Type{
	"mapping_nested_objects_limit": types.Int64Type,
	"number_of_replicas":           types.Int64Type,
	"number_of_shards":             types.Int64Type,
}

// tfoIpFilter CIDR address block, either as a string, or in a dict with an optional description field
type tfoIpFilter struct {
	Description types.String `tfsdk:"description"`
	Network     types.String `tfsdk:"network"`
}

// dtoIpFilter request/response object
type dtoIpFilter struct {
	Description *string `groups:"create,update" json:"description,omitempty"`
	Network     string  `groups:"create,update" json:"network"`
}

func (d *dtoIpFilter) UnmarshalJSON(data []byte) error {
	var s string
	err := json.Unmarshal(data, &s)
	if err == nil {
		d.Network = s
		return nil
	}

	type obj dtoIpFilter
	o := &struct {
		Description *string `groups:"create,update" json:"description,omitempty"`
		Network     string  `groups:"create,update" json:"network"`
	}{}
	err = json.Unmarshal(data, o)
	if err != nil {
		return err
	}

	d.Description = o.Description
	d.Network = o.Network
	return nil
}

// expandIpFilter expands tf object into dto object
func expandIpFilter(ctx context.Context, diags diag.Diagnostics, o *tfoIpFilter) *dtoIpFilter {
	return &dtoIpFilter{
		Description: schemautil.ValueStringPointer(o.Description),
		Network:     o.Network.ValueString(),
	}
}

// flattenIpFilter flattens dto object into tf object
func flattenIpFilter(ctx context.Context, diags diag.Diagnostics, o *dtoIpFilter) *tfoIpFilter {
	return &tfoIpFilter{
		Description: types.StringPointerValue(o.Description),
		Network:     types.StringValue(o.Network),
	}
}

var ipFilterAttrs = map[string]attr.Type{
	"description": types.StringType,
	"network":     types.StringType,
}

// tfoOpenid OpenSearch OpenID Connect Configuration
type tfoOpenid struct {
	ClientId                     types.String `tfsdk:"client_id"`
	ClientSecret                 types.String `tfsdk:"client_secret"`
	ConnectUrl                   types.String `tfsdk:"connect_url"`
	Enabled                      types.Bool   `tfsdk:"enabled"`
	Header                       types.String `tfsdk:"header"`
	JwtHeader                    types.String `tfsdk:"jwt_header"`
	JwtUrlParameter              types.String `tfsdk:"jwt_url_parameter"`
	RefreshRateLimitCount        types.Int64  `tfsdk:"refresh_rate_limit_count"`
	RefreshRateLimitTimeWindowMs types.Int64  `tfsdk:"refresh_rate_limit_time_window_ms"`
	RolesKey                     types.String `tfsdk:"roles_key"`
	Scope                        types.String `tfsdk:"scope"`
	SubjectKey                   types.String `tfsdk:"subject_key"`
}

// dtoOpenid request/response object
type dtoOpenid struct {
	ClientId                     string  `groups:"create,update" json:"client_id"`
	ClientSecret                 string  `groups:"create,update" json:"client_secret"`
	ConnectUrl                   string  `groups:"create,update" json:"connect_url"`
	Enabled                      *bool   `groups:"create,update" json:"enabled,omitempty"`
	Header                       *string `groups:"create,update" json:"header,omitempty"`
	JwtHeader                    *string `groups:"create,update" json:"jwt_header,omitempty"`
	JwtUrlParameter              *string `groups:"create,update" json:"jwt_url_parameter,omitempty"`
	RefreshRateLimitCount        *int64  `groups:"create,update" json:"refresh_rate_limit_count,omitempty"`
	RefreshRateLimitTimeWindowMs *int64  `groups:"create,update" json:"refresh_rate_limit_time_window_ms,omitempty"`
	RolesKey                     *string `groups:"create,update" json:"roles_key,omitempty"`
	Scope                        *string `groups:"create,update" json:"scope,omitempty"`
	SubjectKey                   *string `groups:"create,update" json:"subject_key,omitempty"`
}

// expandOpenid expands tf object into dto object
func expandOpenid(ctx context.Context, diags diag.Diagnostics, o *tfoOpenid) *dtoOpenid {
	return &dtoOpenid{
		ClientId:                     o.ClientId.ValueString(),
		ClientSecret:                 o.ClientSecret.ValueString(),
		ConnectUrl:                   o.ConnectUrl.ValueString(),
		Enabled:                      schemautil.ValueBoolPointer(o.Enabled),
		Header:                       schemautil.ValueStringPointer(o.Header),
		JwtHeader:                    schemautil.ValueStringPointer(o.JwtHeader),
		JwtUrlParameter:              schemautil.ValueStringPointer(o.JwtUrlParameter),
		RefreshRateLimitCount:        schemautil.ValueInt64Pointer(o.RefreshRateLimitCount),
		RefreshRateLimitTimeWindowMs: schemautil.ValueInt64Pointer(o.RefreshRateLimitTimeWindowMs),
		RolesKey:                     schemautil.ValueStringPointer(o.RolesKey),
		Scope:                        schemautil.ValueStringPointer(o.Scope),
		SubjectKey:                   schemautil.ValueStringPointer(o.SubjectKey),
	}
}

// flattenOpenid flattens dto object into tf object
func flattenOpenid(ctx context.Context, diags diag.Diagnostics, o *dtoOpenid) *tfoOpenid {
	return &tfoOpenid{
		ClientId:                     types.StringValue(o.ClientId),
		ClientSecret:                 types.StringValue(o.ClientSecret),
		ConnectUrl:                   types.StringValue(o.ConnectUrl),
		Enabled:                      types.BoolPointerValue(o.Enabled),
		Header:                       types.StringPointerValue(o.Header),
		JwtHeader:                    types.StringPointerValue(o.JwtHeader),
		JwtUrlParameter:              types.StringPointerValue(o.JwtUrlParameter),
		RefreshRateLimitCount:        types.Int64PointerValue(o.RefreshRateLimitCount),
		RefreshRateLimitTimeWindowMs: types.Int64PointerValue(o.RefreshRateLimitTimeWindowMs),
		RolesKey:                     types.StringPointerValue(o.RolesKey),
		Scope:                        types.StringPointerValue(o.Scope),
		SubjectKey:                   types.StringPointerValue(o.SubjectKey),
	}
}

var openidAttrs = map[string]attr.Type{
	"client_id":                         types.StringType,
	"client_secret":                     types.StringType,
	"connect_url":                       types.StringType,
	"enabled":                           types.BoolType,
	"header":                            types.StringType,
	"jwt_header":                        types.StringType,
	"jwt_url_parameter":                 types.StringType,
	"refresh_rate_limit_count":          types.Int64Type,
	"refresh_rate_limit_time_window_ms": types.Int64Type,
	"roles_key":                         types.StringType,
	"scope":                             types.StringType,
	"subject_key":                       types.StringType,
}

// tfoOpensearch OpenSearch settings
type tfoOpensearch struct {
	ActionAutoCreateIndexEnabled                     types.Bool   `tfsdk:"action_auto_create_index_enabled"`
	ActionDestructiveRequiresName                    types.Bool   `tfsdk:"action_destructive_requires_name"`
	AuthFailureListeners                             types.Set    `tfsdk:"auth_failure_listeners"`
	ClusterMaxShardsPerNode                          types.Int64  `tfsdk:"cluster_max_shards_per_node"`
	ClusterRoutingAllocationNodeConcurrentRecoveries types.Int64  `tfsdk:"cluster_routing_allocation_node_concurrent_recoveries"`
	EmailSenderName                                  types.String `tfsdk:"email_sender_name"`
	EmailSenderPassword                              types.String `tfsdk:"email_sender_password"`
	EmailSenderUsername                              types.String `tfsdk:"email_sender_username"`
	HttpMaxContentLength                             types.Int64  `tfsdk:"http_max_content_length"`
	HttpMaxHeaderSize                                types.Int64  `tfsdk:"http_max_header_size"`
	HttpMaxInitialLineLength                         types.Int64  `tfsdk:"http_max_initial_line_length"`
	IndicesFielddataCacheSize                        types.Int64  `tfsdk:"indices_fielddata_cache_size"`
	IndicesMemoryIndexBufferSize                     types.Int64  `tfsdk:"indices_memory_index_buffer_size"`
	IndicesQueriesCacheSize                          types.Int64  `tfsdk:"indices_queries_cache_size"`
	IndicesQueryBoolMaxClauseCount                   types.Int64  `tfsdk:"indices_query_bool_max_clause_count"`
	IndicesRecoveryMaxBytesPerSec                    types.Int64  `tfsdk:"indices_recovery_max_bytes_per_sec"`
	IndicesRecoveryMaxConcurrentFileChunks           types.Int64  `tfsdk:"indices_recovery_max_concurrent_file_chunks"`
	IsmEnabled                                       types.Bool   `tfsdk:"ism_enabled"`
	IsmHistoryEnabled                                types.Bool   `tfsdk:"ism_history_enabled"`
	IsmHistoryMaxAge                                 types.Int64  `tfsdk:"ism_history_max_age"`
	IsmHistoryMaxDocs                                types.Int64  `tfsdk:"ism_history_max_docs"`
	IsmHistoryRolloverCheckPeriod                    types.Int64  `tfsdk:"ism_history_rollover_check_period"`
	IsmHistoryRolloverRetentionPeriod                types.Int64  `tfsdk:"ism_history_rollover_retention_period"`
	OverrideMainResponseVersion                      types.Bool   `tfsdk:"override_main_response_version"`
	ReindexRemoteWhitelist                           types.Set    `tfsdk:"reindex_remote_whitelist"`
	ScriptMaxCompilationsRate                        types.String `tfsdk:"script_max_compilations_rate"`
	SearchMaxBuckets                                 types.Int64  `tfsdk:"search_max_buckets"`
	ThreadPoolAnalyzeQueueSize                       types.Int64  `tfsdk:"thread_pool_analyze_queue_size"`
	ThreadPoolAnalyzeSize                            types.Int64  `tfsdk:"thread_pool_analyze_size"`
	ThreadPoolForceMergeSize                         types.Int64  `tfsdk:"thread_pool_force_merge_size"`
	ThreadPoolGetQueueSize                           types.Int64  `tfsdk:"thread_pool_get_queue_size"`
	ThreadPoolGetSize                                types.Int64  `tfsdk:"thread_pool_get_size"`
	ThreadPoolSearchQueueSize                        types.Int64  `tfsdk:"thread_pool_search_queue_size"`
	ThreadPoolSearchSize                             types.Int64  `tfsdk:"thread_pool_search_size"`
	ThreadPoolSearchThrottledQueueSize               types.Int64  `tfsdk:"thread_pool_search_throttled_queue_size"`
	ThreadPoolSearchThrottledSize                    types.Int64  `tfsdk:"thread_pool_search_throttled_size"`
	ThreadPoolWriteQueueSize                         types.Int64  `tfsdk:"thread_pool_write_queue_size"`
	ThreadPoolWriteSize                              types.Int64  `tfsdk:"thread_pool_write_size"`
}

// dtoOpensearch request/response object
type dtoOpensearch struct {
	ActionAutoCreateIndexEnabled                     *bool                    `groups:"create,update" json:"action_auto_create_index_enabled,omitempty"`
	ActionDestructiveRequiresName                    *bool                    `groups:"create,update" json:"action_destructive_requires_name,omitempty"`
	AuthFailureListeners                             *dtoAuthFailureListeners `groups:"create,update" json:"auth_failure_listeners,omitempty"`
	ClusterMaxShardsPerNode                          *int64                   `groups:"create,update" json:"cluster_max_shards_per_node,omitempty"`
	ClusterRoutingAllocationNodeConcurrentRecoveries *int64                   `groups:"create,update" json:"cluster_routing_allocation_node_concurrent_recoveries,omitempty"`
	EmailSenderName                                  *string                  `groups:"create,update" json:"email_sender_name,omitempty"`
	EmailSenderPassword                              *string                  `groups:"create,update" json:"email_sender_password,omitempty"`
	EmailSenderUsername                              *string                  `groups:"create,update" json:"email_sender_username,omitempty"`
	HttpMaxContentLength                             *int64                   `groups:"create,update" json:"http_max_content_length,omitempty"`
	HttpMaxHeaderSize                                *int64                   `groups:"create,update" json:"http_max_header_size,omitempty"`
	HttpMaxInitialLineLength                         *int64                   `groups:"create,update" json:"http_max_initial_line_length,omitempty"`
	IndicesFielddataCacheSize                        *int64                   `groups:"create,update" json:"indices_fielddata_cache_size,omitempty"`
	IndicesMemoryIndexBufferSize                     *int64                   `groups:"create,update" json:"indices_memory_index_buffer_size,omitempty"`
	IndicesQueriesCacheSize                          *int64                   `groups:"create,update" json:"indices_queries_cache_size,omitempty"`
	IndicesQueryBoolMaxClauseCount                   *int64                   `groups:"create,update" json:"indices_query_bool_max_clause_count,omitempty"`
	IndicesRecoveryMaxBytesPerSec                    *int64                   `groups:"create,update" json:"indices_recovery_max_bytes_per_sec,omitempty"`
	IndicesRecoveryMaxConcurrentFileChunks           *int64                   `groups:"create,update" json:"indices_recovery_max_concurrent_file_chunks,omitempty"`
	IsmEnabled                                       *bool                    `groups:"create,update" json:"ism_enabled,omitempty"`
	IsmHistoryEnabled                                *bool                    `groups:"create,update" json:"ism_history_enabled,omitempty"`
	IsmHistoryMaxAge                                 *int64                   `groups:"create,update" json:"ism_history_max_age,omitempty"`
	IsmHistoryMaxDocs                                *int64                   `groups:"create,update" json:"ism_history_max_docs,omitempty"`
	IsmHistoryRolloverCheckPeriod                    *int64                   `groups:"create,update" json:"ism_history_rollover_check_period,omitempty"`
	IsmHistoryRolloverRetentionPeriod                *int64                   `groups:"create,update" json:"ism_history_rollover_retention_period,omitempty"`
	OverrideMainResponseVersion                      *bool                    `groups:"create,update" json:"override_main_response_version,omitempty"`
	ReindexRemoteWhitelist                           []string                 `groups:"create,update" json:"reindex_remote_whitelist,omitempty"`
	ScriptMaxCompilationsRate                        *string                  `groups:"create,update" json:"script_max_compilations_rate,omitempty"`
	SearchMaxBuckets                                 *int64                   `groups:"create,update" json:"search_max_buckets,omitempty"`
	ThreadPoolAnalyzeQueueSize                       *int64                   `groups:"create,update" json:"thread_pool_analyze_queue_size,omitempty"`
	ThreadPoolAnalyzeSize                            *int64                   `groups:"create,update" json:"thread_pool_analyze_size,omitempty"`
	ThreadPoolForceMergeSize                         *int64                   `groups:"create,update" json:"thread_pool_force_merge_size,omitempty"`
	ThreadPoolGetQueueSize                           *int64                   `groups:"create,update" json:"thread_pool_get_queue_size,omitempty"`
	ThreadPoolGetSize                                *int64                   `groups:"create,update" json:"thread_pool_get_size,omitempty"`
	ThreadPoolSearchQueueSize                        *int64                   `groups:"create,update" json:"thread_pool_search_queue_size,omitempty"`
	ThreadPoolSearchSize                             *int64                   `groups:"create,update" json:"thread_pool_search_size,omitempty"`
	ThreadPoolSearchThrottledQueueSize               *int64                   `groups:"create,update" json:"thread_pool_search_throttled_queue_size,omitempty"`
	ThreadPoolSearchThrottledSize                    *int64                   `groups:"create,update" json:"thread_pool_search_throttled_size,omitempty"`
	ThreadPoolWriteQueueSize                         *int64                   `groups:"create,update" json:"thread_pool_write_queue_size,omitempty"`
	ThreadPoolWriteSize                              *int64                   `groups:"create,update" json:"thread_pool_write_size,omitempty"`
}

// expandOpensearch expands tf object into dto object
func expandOpensearch(ctx context.Context, diags diag.Diagnostics, o *tfoOpensearch) *dtoOpensearch {
	authFailureListenersVar := schemautil.ExpandSetBlockNested(ctx, diags, expandAuthFailureListeners, o.AuthFailureListeners)
	if diags.HasError() {
		return nil
	}
	reindexRemoteWhitelistVar := schemautil.ExpandSet[string](ctx, diags, o.ReindexRemoteWhitelist)
	if diags.HasError() {
		return nil
	}
	return &dtoOpensearch{
		ActionAutoCreateIndexEnabled:                     schemautil.ValueBoolPointer(o.ActionAutoCreateIndexEnabled),
		ActionDestructiveRequiresName:                    schemautil.ValueBoolPointer(o.ActionDestructiveRequiresName),
		AuthFailureListeners:                             authFailureListenersVar,
		ClusterMaxShardsPerNode:                          schemautil.ValueInt64Pointer(o.ClusterMaxShardsPerNode),
		ClusterRoutingAllocationNodeConcurrentRecoveries: schemautil.ValueInt64Pointer(o.ClusterRoutingAllocationNodeConcurrentRecoveries),
		EmailSenderName:                                  schemautil.ValueStringPointer(o.EmailSenderName),
		EmailSenderPassword:                              schemautil.ValueStringPointer(o.EmailSenderPassword),
		EmailSenderUsername:                              schemautil.ValueStringPointer(o.EmailSenderUsername),
		HttpMaxContentLength:                             schemautil.ValueInt64Pointer(o.HttpMaxContentLength),
		HttpMaxHeaderSize:                                schemautil.ValueInt64Pointer(o.HttpMaxHeaderSize),
		HttpMaxInitialLineLength:                         schemautil.ValueInt64Pointer(o.HttpMaxInitialLineLength),
		IndicesFielddataCacheSize:                        schemautil.ValueInt64Pointer(o.IndicesFielddataCacheSize),
		IndicesMemoryIndexBufferSize:                     schemautil.ValueInt64Pointer(o.IndicesMemoryIndexBufferSize),
		IndicesQueriesCacheSize:                          schemautil.ValueInt64Pointer(o.IndicesQueriesCacheSize),
		IndicesQueryBoolMaxClauseCount:                   schemautil.ValueInt64Pointer(o.IndicesQueryBoolMaxClauseCount),
		IndicesRecoveryMaxBytesPerSec:                    schemautil.ValueInt64Pointer(o.IndicesRecoveryMaxBytesPerSec),
		IndicesRecoveryMaxConcurrentFileChunks:           schemautil.ValueInt64Pointer(o.IndicesRecoveryMaxConcurrentFileChunks),
		IsmEnabled:                                       schemautil.ValueBoolPointer(o.IsmEnabled),
		IsmHistoryEnabled:                                schemautil.ValueBoolPointer(o.IsmHistoryEnabled),
		IsmHistoryMaxAge:                                 schemautil.ValueInt64Pointer(o.IsmHistoryMaxAge),
		IsmHistoryMaxDocs:                                schemautil.ValueInt64Pointer(o.IsmHistoryMaxDocs),
		IsmHistoryRolloverCheckPeriod:                    schemautil.ValueInt64Pointer(o.IsmHistoryRolloverCheckPeriod),
		IsmHistoryRolloverRetentionPeriod:                schemautil.ValueInt64Pointer(o.IsmHistoryRolloverRetentionPeriod),
		OverrideMainResponseVersion:                      schemautil.ValueBoolPointer(o.OverrideMainResponseVersion),
		ReindexRemoteWhitelist:                           reindexRemoteWhitelistVar,
		ScriptMaxCompilationsRate:                        schemautil.ValueStringPointer(o.ScriptMaxCompilationsRate),
		SearchMaxBuckets:                                 schemautil.ValueInt64Pointer(o.SearchMaxBuckets),
		ThreadPoolAnalyzeQueueSize:                       schemautil.ValueInt64Pointer(o.ThreadPoolAnalyzeQueueSize),
		ThreadPoolAnalyzeSize:                            schemautil.ValueInt64Pointer(o.ThreadPoolAnalyzeSize),
		ThreadPoolForceMergeSize:                         schemautil.ValueInt64Pointer(o.ThreadPoolForceMergeSize),
		ThreadPoolGetQueueSize:                           schemautil.ValueInt64Pointer(o.ThreadPoolGetQueueSize),
		ThreadPoolGetSize:                                schemautil.ValueInt64Pointer(o.ThreadPoolGetSize),
		ThreadPoolSearchQueueSize:                        schemautil.ValueInt64Pointer(o.ThreadPoolSearchQueueSize),
		ThreadPoolSearchSize:                             schemautil.ValueInt64Pointer(o.ThreadPoolSearchSize),
		ThreadPoolSearchThrottledQueueSize:               schemautil.ValueInt64Pointer(o.ThreadPoolSearchThrottledQueueSize),
		ThreadPoolSearchThrottledSize:                    schemautil.ValueInt64Pointer(o.ThreadPoolSearchThrottledSize),
		ThreadPoolWriteQueueSize:                         schemautil.ValueInt64Pointer(o.ThreadPoolWriteQueueSize),
		ThreadPoolWriteSize:                              schemautil.ValueInt64Pointer(o.ThreadPoolWriteSize),
	}
}

// flattenOpensearch flattens dto object into tf object
func flattenOpensearch(ctx context.Context, diags diag.Diagnostics, o *dtoOpensearch) *tfoOpensearch {
	authFailureListenersVar := schemautil.FlattenSetBlockNested(ctx, diags, flattenAuthFailureListeners, o.AuthFailureListeners, authFailureListenersAttrs)
	if diags.HasError() {
		return nil
	}
	reindexRemoteWhitelistVar, d := types.SetValueFrom(ctx, types.StringType, o.ReindexRemoteWhitelist)
	diags.Append(d...)
	if diags.HasError() {
		return nil
	}
	return &tfoOpensearch{
		ActionAutoCreateIndexEnabled:                     types.BoolPointerValue(o.ActionAutoCreateIndexEnabled),
		ActionDestructiveRequiresName:                    types.BoolPointerValue(o.ActionDestructiveRequiresName),
		AuthFailureListeners:                             authFailureListenersVar,
		ClusterMaxShardsPerNode:                          types.Int64PointerValue(o.ClusterMaxShardsPerNode),
		ClusterRoutingAllocationNodeConcurrentRecoveries: types.Int64PointerValue(o.ClusterRoutingAllocationNodeConcurrentRecoveries),
		EmailSenderName:                                  types.StringPointerValue(o.EmailSenderName),
		EmailSenderPassword:                              types.StringPointerValue(o.EmailSenderPassword),
		EmailSenderUsername:                              types.StringPointerValue(o.EmailSenderUsername),
		HttpMaxContentLength:                             types.Int64PointerValue(o.HttpMaxContentLength),
		HttpMaxHeaderSize:                                types.Int64PointerValue(o.HttpMaxHeaderSize),
		HttpMaxInitialLineLength:                         types.Int64PointerValue(o.HttpMaxInitialLineLength),
		IndicesFielddataCacheSize:                        types.Int64PointerValue(o.IndicesFielddataCacheSize),
		IndicesMemoryIndexBufferSize:                     types.Int64PointerValue(o.IndicesMemoryIndexBufferSize),
		IndicesQueriesCacheSize:                          types.Int64PointerValue(o.IndicesQueriesCacheSize),
		IndicesQueryBoolMaxClauseCount:                   types.Int64PointerValue(o.IndicesQueryBoolMaxClauseCount),
		IndicesRecoveryMaxBytesPerSec:                    types.Int64PointerValue(o.IndicesRecoveryMaxBytesPerSec),
		IndicesRecoveryMaxConcurrentFileChunks:           types.Int64PointerValue(o.IndicesRecoveryMaxConcurrentFileChunks),
		IsmEnabled:                                       types.BoolPointerValue(o.IsmEnabled),
		IsmHistoryEnabled:                                types.BoolPointerValue(o.IsmHistoryEnabled),
		IsmHistoryMaxAge:                                 types.Int64PointerValue(o.IsmHistoryMaxAge),
		IsmHistoryMaxDocs:                                types.Int64PointerValue(o.IsmHistoryMaxDocs),
		IsmHistoryRolloverCheckPeriod:                    types.Int64PointerValue(o.IsmHistoryRolloverCheckPeriod),
		IsmHistoryRolloverRetentionPeriod:                types.Int64PointerValue(o.IsmHistoryRolloverRetentionPeriod),
		OverrideMainResponseVersion:                      types.BoolPointerValue(o.OverrideMainResponseVersion),
		ReindexRemoteWhitelist:                           reindexRemoteWhitelistVar,
		ScriptMaxCompilationsRate:                        types.StringPointerValue(o.ScriptMaxCompilationsRate),
		SearchMaxBuckets:                                 types.Int64PointerValue(o.SearchMaxBuckets),
		ThreadPoolAnalyzeQueueSize:                       types.Int64PointerValue(o.ThreadPoolAnalyzeQueueSize),
		ThreadPoolAnalyzeSize:                            types.Int64PointerValue(o.ThreadPoolAnalyzeSize),
		ThreadPoolForceMergeSize:                         types.Int64PointerValue(o.ThreadPoolForceMergeSize),
		ThreadPoolGetQueueSize:                           types.Int64PointerValue(o.ThreadPoolGetQueueSize),
		ThreadPoolGetSize:                                types.Int64PointerValue(o.ThreadPoolGetSize),
		ThreadPoolSearchQueueSize:                        types.Int64PointerValue(o.ThreadPoolSearchQueueSize),
		ThreadPoolSearchSize:                             types.Int64PointerValue(o.ThreadPoolSearchSize),
		ThreadPoolSearchThrottledQueueSize:               types.Int64PointerValue(o.ThreadPoolSearchThrottledQueueSize),
		ThreadPoolSearchThrottledSize:                    types.Int64PointerValue(o.ThreadPoolSearchThrottledSize),
		ThreadPoolWriteQueueSize:                         types.Int64PointerValue(o.ThreadPoolWriteQueueSize),
		ThreadPoolWriteSize:                              types.Int64PointerValue(o.ThreadPoolWriteSize),
	}
}

var opensearchAttrs = map[string]attr.Type{
	"action_auto_create_index_enabled":                      types.BoolType,
	"action_destructive_requires_name":                      types.BoolType,
	"auth_failure_listeners":                                types.SetType{ElemType: types.ObjectType{AttrTypes: authFailureListenersAttrs}},
	"cluster_max_shards_per_node":                           types.Int64Type,
	"cluster_routing_allocation_node_concurrent_recoveries": types.Int64Type,
	"email_sender_name":                                     types.StringType,
	"email_sender_password":                                 types.StringType,
	"email_sender_username":                                 types.StringType,
	"http_max_content_length":                               types.Int64Type,
	"http_max_header_size":                                  types.Int64Type,
	"http_max_initial_line_length":                          types.Int64Type,
	"indices_fielddata_cache_size":                          types.Int64Type,
	"indices_memory_index_buffer_size":                      types.Int64Type,
	"indices_queries_cache_size":                            types.Int64Type,
	"indices_query_bool_max_clause_count":                   types.Int64Type,
	"indices_recovery_max_bytes_per_sec":                    types.Int64Type,
	"indices_recovery_max_concurrent_file_chunks":           types.Int64Type,
	"ism_enabled":                                           types.BoolType,
	"ism_history_enabled":                                   types.BoolType,
	"ism_history_max_age":                                   types.Int64Type,
	"ism_history_max_docs":                                  types.Int64Type,
	"ism_history_rollover_check_period":                     types.Int64Type,
	"ism_history_rollover_retention_period":                 types.Int64Type,
	"override_main_response_version":                        types.BoolType,
	"reindex_remote_whitelist":                              types.SetType{ElemType: types.StringType},
	"script_max_compilations_rate":                          types.StringType,
	"search_max_buckets":                                    types.Int64Type,
	"thread_pool_analyze_queue_size":                        types.Int64Type,
	"thread_pool_analyze_size":                              types.Int64Type,
	"thread_pool_force_merge_size":                          types.Int64Type,
	"thread_pool_get_queue_size":                            types.Int64Type,
	"thread_pool_get_size":                                  types.Int64Type,
	"thread_pool_search_queue_size":                         types.Int64Type,
	"thread_pool_search_size":                               types.Int64Type,
	"thread_pool_search_throttled_queue_size":               types.Int64Type,
	"thread_pool_search_throttled_size":                     types.Int64Type,
	"thread_pool_write_queue_size":                          types.Int64Type,
	"thread_pool_write_size":                                types.Int64Type,
}

// tfoAuthFailureListeners Opensearch Security Plugin Settings
type tfoAuthFailureListeners struct {
	InternalAuthenticationBackendLimiting types.Set `tfsdk:"internal_authentication_backend_limiting"`
	IpRateLimiting                        types.Set `tfsdk:"ip_rate_limiting"`
}

// dtoAuthFailureListeners request/response object
type dtoAuthFailureListeners struct {
	InternalAuthenticationBackendLimiting *dtoInternalAuthenticationBackendLimiting `groups:"create,update" json:"internal_authentication_backend_limiting,omitempty"`
	IpRateLimiting                        *dtoIpRateLimiting                        `groups:"create,update" json:"ip_rate_limiting,omitempty"`
}

// expandAuthFailureListeners expands tf object into dto object
func expandAuthFailureListeners(ctx context.Context, diags diag.Diagnostics, o *tfoAuthFailureListeners) *dtoAuthFailureListeners {
	internalAuthenticationBackendLimitingVar := schemautil.ExpandSetBlockNested(ctx, diags, expandInternalAuthenticationBackendLimiting, o.InternalAuthenticationBackendLimiting)
	if diags.HasError() {
		return nil
	}
	ipRateLimitingVar := schemautil.ExpandSetBlockNested(ctx, diags, expandIpRateLimiting, o.IpRateLimiting)
	if diags.HasError() {
		return nil
	}
	return &dtoAuthFailureListeners{
		InternalAuthenticationBackendLimiting: internalAuthenticationBackendLimitingVar,
		IpRateLimiting:                        ipRateLimitingVar,
	}
}

// flattenAuthFailureListeners flattens dto object into tf object
func flattenAuthFailureListeners(ctx context.Context, diags diag.Diagnostics, o *dtoAuthFailureListeners) *tfoAuthFailureListeners {
	internalAuthenticationBackendLimitingVar := schemautil.FlattenSetBlockNested(ctx, diags, flattenInternalAuthenticationBackendLimiting, o.InternalAuthenticationBackendLimiting, internalAuthenticationBackendLimitingAttrs)
	if diags.HasError() {
		return nil
	}
	ipRateLimitingVar := schemautil.FlattenSetBlockNested(ctx, diags, flattenIpRateLimiting, o.IpRateLimiting, ipRateLimitingAttrs)
	if diags.HasError() {
		return nil
	}
	return &tfoAuthFailureListeners{
		InternalAuthenticationBackendLimiting: internalAuthenticationBackendLimitingVar,
		IpRateLimiting:                        ipRateLimitingVar,
	}
}

var authFailureListenersAttrs = map[string]attr.Type{
	"internal_authentication_backend_limiting": types.SetType{ElemType: types.ObjectType{AttrTypes: internalAuthenticationBackendLimitingAttrs}},
	"ip_rate_limiting":                         types.SetType{ElemType: types.ObjectType{AttrTypes: ipRateLimitingAttrs}},
}

// tfoInternalAuthenticationBackendLimiting
type tfoInternalAuthenticationBackendLimiting struct {
	AllowedTries          types.Int64  `tfsdk:"allowed_tries"`
	AuthenticationBackend types.String `tfsdk:"authentication_backend"`
	BlockExpirySeconds    types.Int64  `tfsdk:"block_expiry_seconds"`
	MaxBlockedClients     types.Int64  `tfsdk:"max_blocked_clients"`
	MaxTrackedClients     types.Int64  `tfsdk:"max_tracked_clients"`
	TimeWindowSeconds     types.Int64  `tfsdk:"time_window_seconds"`
	Type                  types.String `tfsdk:"type"`
}

// dtoInternalAuthenticationBackendLimiting request/response object
type dtoInternalAuthenticationBackendLimiting struct {
	AllowedTries          *int64  `groups:"create,update" json:"allowed_tries,omitempty"`
	AuthenticationBackend *string `groups:"create,update" json:"authentication_backend,omitempty"`
	BlockExpirySeconds    *int64  `groups:"create,update" json:"block_expiry_seconds,omitempty"`
	MaxBlockedClients     *int64  `groups:"create,update" json:"max_blocked_clients,omitempty"`
	MaxTrackedClients     *int64  `groups:"create,update" json:"max_tracked_clients,omitempty"`
	TimeWindowSeconds     *int64  `groups:"create,update" json:"time_window_seconds,omitempty"`
	Type                  *string `groups:"create,update" json:"type,omitempty"`
}

// expandInternalAuthenticationBackendLimiting expands tf object into dto object
func expandInternalAuthenticationBackendLimiting(ctx context.Context, diags diag.Diagnostics, o *tfoInternalAuthenticationBackendLimiting) *dtoInternalAuthenticationBackendLimiting {
	return &dtoInternalAuthenticationBackendLimiting{
		AllowedTries:          schemautil.ValueInt64Pointer(o.AllowedTries),
		AuthenticationBackend: schemautil.ValueStringPointer(o.AuthenticationBackend),
		BlockExpirySeconds:    schemautil.ValueInt64Pointer(o.BlockExpirySeconds),
		MaxBlockedClients:     schemautil.ValueInt64Pointer(o.MaxBlockedClients),
		MaxTrackedClients:     schemautil.ValueInt64Pointer(o.MaxTrackedClients),
		TimeWindowSeconds:     schemautil.ValueInt64Pointer(o.TimeWindowSeconds),
		Type:                  schemautil.ValueStringPointer(o.Type),
	}
}

// flattenInternalAuthenticationBackendLimiting flattens dto object into tf object
func flattenInternalAuthenticationBackendLimiting(ctx context.Context, diags diag.Diagnostics, o *dtoInternalAuthenticationBackendLimiting) *tfoInternalAuthenticationBackendLimiting {
	return &tfoInternalAuthenticationBackendLimiting{
		AllowedTries:          types.Int64PointerValue(o.AllowedTries),
		AuthenticationBackend: types.StringPointerValue(o.AuthenticationBackend),
		BlockExpirySeconds:    types.Int64PointerValue(o.BlockExpirySeconds),
		MaxBlockedClients:     types.Int64PointerValue(o.MaxBlockedClients),
		MaxTrackedClients:     types.Int64PointerValue(o.MaxTrackedClients),
		TimeWindowSeconds:     types.Int64PointerValue(o.TimeWindowSeconds),
		Type:                  types.StringPointerValue(o.Type),
	}
}

var internalAuthenticationBackendLimitingAttrs = map[string]attr.Type{
	"allowed_tries":          types.Int64Type,
	"authentication_backend": types.StringType,
	"block_expiry_seconds":   types.Int64Type,
	"max_blocked_clients":    types.Int64Type,
	"max_tracked_clients":    types.Int64Type,
	"time_window_seconds":    types.Int64Type,
	"type":                   types.StringType,
}

// tfoIpRateLimiting IP address rate limiting settings
type tfoIpRateLimiting struct {
	AllowedTries       types.Int64  `tfsdk:"allowed_tries"`
	BlockExpirySeconds types.Int64  `tfsdk:"block_expiry_seconds"`
	MaxBlockedClients  types.Int64  `tfsdk:"max_blocked_clients"`
	MaxTrackedClients  types.Int64  `tfsdk:"max_tracked_clients"`
	TimeWindowSeconds  types.Int64  `tfsdk:"time_window_seconds"`
	Type               types.String `tfsdk:"type"`
}

// dtoIpRateLimiting request/response object
type dtoIpRateLimiting struct {
	AllowedTries       *int64  `groups:"create,update" json:"allowed_tries,omitempty"`
	BlockExpirySeconds *int64  `groups:"create,update" json:"block_expiry_seconds,omitempty"`
	MaxBlockedClients  *int64  `groups:"create,update" json:"max_blocked_clients,omitempty"`
	MaxTrackedClients  *int64  `groups:"create,update" json:"max_tracked_clients,omitempty"`
	TimeWindowSeconds  *int64  `groups:"create,update" json:"time_window_seconds,omitempty"`
	Type               *string `groups:"create,update" json:"type,omitempty"`
}

// expandIpRateLimiting expands tf object into dto object
func expandIpRateLimiting(ctx context.Context, diags diag.Diagnostics, o *tfoIpRateLimiting) *dtoIpRateLimiting {
	return &dtoIpRateLimiting{
		AllowedTries:       schemautil.ValueInt64Pointer(o.AllowedTries),
		BlockExpirySeconds: schemautil.ValueInt64Pointer(o.BlockExpirySeconds),
		MaxBlockedClients:  schemautil.ValueInt64Pointer(o.MaxBlockedClients),
		MaxTrackedClients:  schemautil.ValueInt64Pointer(o.MaxTrackedClients),
		TimeWindowSeconds:  schemautil.ValueInt64Pointer(o.TimeWindowSeconds),
		Type:               schemautil.ValueStringPointer(o.Type),
	}
}

// flattenIpRateLimiting flattens dto object into tf object
func flattenIpRateLimiting(ctx context.Context, diags diag.Diagnostics, o *dtoIpRateLimiting) *tfoIpRateLimiting {
	return &tfoIpRateLimiting{
		AllowedTries:       types.Int64PointerValue(o.AllowedTries),
		BlockExpirySeconds: types.Int64PointerValue(o.BlockExpirySeconds),
		MaxBlockedClients:  types.Int64PointerValue(o.MaxBlockedClients),
		MaxTrackedClients:  types.Int64PointerValue(o.MaxTrackedClients),
		TimeWindowSeconds:  types.Int64PointerValue(o.TimeWindowSeconds),
		Type:               types.StringPointerValue(o.Type),
	}
}

var ipRateLimitingAttrs = map[string]attr.Type{
	"allowed_tries":        types.Int64Type,
	"block_expiry_seconds": types.Int64Type,
	"max_blocked_clients":  types.Int64Type,
	"max_tracked_clients":  types.Int64Type,
	"time_window_seconds":  types.Int64Type,
	"type":                 types.StringType,
}

// tfoOpensearchDashboards OpenSearch Dashboards settings
type tfoOpensearchDashboards struct {
	Enabled                  types.Bool  `tfsdk:"enabled"`
	MaxOldSpaceSize          types.Int64 `tfsdk:"max_old_space_size"`
	OpensearchRequestTimeout types.Int64 `tfsdk:"opensearch_request_timeout"`
}

// dtoOpensearchDashboards request/response object
type dtoOpensearchDashboards struct {
	Enabled                  *bool  `groups:"create,update" json:"enabled,omitempty"`
	MaxOldSpaceSize          *int64 `groups:"create,update" json:"max_old_space_size,omitempty"`
	OpensearchRequestTimeout *int64 `groups:"create,update" json:"opensearch_request_timeout,omitempty"`
}

// expandOpensearchDashboards expands tf object into dto object
func expandOpensearchDashboards(ctx context.Context, diags diag.Diagnostics, o *tfoOpensearchDashboards) *dtoOpensearchDashboards {
	return &dtoOpensearchDashboards{
		Enabled:                  schemautil.ValueBoolPointer(o.Enabled),
		MaxOldSpaceSize:          schemautil.ValueInt64Pointer(o.MaxOldSpaceSize),
		OpensearchRequestTimeout: schemautil.ValueInt64Pointer(o.OpensearchRequestTimeout),
	}
}

// flattenOpensearchDashboards flattens dto object into tf object
func flattenOpensearchDashboards(ctx context.Context, diags diag.Diagnostics, o *dtoOpensearchDashboards) *tfoOpensearchDashboards {
	return &tfoOpensearchDashboards{
		Enabled:                  types.BoolPointerValue(o.Enabled),
		MaxOldSpaceSize:          types.Int64PointerValue(o.MaxOldSpaceSize),
		OpensearchRequestTimeout: types.Int64PointerValue(o.OpensearchRequestTimeout),
	}
}

var opensearchDashboardsAttrs = map[string]attr.Type{
	"enabled":                    types.BoolType,
	"max_old_space_size":         types.Int64Type,
	"opensearch_request_timeout": types.Int64Type,
}

// tfoPrivateAccess Allow access to selected service ports from private networks
type tfoPrivateAccess struct {
	Opensearch           types.Bool `tfsdk:"opensearch"`
	OpensearchDashboards types.Bool `tfsdk:"opensearch_dashboards"`
	Prometheus           types.Bool `tfsdk:"prometheus"`
}

// dtoPrivateAccess request/response object
type dtoPrivateAccess struct {
	Opensearch           *bool `groups:"create,update" json:"opensearch,omitempty"`
	OpensearchDashboards *bool `groups:"create,update" json:"opensearch_dashboards,omitempty"`
	Prometheus           *bool `groups:"create,update" json:"prometheus,omitempty"`
}

// expandPrivateAccess expands tf object into dto object
func expandPrivateAccess(ctx context.Context, diags diag.Diagnostics, o *tfoPrivateAccess) *dtoPrivateAccess {
	return &dtoPrivateAccess{
		Opensearch:           schemautil.ValueBoolPointer(o.Opensearch),
		OpensearchDashboards: schemautil.ValueBoolPointer(o.OpensearchDashboards),
		Prometheus:           schemautil.ValueBoolPointer(o.Prometheus),
	}
}

// flattenPrivateAccess flattens dto object into tf object
func flattenPrivateAccess(ctx context.Context, diags diag.Diagnostics, o *dtoPrivateAccess) *tfoPrivateAccess {
	return &tfoPrivateAccess{
		Opensearch:           types.BoolPointerValue(o.Opensearch),
		OpensearchDashboards: types.BoolPointerValue(o.OpensearchDashboards),
		Prometheus:           types.BoolPointerValue(o.Prometheus),
	}
}

var privateAccessAttrs = map[string]attr.Type{
	"opensearch":            types.BoolType,
	"opensearch_dashboards": types.BoolType,
	"prometheus":            types.BoolType,
}

// tfoPrivatelinkAccess Allow access to selected service components through Privatelink
type tfoPrivatelinkAccess struct {
	Opensearch           types.Bool `tfsdk:"opensearch"`
	OpensearchDashboards types.Bool `tfsdk:"opensearch_dashboards"`
	Prometheus           types.Bool `tfsdk:"prometheus"`
}

// dtoPrivatelinkAccess request/response object
type dtoPrivatelinkAccess struct {
	Opensearch           *bool `groups:"create,update" json:"opensearch,omitempty"`
	OpensearchDashboards *bool `groups:"create,update" json:"opensearch_dashboards,omitempty"`
	Prometheus           *bool `groups:"create,update" json:"prometheus,omitempty"`
}

// expandPrivatelinkAccess expands tf object into dto object
func expandPrivatelinkAccess(ctx context.Context, diags diag.Diagnostics, o *tfoPrivatelinkAccess) *dtoPrivatelinkAccess {
	return &dtoPrivatelinkAccess{
		Opensearch:           schemautil.ValueBoolPointer(o.Opensearch),
		OpensearchDashboards: schemautil.ValueBoolPointer(o.OpensearchDashboards),
		Prometheus:           schemautil.ValueBoolPointer(o.Prometheus),
	}
}

// flattenPrivatelinkAccess flattens dto object into tf object
func flattenPrivatelinkAccess(ctx context.Context, diags diag.Diagnostics, o *dtoPrivatelinkAccess) *tfoPrivatelinkAccess {
	return &tfoPrivatelinkAccess{
		Opensearch:           types.BoolPointerValue(o.Opensearch),
		OpensearchDashboards: types.BoolPointerValue(o.OpensearchDashboards),
		Prometheus:           types.BoolPointerValue(o.Prometheus),
	}
}

var privatelinkAccessAttrs = map[string]attr.Type{
	"opensearch":            types.BoolType,
	"opensearch_dashboards": types.BoolType,
	"prometheus":            types.BoolType,
}

// tfoPublicAccess Allow access to selected service ports from the public Internet
type tfoPublicAccess struct {
	Opensearch           types.Bool `tfsdk:"opensearch"`
	OpensearchDashboards types.Bool `tfsdk:"opensearch_dashboards"`
	Prometheus           types.Bool `tfsdk:"prometheus"`
}

// dtoPublicAccess request/response object
type dtoPublicAccess struct {
	Opensearch           *bool `groups:"create,update" json:"opensearch,omitempty"`
	OpensearchDashboards *bool `groups:"create,update" json:"opensearch_dashboards,omitempty"`
	Prometheus           *bool `groups:"create,update" json:"prometheus,omitempty"`
}

// expandPublicAccess expands tf object into dto object
func expandPublicAccess(ctx context.Context, diags diag.Diagnostics, o *tfoPublicAccess) *dtoPublicAccess {
	return &dtoPublicAccess{
		Opensearch:           schemautil.ValueBoolPointer(o.Opensearch),
		OpensearchDashboards: schemautil.ValueBoolPointer(o.OpensearchDashboards),
		Prometheus:           schemautil.ValueBoolPointer(o.Prometheus),
	}
}

// flattenPublicAccess flattens dto object into tf object
func flattenPublicAccess(ctx context.Context, diags diag.Diagnostics, o *dtoPublicAccess) *tfoPublicAccess {
	return &tfoPublicAccess{
		Opensearch:           types.BoolPointerValue(o.Opensearch),
		OpensearchDashboards: types.BoolPointerValue(o.OpensearchDashboards),
		Prometheus:           types.BoolPointerValue(o.Prometheus),
	}
}

var publicAccessAttrs = map[string]attr.Type{
	"opensearch":            types.BoolType,
	"opensearch_dashboards": types.BoolType,
	"prometheus":            types.BoolType,
}

// tfoSaml OpenSearch SAML configuration
type tfoSaml struct {
	Enabled                 types.Bool   `tfsdk:"enabled"`
	IdpEntityId             types.String `tfsdk:"idp_entity_id"`
	IdpMetadataUrl          types.String `tfsdk:"idp_metadata_url"`
	IdpPemtrustedcasContent types.String `tfsdk:"idp_pemtrustedcas_content"`
	RolesKey                types.String `tfsdk:"roles_key"`
	SpEntityId              types.String `tfsdk:"sp_entity_id"`
	SubjectKey              types.String `tfsdk:"subject_key"`
}

// dtoSaml request/response object
type dtoSaml struct {
	Enabled                 bool    `groups:"create,update" json:"enabled"`
	IdpEntityId             string  `groups:"create,update" json:"idp_entity_id"`
	IdpMetadataUrl          string  `groups:"create,update" json:"idp_metadata_url"`
	IdpPemtrustedcasContent *string `groups:"create,update" json:"idp_pemtrustedcas_content,omitempty"`
	RolesKey                *string `groups:"create,update" json:"roles_key,omitempty"`
	SpEntityId              string  `groups:"create,update" json:"sp_entity_id"`
	SubjectKey              *string `groups:"create,update" json:"subject_key,omitempty"`
}

// expandSaml expands tf object into dto object
func expandSaml(ctx context.Context, diags diag.Diagnostics, o *tfoSaml) *dtoSaml {
	return &dtoSaml{
		Enabled:                 o.Enabled.ValueBool(),
		IdpEntityId:             o.IdpEntityId.ValueString(),
		IdpMetadataUrl:          o.IdpMetadataUrl.ValueString(),
		IdpPemtrustedcasContent: schemautil.ValueStringPointer(o.IdpPemtrustedcasContent),
		RolesKey:                schemautil.ValueStringPointer(o.RolesKey),
		SpEntityId:              o.SpEntityId.ValueString(),
		SubjectKey:              schemautil.ValueStringPointer(o.SubjectKey),
	}
}

// flattenSaml flattens dto object into tf object
func flattenSaml(ctx context.Context, diags diag.Diagnostics, o *dtoSaml) *tfoSaml {
	return &tfoSaml{
		Enabled:                 types.BoolValue(o.Enabled),
		IdpEntityId:             types.StringValue(o.IdpEntityId),
		IdpMetadataUrl:          types.StringValue(o.IdpMetadataUrl),
		IdpPemtrustedcasContent: types.StringPointerValue(o.IdpPemtrustedcasContent),
		RolesKey:                types.StringPointerValue(o.RolesKey),
		SpEntityId:              types.StringValue(o.SpEntityId),
		SubjectKey:              types.StringPointerValue(o.SubjectKey),
	}
}

var samlAttrs = map[string]attr.Type{
	"enabled":                   types.BoolType,
	"idp_entity_id":             types.StringType,
	"idp_metadata_url":          types.StringType,
	"idp_pemtrustedcas_content": types.StringType,
	"roles_key":                 types.StringType,
	"sp_entity_id":              types.StringType,
	"subject_key":               types.StringType,
}

// Expand public function that converts tf object into dto
func Expand(ctx context.Context, diags diag.Diagnostics, set types.Set) *dtoUserConfig {
	return schemautil.ExpandSetBlockNested[tfoUserConfig, dtoUserConfig](ctx, diags, expandUserConfig, set)
}

// Flatten public function that converts dto into tf object
func Flatten(ctx context.Context, diags diag.Diagnostics, m map[string]any) types.Set {
	o := new(dtoUserConfig)
	err := schemautil.MapToDTO(m, o)
	if err != nil {
		diags.AddError("Failed to marshal map user config to dto", err.Error())
		return types.SetNull(types.ObjectType{AttrTypes: userConfigAttrs})
	}
	return schemautil.FlattenSetBlockNested[dtoUserConfig, tfoUserConfig](ctx, diags, flattenUserConfig, o, userConfigAttrs)
}
