// Code generated by user config generator. DO NOT EDIT.

package clickhousepostgresql

import (
	"context"

	listvalidator "github.com/hashicorp/terraform-plugin-framework-validators/listvalidator"
	attr "github.com/hashicorp/terraform-plugin-framework/attr"
	datasource "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	diag "github.com/hashicorp/terraform-plugin-framework/diag"
	resource "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	stringdefault "github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	validator "github.com/hashicorp/terraform-plugin-framework/schema/validator"
	types "github.com/hashicorp/terraform-plugin-framework/types"

	schemautil "github.com/aiven/terraform-provider-aiven/internal/schemautil"
)

// NewResourceSchema returns resource schema
func NewResourceSchema() resource.ListNestedBlock {
	return resource.ListNestedBlock{
		Description: "Integration user config",
		NestedObject: resource.NestedBlockObject{Blocks: map[string]resource.Block{"databases": resource.ListNestedBlock{
			Description: "Databases to expose",
			NestedObject: resource.NestedBlockObject{Attributes: map[string]resource.Attribute{
				"database": resource.StringAttribute{
					Computed:    true,
					Default:     stringdefault.StaticString("defaultdb"),
					Description: "PostgreSQL database to expose. The default value is `defaultdb`.",
					Optional:    true,
				},
				"schema": resource.StringAttribute{
					Computed:    true,
					Default:     stringdefault.StaticString("public"),
					Description: "PostgreSQL schema to expose. The default value is `public`.",
					Optional:    true,
				},
			}},
			Validators: []validator.List{listvalidator.SizeAtMost(10)},
		}}},
		Validators: []validator.List{listvalidator.SizeAtMost(1)},
	}
}

// NewDataSourceSchema returns datasource schema
func NewDataSourceSchema() datasource.ListNestedBlock {
	return datasource.ListNestedBlock{
		Description: "Integration user config",
		NestedObject: datasource.NestedBlockObject{Blocks: map[string]datasource.Block{"databases": datasource.ListNestedBlock{
			Description: "Databases to expose",
			NestedObject: datasource.NestedBlockObject{Attributes: map[string]datasource.Attribute{
				"database": datasource.StringAttribute{
					Computed:    true,
					Description: "PostgreSQL database to expose. The default value is `defaultdb`.",
				},
				"schema": datasource.StringAttribute{
					Computed:    true,
					Description: "PostgreSQL schema to expose. The default value is `public`.",
				},
			}},
			Validators: []validator.List{listvalidator.SizeAtMost(10)},
		}}},
		Validators: []validator.List{listvalidator.SizeAtMost(1)},
	}
}

// tfoUserConfig Integration user config
type tfoUserConfig struct {
	Databases types.List `tfsdk:"databases"`
}

// dtoUserConfig request/response object
type dtoUserConfig struct {
	Databases []*dtoDatabases `groups:"create,update" json:"databases,omitempty"`
}

// expandUserConfig expands tf object into dto object
func expandUserConfig(ctx context.Context, diags *diag.Diagnostics, o *tfoUserConfig) *dtoUserConfig {
	databasesVar := schemautil.ExpandListNested[tfoDatabases, dtoDatabases](ctx, diags, expandDatabases, o.Databases)
	if diags.HasError() {
		return nil
	}
	return &dtoUserConfig{Databases: databasesVar}
}

// flattenUserConfig flattens dto object into tf object
func flattenUserConfig(ctx context.Context, diags *diag.Diagnostics, o *dtoUserConfig) *tfoUserConfig {
	databasesVar := schemautil.FlattenListNested[dtoDatabases, tfoDatabases](ctx, diags, flattenDatabases, databasesAttrs, o.Databases)
	if diags.HasError() {
		return nil
	}
	return &tfoUserConfig{Databases: databasesVar}
}

var userConfigAttrs = map[string]attr.Type{"databases": types.ListType{ElemType: types.ObjectType{AttrTypes: databasesAttrs}}}

// tfoDatabases Database to expose
type tfoDatabases struct {
	Database types.String `tfsdk:"database"`
	Schema   types.String `tfsdk:"schema"`
}

// dtoDatabases request/response object
type dtoDatabases struct {
	Database *string `groups:"create,update" json:"database,omitempty"`
	Schema   *string `groups:"create,update" json:"schema,omitempty"`
}

// expandDatabases expands tf object into dto object
func expandDatabases(ctx context.Context, diags *diag.Diagnostics, o *tfoDatabases) *dtoDatabases {
	return &dtoDatabases{
		Database: schemautil.ValueStringPointer(o.Database),
		Schema:   schemautil.ValueStringPointer(o.Schema),
	}
}

// flattenDatabases flattens dto object into tf object
func flattenDatabases(ctx context.Context, diags *diag.Diagnostics, o *dtoDatabases) *tfoDatabases {
	return &tfoDatabases{
		Database: types.StringPointerValue(o.Database),
		Schema:   types.StringPointerValue(o.Schema),
	}
}

var databasesAttrs = map[string]attr.Type{
	"database": types.StringType,
	"schema":   types.StringType,
}

// Expand public function that converts tf object into dto
func Expand(ctx context.Context, diags *diag.Diagnostics, list types.List) *dtoUserConfig {
	return schemautil.ExpandListBlockNested[tfoUserConfig, dtoUserConfig](ctx, diags, expandUserConfig, list)
}

// Flatten public function that converts dto into tf object
func Flatten(ctx context.Context, diags *diag.Diagnostics, m map[string]any) types.List {
	o := new(dtoUserConfig)
	err := schemautil.MapToDTO(m, o)
	if err != nil {
		diags.AddError("failed to marshal map user config to dto", err.Error())
		return types.ListNull(types.ObjectType{AttrTypes: userConfigAttrs})
	}
	return schemautil.FlattenListBlockNested[dtoUserConfig, tfoUserConfig](ctx, diags, flattenUserConfig, userConfigAttrs, o)
}
