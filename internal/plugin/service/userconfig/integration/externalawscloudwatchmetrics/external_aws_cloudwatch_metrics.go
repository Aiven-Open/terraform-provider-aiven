// Code generated by user config generator. DO NOT EDIT.

package externalawscloudwatchmetrics

import (
	"context"

	setvalidator "github.com/hashicorp/terraform-plugin-framework-validators/setvalidator"
	attr "github.com/hashicorp/terraform-plugin-framework/attr"
	datasource "github.com/hashicorp/terraform-plugin-framework/datasource/schema"
	diag "github.com/hashicorp/terraform-plugin-framework/diag"
	resource "github.com/hashicorp/terraform-plugin-framework/resource/schema"
	validator "github.com/hashicorp/terraform-plugin-framework/schema/validator"
	types "github.com/hashicorp/terraform-plugin-framework/types"

	schemautil "github.com/aiven/terraform-provider-aiven/internal/schemautil"
)

// NewResourceSchema returns resource schema
func NewResourceSchema() resource.SetNestedBlock {
	return resource.SetNestedBlock{
		Description: "External AWS CloudWatch Metrics integration user config",
		NestedObject: resource.NestedBlockObject{Blocks: map[string]resource.Block{
			"dropped_metrics": resource.SetNestedBlock{
				Description: "Metrics to not send to AWS CloudWatch (takes precedence over extra_metrics)",
				NestedObject: resource.NestedBlockObject{Attributes: map[string]resource.Attribute{
					"field": resource.StringAttribute{
						Description: "Identifier of a value in the metric.",
						Required:    true,
					},
					"metric": resource.StringAttribute{
						Description: "Identifier of the metric.",
						Required:    true,
					},
				}},
				Validators: []validator.Set{setvalidator.SizeAtMost(1024)},
			},
			"extra_metrics": resource.SetNestedBlock{
				Description: "Metrics to allow through to AWS CloudWatch (in addition to default metrics)",
				NestedObject: resource.NestedBlockObject{Attributes: map[string]resource.Attribute{
					"field": resource.StringAttribute{
						Description: "Identifier of a value in the metric.",
						Required:    true,
					},
					"metric": resource.StringAttribute{
						Description: "Identifier of the metric.",
						Required:    true,
					},
				}},
				Validators: []validator.Set{setvalidator.SizeAtMost(1024)},
			},
		}},
		Validators: []validator.Set{setvalidator.SizeAtMost(1)},
	}
}

// NewDataSourceSchema returns datasource schema
func NewDataSourceSchema() datasource.SetNestedBlock {
	return datasource.SetNestedBlock{
		Description: "External AWS CloudWatch Metrics integration user config",
		NestedObject: datasource.NestedBlockObject{Blocks: map[string]datasource.Block{
			"dropped_metrics": datasource.SetNestedBlock{
				Description: "Metrics to not send to AWS CloudWatch (takes precedence over extra_metrics)",
				NestedObject: datasource.NestedBlockObject{Attributes: map[string]datasource.Attribute{
					"field": datasource.StringAttribute{
						Computed:    true,
						Description: "Identifier of a value in the metric.",
					},
					"metric": datasource.StringAttribute{
						Computed:    true,
						Description: "Identifier of the metric.",
					},
				}},
				Validators: []validator.Set{setvalidator.SizeAtMost(1024)},
			},
			"extra_metrics": datasource.SetNestedBlock{
				Description: "Metrics to allow through to AWS CloudWatch (in addition to default metrics)",
				NestedObject: datasource.NestedBlockObject{Attributes: map[string]datasource.Attribute{
					"field": datasource.StringAttribute{
						Computed:    true,
						Description: "Identifier of a value in the metric.",
					},
					"metric": datasource.StringAttribute{
						Computed:    true,
						Description: "Identifier of the metric.",
					},
				}},
				Validators: []validator.Set{setvalidator.SizeAtMost(1024)},
			},
		}},
		Validators: []validator.Set{setvalidator.SizeAtMost(1)},
	}
}

// tfoUserConfig External AWS CloudWatch Metrics integration user config
type tfoUserConfig struct {
	DroppedMetrics types.Set `tfsdk:"dropped_metrics"`
	ExtraMetrics   types.Set `tfsdk:"extra_metrics"`
}

// dtoUserConfig request/response object
type dtoUserConfig struct {
	DroppedMetrics []*dtoDroppedMetrics `groups:"create,update" json:"dropped_metrics,omitempty"`
	ExtraMetrics   []*dtoExtraMetrics   `groups:"create,update" json:"extra_metrics,omitempty"`
}

// expandUserConfig expands tf object into dto object
func expandUserConfig(ctx context.Context, diags *diag.Diagnostics, o *tfoUserConfig) *dtoUserConfig {
	droppedMetricsVar := schemautil.ExpandSetNested[tfoDroppedMetrics, dtoDroppedMetrics](ctx, diags, expandDroppedMetrics, o.DroppedMetrics)
	if diags.HasError() {
		return nil
	}
	extraMetricsVar := schemautil.ExpandSetNested[tfoExtraMetrics, dtoExtraMetrics](ctx, diags, expandExtraMetrics, o.ExtraMetrics)
	if diags.HasError() {
		return nil
	}
	return &dtoUserConfig{
		DroppedMetrics: droppedMetricsVar,
		ExtraMetrics:   extraMetricsVar,
	}
}

// flattenUserConfig flattens dto object into tf object
func flattenUserConfig(ctx context.Context, diags *diag.Diagnostics, o *dtoUserConfig) *tfoUserConfig {
	droppedMetricsVar := schemautil.FlattenSetNested[dtoDroppedMetrics, tfoDroppedMetrics](ctx, diags, flattenDroppedMetrics, droppedMetricsAttrs, o.DroppedMetrics)
	if diags.HasError() {
		return nil
	}
	extraMetricsVar := schemautil.FlattenSetNested[dtoExtraMetrics, tfoExtraMetrics](ctx, diags, flattenExtraMetrics, extraMetricsAttrs, o.ExtraMetrics)
	if diags.HasError() {
		return nil
	}
	return &tfoUserConfig{
		DroppedMetrics: droppedMetricsVar,
		ExtraMetrics:   extraMetricsVar,
	}
}

var userConfigAttrs = map[string]attr.Type{
	"dropped_metrics": types.SetType{ElemType: types.ObjectType{AttrTypes: droppedMetricsAttrs}},
	"extra_metrics":   types.SetType{ElemType: types.ObjectType{AttrTypes: extraMetricsAttrs}},
}

// tfoDroppedMetrics Metric name and subfield
type tfoDroppedMetrics struct {
	Field  types.String `tfsdk:"field"`
	Metric types.String `tfsdk:"metric"`
}

// dtoDroppedMetrics request/response object
type dtoDroppedMetrics struct {
	Field  string `groups:"create,update" json:"field"`
	Metric string `groups:"create,update" json:"metric"`
}

// expandDroppedMetrics expands tf object into dto object
func expandDroppedMetrics(ctx context.Context, diags *diag.Diagnostics, o *tfoDroppedMetrics) *dtoDroppedMetrics {
	return &dtoDroppedMetrics{
		Field:  o.Field.ValueString(),
		Metric: o.Metric.ValueString(),
	}
}

// flattenDroppedMetrics flattens dto object into tf object
func flattenDroppedMetrics(ctx context.Context, diags *diag.Diagnostics, o *dtoDroppedMetrics) *tfoDroppedMetrics {
	return &tfoDroppedMetrics{
		Field:  types.StringValue(o.Field),
		Metric: types.StringValue(o.Metric),
	}
}

var droppedMetricsAttrs = map[string]attr.Type{
	"field":  types.StringType,
	"metric": types.StringType,
}

// tfoExtraMetrics Metric name and subfield
type tfoExtraMetrics struct {
	Field  types.String `tfsdk:"field"`
	Metric types.String `tfsdk:"metric"`
}

// dtoExtraMetrics request/response object
type dtoExtraMetrics struct {
	Field  string `groups:"create,update" json:"field"`
	Metric string `groups:"create,update" json:"metric"`
}

// expandExtraMetrics expands tf object into dto object
func expandExtraMetrics(ctx context.Context, diags *diag.Diagnostics, o *tfoExtraMetrics) *dtoExtraMetrics {
	return &dtoExtraMetrics{
		Field:  o.Field.ValueString(),
		Metric: o.Metric.ValueString(),
	}
}

// flattenExtraMetrics flattens dto object into tf object
func flattenExtraMetrics(ctx context.Context, diags *diag.Diagnostics, o *dtoExtraMetrics) *tfoExtraMetrics {
	return &tfoExtraMetrics{
		Field:  types.StringValue(o.Field),
		Metric: types.StringValue(o.Metric),
	}
}

var extraMetricsAttrs = map[string]attr.Type{
	"field":  types.StringType,
	"metric": types.StringType,
}

// Expand public function that converts tf object into dto
func Expand(ctx context.Context, diags *diag.Diagnostics, set types.Set) *dtoUserConfig {
	return schemautil.ExpandSetBlockNested[tfoUserConfig, dtoUserConfig](ctx, diags, expandUserConfig, set)
}

// Flatten public function that converts dto into tf object
func Flatten(ctx context.Context, diags *diag.Diagnostics, m map[string]any) types.Set {
	o := new(dtoUserConfig)
	err := schemautil.MapToDTO(m, o)
	if err != nil {
		diags.AddError("failed to marshal map user config to dto", err.Error())
		return types.SetNull(types.ObjectType{AttrTypes: userConfigAttrs})
	}
	return schemautil.FlattenSetBlockNested[dtoUserConfig, tfoUserConfig](ctx, diags, flattenUserConfig, userConfigAttrs, o)
}
