// Code generated by internal/schemautil/userconfig/userconfig_test.go; DO NOT EDIT.

package toapi

// ServiceTypeCassandraToAPIBlueprint is a generated function converts TF schema to API format cassandra ServiceType.
func ServiceTypeCassandraToAPIBlueprint() map[string]interface{} {
	return map[string]interface{}{
		"additional_backup_regions": "primitive",
		"cassandra": map[string]interface{}{
			"batch_size_fail_threshold_in_kb": "primitive",
			"batch_size_warn_threshold_in_kb": "primitive",
			"datacenter":                      "primitive",
		},
		"cassandra_version":     "primitive",
		"ip_filter":             "primitive",
		"migrate_sstableloader": "primitive",
		"private_access":        map[string]interface{}{"prometheus": "primitive"},
		"project_to_fork_from":  "primitive",
		"public_access":         map[string]interface{}{"prometheus": "primitive"},
		"service_to_fork_from":  "primitive",
		"service_to_join_with":  "primitive",
		"static_ips":            "primitive",
	}
}

// ServiceTypeClickhouseToAPIBlueprint is a generated function converts TF schema to API format clickhouse ServiceType.
func ServiceTypeClickhouseToAPIBlueprint() map[string]interface{} {
	return map[string]interface{}{
		"additional_backup_regions": "primitive",
		"ip_filter":                 "primitive",
		"project_to_fork_from":      "primitive",
		"service_to_fork_from":      "primitive",
	}
}

// ServiceTypeElasticsearchToAPIBlueprint is a generated function converts TF schema to API format elasticsearch ServiceType.
func ServiceTypeElasticsearchToAPIBlueprint() map[string]interface{} {
	return map[string]interface{}{
		"additional_backup_regions":             "primitive",
		"custom_domain":                         "primitive",
		"disable_replication_factor_adjustment": "primitive",
		"elasticsearch": map[string]interface{}{
			"action_auto_create_index_enabled":                      "primitive",
			"action_destructive_requires_name":                      "primitive",
			"cluster_max_shards_per_node":                           "primitive",
			"cluster_routing_allocation_node_concurrent_recoveries": "primitive",
			"email_sender_name":                                     "primitive",
			"email_sender_password":                                 "primitive",
			"email_sender_username":                                 "primitive",
			"http_max_content_length":                               "primitive",
			"http_max_header_size":                                  "primitive",
			"http_max_initial_line_length":                          "primitive",
			"indices_fielddata_cache_size":                          "primitive",
			"indices_memory_index_buffer_size":                      "primitive",
			"indices_queries_cache_size":                            "primitive",
			"indices_query_bool_max_clause_count":                   "primitive",
			"indices_recovery_max_bytes_per_sec":                    "primitive",
			"indices_recovery_max_concurrent_file_chunks":           "primitive",
			"override_main_response_version":                        "primitive",
			"reindex_remote_whitelist":                              "primitive",
			"script_max_compilations_rate":                          "primitive",
			"search_max_buckets":                                    "primitive",
			"thread_pool_analyze_queue_size":                        "primitive",
			"thread_pool_analyze_size":                              "primitive",
			"thread_pool_force_merge_size":                          "primitive",
			"thread_pool_get_queue_size":                            "primitive",
			"thread_pool_get_size":                                  "primitive",
			"thread_pool_search_queue_size":                         "primitive",
			"thread_pool_search_size":                               "primitive",
			"thread_pool_search_throttled_queue_size":               "primitive",
			"thread_pool_search_throttled_size":                     "primitive",
			"thread_pool_write_queue_size":                          "primitive",
			"thread_pool_write_size":                                "primitive",
		},
		"elasticsearch_version": "primitive",
		"index_patterns": []interface{}{map[string]interface{}{
			"max_index_count":   "primitive",
			"pattern":           "primitive",
			"sorting_algorithm": "primitive",
		}},
		"index_template": map[string]interface{}{
			"mapping_nested_objects_limit": "primitive",
			"number_of_replicas":           "primitive",
			"number_of_shards":             "primitive",
		},
		"ip_filter":                   "primitive",
		"keep_index_refresh_interval": "primitive",
		"kibana": map[string]interface{}{
			"elasticsearch_request_timeout": "primitive",
			"enabled":                       "primitive",
			"max_old_space_size":            "primitive",
		},
		"max_index_count":    "primitive",
		"opensearch_version": "primitive",
		"private_access": map[string]interface{}{
			"elasticsearch": "primitive",
			"kibana":        "primitive",
			"prometheus":    "primitive",
		},
		"privatelink_access": map[string]interface{}{
			"elasticsearch": "primitive",
			"kibana":        "primitive",
			"prometheus":    "primitive",
		},
		"project_to_fork_from": "primitive",
		"public_access": map[string]interface{}{
			"elasticsearch": "primitive",
			"kibana":        "primitive",
			"prometheus":    "primitive",
		},
		"recovery_basebackup_name": "primitive",
		"service_to_fork_from":     "primitive",
		"static_ips":               "primitive",
	}
}

// ServiceTypeFlinkToAPIBlueprint is a generated function converts TF schema to API format flink ServiceType.
func ServiceTypeFlinkToAPIBlueprint() map[string]interface{} {
	return map[string]interface{}{
		"flink_version":        "primitive",
		"ip_filter":            "primitive",
		"number_of_task_slots": "primitive",
		"privatelink_access": map[string]interface{}{
			"flink":      "primitive",
			"prometheus": "primitive",
		},
	}
}

// ServiceTypeGrafanaToAPIBlueprint is a generated function converts TF schema to API format grafana ServiceType.
func ServiceTypeGrafanaToAPIBlueprint() map[string]interface{} {
	return map[string]interface{}{
		"additional_backup_regions":        "primitive",
		"alerting_enabled":                 "primitive",
		"alerting_error_or_timeout":        "primitive",
		"alerting_max_annotations_to_keep": "primitive",
		"alerting_nodata_or_nullvalues":    "primitive",
		"allow_embedding":                  "primitive",
		"auth_azuread": map[string]interface{}{
			"allow_sign_up":   "primitive",
			"allowed_domains": "primitive",
			"allowed_groups":  "primitive",
			"auth_url":        "primitive",
			"client_id":       "primitive",
			"client_secret":   "primitive",
			"token_url":       "primitive",
		},
		"auth_basic_enabled": "primitive",
		"auth_generic_oauth": map[string]interface{}{
			"allow_sign_up":         "primitive",
			"allowed_domains":       "primitive",
			"allowed_organizations": "primitive",
			"api_url":               "primitive",
			"auth_url":              "primitive",
			"client_id":             "primitive",
			"client_secret":         "primitive",
			"name":                  "primitive",
			"scopes":                "primitive",
			"token_url":             "primitive",
		},
		"auth_github": map[string]interface{}{
			"allow_sign_up":         "primitive",
			"allowed_organizations": "primitive",
			"client_id":             "primitive",
			"client_secret":         "primitive",
			"team_ids":              "primitive",
		},
		"auth_gitlab": map[string]interface{}{
			"allow_sign_up":  "primitive",
			"allowed_groups": "primitive",
			"api_url":        "primitive",
			"auth_url":       "primitive",
			"client_id":      "primitive",
			"client_secret":  "primitive",
			"token_url":      "primitive",
		},
		"auth_google": map[string]interface{}{
			"allow_sign_up":   "primitive",
			"allowed_domains": "primitive",
			"client_id":       "primitive",
			"client_secret":   "primitive",
		},
		"cookie_samesite":                 "primitive",
		"custom_domain":                   "primitive",
		"dashboard_previews_enabled":      "primitive",
		"dashboards_min_refresh_interval": "primitive",
		"dashboards_versions_to_keep":     "primitive",
		"dataproxy_send_user_header":      "primitive",
		"dataproxy_timeout":               "primitive",
		"date_formats": map[string]interface{}{
			"default_timezone": "primitive",
			"full_date":        "primitive",
			"interval_day":     "primitive",
			"interval_hour":    "primitive",
			"interval_minute":  "primitive",
			"interval_month":   "primitive",
			"interval_second":  "primitive",
			"interval_year":    "primitive",
		},
		"disable_gravatar":  "primitive",
		"editors_can_admin": "primitive",
		"external_image_storage": map[string]interface{}{
			"access_key": "primitive",
			"bucket_url": "primitive",
			"provider":   "primitive",
			"secret_key": "primitive",
		},
		"google_analytics_ua_id":   "primitive",
		"ip_filter":                "primitive",
		"metrics_enabled":          "primitive",
		"private_access":           map[string]interface{}{"grafana": "primitive"},
		"privatelink_access":       map[string]interface{}{"grafana": "primitive"},
		"project_to_fork_from":     "primitive",
		"public_access":            map[string]interface{}{"grafana": "primitive"},
		"recovery_basebackup_name": "primitive",
		"service_to_fork_from":     "primitive",
		"smtp_server": map[string]interface{}{
			"from_address":    "primitive",
			"from_name":       "primitive",
			"host":            "primitive",
			"password":        "primitive",
			"port":            "primitive",
			"skip_verify":     "primitive",
			"starttls_policy": "primitive",
			"username":        "primitive",
		},
		"static_ips":                "primitive",
		"user_auto_assign_org":      "primitive",
		"user_auto_assign_org_role": "primitive",
		"viewers_can_edit":          "primitive",
	}
}

// ServiceTypeInfluxdbToAPIBlueprint is a generated function converts TF schema to API format influxdb ServiceType.
func ServiceTypeInfluxdbToAPIBlueprint() map[string]interface{} {
	return map[string]interface{}{
		"additional_backup_regions": "primitive",
		"custom_domain":             "primitive",
		"influxdb": map[string]interface{}{
			"log_queries_after":    "primitive",
			"max_connection_limit": "primitive",
			"max_row_limit":        "primitive",
			"max_select_buckets":   "primitive",
			"max_select_point":     "primitive",
			"query_timeout":        "primitive",
		},
		"ip_filter":                "primitive",
		"private_access":           map[string]interface{}{"influxdb": "primitive"},
		"privatelink_access":       map[string]interface{}{"influxdb": "primitive"},
		"project_to_fork_from":     "primitive",
		"public_access":            map[string]interface{}{"influxdb": "primitive"},
		"recovery_basebackup_name": "primitive",
		"service_to_fork_from":     "primitive",
		"static_ips":               "primitive",
	}
}

// ServiceTypeKafkaToAPIBlueprint is a generated function converts TF schema to API format kafka ServiceType.
func ServiceTypeKafkaToAPIBlueprint() map[string]interface{} {
	return map[string]interface{}{
		"additional_backup_regions": "primitive",
		"custom_domain":             "primitive",
		"ip_filter":                 "primitive",
		"kafka": map[string]interface{}{
			"auto_create_topics_enable":                                  "primitive",
			"compression_type":                                           "primitive",
			"connections_max_idle_ms":                                    "primitive",
			"default_replication_factor":                                 "primitive",
			"group_initial_rebalance_delay_ms":                           "primitive",
			"group_max_session_timeout_ms":                               "primitive",
			"group_min_session_timeout_ms":                               "primitive",
			"log_cleaner_delete_retention_ms":                            "primitive",
			"log_cleaner_max_compaction_lag_ms":                          "primitive",
			"log_cleaner_min_cleanable_ratio":                            "primitive",
			"log_cleaner_min_compaction_lag_ms":                          "primitive",
			"log_cleanup_policy":                                         "primitive",
			"log_flush_interval_messages":                                "primitive",
			"log_flush_interval_ms":                                      "primitive",
			"log_index_interval_bytes":                                   "primitive",
			"log_index_size_max_bytes":                                   "primitive",
			"log_message_downconversion_enable":                          "primitive",
			"log_message_timestamp_difference_max_ms":                    "primitive",
			"log_message_timestamp_type":                                 "primitive",
			"log_preallocate":                                            "primitive",
			"log_retention_bytes":                                        "primitive",
			"log_retention_hours":                                        "primitive",
			"log_retention_ms":                                           "primitive",
			"log_roll_jitter_ms":                                         "primitive",
			"log_roll_ms":                                                "primitive",
			"log_segment_bytes":                                          "primitive",
			"log_segment_delete_delay_ms":                                "primitive",
			"max_connections_per_ip":                                     "primitive",
			"max_incremental_fetch_session_cache_slots":                  "primitive",
			"message_max_bytes":                                          "primitive",
			"min_insync_replicas":                                        "primitive",
			"num_partitions":                                             "primitive",
			"offsets_retention_minutes":                                  "primitive",
			"producer_purgatory_purge_interval_requests":                 "primitive",
			"replica_fetch_max_bytes":                                    "primitive",
			"replica_fetch_response_max_bytes":                           "primitive",
			"socket_request_max_bytes":                                   "primitive",
			"transaction_remove_expired_transaction_cleanup_interval_ms": "primitive",
			"transaction_state_log_segment_bytes":                        "primitive",
		},
		"kafka_authentication_methods": map[string]interface{}{
			"certificate": "primitive",
			"sasl":        "primitive",
		},
		"kafka_connect": "primitive",
		"kafka_connect_config": map[string]interface{}{
			"connector_client_config_override_policy": "primitive",
			"consumer_auto_offset_reset":              "primitive",
			"consumer_fetch_max_bytes":                "primitive",
			"consumer_isolation_level":                "primitive",
			"consumer_max_partition_fetch_bytes":      "primitive",
			"consumer_max_poll_interval_ms":           "primitive",
			"consumer_max_poll_records":               "primitive",
			"offset_flush_interval_ms":                "primitive",
			"offset_flush_timeout_ms":                 "primitive",
			"producer_batch_size":                     "primitive",
			"producer_buffer_memory":                  "primitive",
			"producer_compression_type":               "primitive",
			"producer_linger_ms":                      "primitive",
			"producer_max_request_size":               "primitive",
			"session_timeout_ms":                      "primitive",
		},
		"kafka_rest":               "primitive",
		"kafka_rest_authorization": "primitive",
		"kafka_rest_config": map[string]interface{}{
			"consumer_enable_auto_commit":  "primitive",
			"consumer_request_max_bytes":   "primitive",
			"consumer_request_timeout_ms":  "primitive",
			"producer_acks":                "primitive",
			"producer_compression_type":    "primitive",
			"producer_linger_ms":           "primitive",
			"simpleconsumer_pool_size_max": "primitive",
		},
		"kafka_version": "primitive",
		"private_access": map[string]interface{}{
			"kafka":           "primitive",
			"kafka_connect":   "primitive",
			"kafka_rest":      "primitive",
			"prometheus":      "primitive",
			"schema_registry": "primitive",
		},
		"privatelink_access": map[string]interface{}{
			"jolokia":         "primitive",
			"kafka":           "primitive",
			"kafka_connect":   "primitive",
			"kafka_rest":      "primitive",
			"prometheus":      "primitive",
			"schema_registry": "primitive",
		},
		"public_access": map[string]interface{}{
			"kafka":           "primitive",
			"kafka_connect":   "primitive",
			"kafka_rest":      "primitive",
			"prometheus":      "primitive",
			"schema_registry": "primitive",
		},
		"schema_registry": "primitive",
		"schema_registry_config": map[string]interface{}{
			"leader_eligibility": "primitive",
			"topic_name":         "primitive",
		},
		"static_ips": "primitive",
	}
}

// ServiceTypeKafkaConnectToAPIBlueprint is a generated function converts TF schema to API format kafka_connect ServiceType.
func ServiceTypeKafkaConnectToAPIBlueprint() map[string]interface{} {
	return map[string]interface{}{
		"additional_backup_regions": "primitive",
		"ip_filter":                 "primitive",
		"kafka_connect": map[string]interface{}{
			"connector_client_config_override_policy": "primitive",
			"consumer_auto_offset_reset":              "primitive",
			"consumer_fetch_max_bytes":                "primitive",
			"consumer_isolation_level":                "primitive",
			"consumer_max_partition_fetch_bytes":      "primitive",
			"consumer_max_poll_interval_ms":           "primitive",
			"consumer_max_poll_records":               "primitive",
			"offset_flush_interval_ms":                "primitive",
			"offset_flush_timeout_ms":                 "primitive",
			"producer_batch_size":                     "primitive",
			"producer_buffer_memory":                  "primitive",
			"producer_compression_type":               "primitive",
			"producer_linger_ms":                      "primitive",
			"producer_max_request_size":               "primitive",
			"session_timeout_ms":                      "primitive",
		},
		"private_access": map[string]interface{}{
			"kafka_connect": "primitive",
			"prometheus":    "primitive",
		},
		"privatelink_access": map[string]interface{}{
			"jolokia":       "primitive",
			"kafka_connect": "primitive",
			"prometheus":    "primitive",
		},
		"public_access": map[string]interface{}{
			"kafka_connect": "primitive",
			"prometheus":    "primitive",
		},
		"static_ips": "primitive",
	}
}

// ServiceTypeKafkaMirrormakerToAPIBlueprint is a generated function converts TF schema to API format kafka_mirrormaker ServiceType.
func ServiceTypeKafkaMirrormakerToAPIBlueprint() map[string]interface{} {
	return map[string]interface{}{
		"additional_backup_regions": "primitive",
		"ip_filter":                 "primitive",
		"kafka_mirrormaker": map[string]interface{}{
			"emit_checkpoints_enabled":            "primitive",
			"emit_checkpoints_interval_seconds":   "primitive",
			"refresh_groups_enabled":              "primitive",
			"refresh_groups_interval_seconds":     "primitive",
			"refresh_topics_enabled":              "primitive",
			"refresh_topics_interval_seconds":     "primitive",
			"sync_group_offsets_enabled":          "primitive",
			"sync_group_offsets_interval_seconds": "primitive",
			"sync_topic_configs_enabled":          "primitive",
			"tasks_max_per_cpu":                   "primitive",
		},
		"static_ips": "primitive",
	}
}

// ServiceTypeM3aggregatorToAPIBlueprint is a generated function converts TF schema to API format m3aggregator ServiceType.
func ServiceTypeM3aggregatorToAPIBlueprint() map[string]interface{} {
	return map[string]interface{}{
		"custom_domain":        "primitive",
		"ip_filter":            "primitive",
		"m3_version":           "primitive",
		"m3aggregator_version": "primitive",
		"static_ips":           "primitive",
	}
}

// ServiceTypeM3dbToAPIBlueprint is a generated function converts TF schema to API format m3db ServiceType.
func ServiceTypeM3dbToAPIBlueprint() map[string]interface{} {
	return map[string]interface{}{
		"additional_backup_regions": "primitive",
		"custom_domain":             "primitive",
		"ip_filter":                 "primitive",
		"limits": map[string]interface{}{
			"max_recently_queried_series_blocks":          "primitive",
			"max_recently_queried_series_disk_bytes_read": "primitive",
			"max_recently_queried_series_lookback":        "primitive",
			"query_docs":                                  "primitive",
			"query_require_exhaustive":                    "primitive",
			"query_series":                                "primitive",
		},
		"m3": map[string]interface{}{"tag_options": map[string]interface{}{
			"allow_tag_name_duplicates": "primitive",
			"allow_tag_value_empty":     "primitive",
		}},
		"m3_version": "primitive",
		"m3coordinator_enable_graphite_carbon_ingest": "primitive",
		"m3db_version": "primitive",
		"namespaces": []interface{}{map[string]interface{}{
			"name": "primitive",
			"options": map[string]interface{}{
				"retention_options": map[string]interface{}{
					"block_data_expiry_duration": "primitive",
					"blocksize_duration":         "primitive",
					"buffer_future_duration":     "primitive",
					"buffer_past_duration":       "primitive",
					"retention_period_duration":  "primitive",
				},
				"snapshot_enabled":    "primitive",
				"writes_to_commitlog": "primitive",
			},
			"resolution": "primitive",
			"type":       "primitive",
		}},
		"private_access":       map[string]interface{}{"m3coordinator": "primitive"},
		"project_to_fork_from": "primitive",
		"public_access":        map[string]interface{}{"m3coordinator": "primitive"},
		"rules": map[string]interface{}{"mapping": []interface{}{map[string]interface{}{
			"aggregations": "primitive",
			"drop":         "primitive",
			"filter":       "primitive",
			"name":         "primitive",
			"namespaces":   "primitive",
			"tags": []interface{}{map[string]interface{}{
				"name":  "primitive",
				"value": "primitive",
			}},
		}}},
		"service_to_fork_from": "primitive",
		"static_ips":           "primitive",
	}
}

// ServiceTypeMysqlToAPIBlueprint is a generated function converts TF schema to API format mysql ServiceType.
func ServiceTypeMysqlToAPIBlueprint() map[string]interface{} {
	return map[string]interface{}{
		"additional_backup_regions": "primitive",
		"admin_password":            "primitive",
		"admin_username":            "primitive",
		"backup_hour":               "primitive",
		"backup_minute":             "primitive",
		"binlog_retention_period":   "primitive",
		"ip_filter":                 "primitive",
		"migration": map[string]interface{}{
			"dbname":     "primitive",
			"host":       "primitive",
			"ignore_dbs": "primitive",
			"method":     "primitive",
			"password":   "primitive",
			"port":       "primitive",
			"ssl":        "primitive",
			"username":   "primitive",
		},
		"mysql": map[string]interface{}{
			"connect_timeout":                  "primitive",
			"default_time_zone":                "primitive",
			"group_concat_max_len":             "primitive",
			"information_schema_stats_expiry":  "primitive",
			"innodb_change_buffer_max_size":    "primitive",
			"innodb_flush_neighbors":           "primitive",
			"innodb_ft_min_token_size":         "primitive",
			"innodb_ft_server_stopword_table":  "primitive",
			"innodb_lock_wait_timeout":         "primitive",
			"innodb_log_buffer_size":           "primitive",
			"innodb_online_alter_log_max_size": "primitive",
			"innodb_print_all_deadlocks":       "primitive",
			"innodb_read_io_threads":           "primitive",
			"innodb_rollback_on_timeout":       "primitive",
			"innodb_thread_concurrency":        "primitive",
			"innodb_write_io_threads":          "primitive",
			"interactive_timeout":              "primitive",
			"internal_tmp_mem_storage_engine":  "primitive",
			"long_query_time":                  "primitive",
			"max_allowed_packet":               "primitive",
			"max_heap_table_size":              "primitive",
			"net_buffer_length":                "primitive",
			"net_read_timeout":                 "primitive",
			"net_write_timeout":                "primitive",
			"slow_query_log":                   "primitive",
			"sort_buffer_size":                 "primitive",
			"sql_mode":                         "primitive",
			"sql_require_primary_key":          "primitive",
			"tmp_table_size":                   "primitive",
			"wait_timeout":                     "primitive",
		},
		"mysql_version": "primitive",
		"private_access": map[string]interface{}{
			"mysql":      "primitive",
			"mysqlx":     "primitive",
			"prometheus": "primitive",
		},
		"privatelink_access": map[string]interface{}{
			"mysql":      "primitive",
			"mysqlx":     "primitive",
			"prometheus": "primitive",
		},
		"project_to_fork_from": "primitive",
		"public_access": map[string]interface{}{
			"mysql":      "primitive",
			"mysqlx":     "primitive",
			"prometheus": "primitive",
		},
		"recovery_target_time": "primitive",
		"service_to_fork_from": "primitive",
		"static_ips":           "primitive",
	}
}

// ServiceTypeOpensearchToAPIBlueprint is a generated function converts TF schema to API format opensearch ServiceType.
func ServiceTypeOpensearchToAPIBlueprint() map[string]interface{} {
	return map[string]interface{}{
		"additional_backup_regions":             "primitive",
		"custom_domain":                         "primitive",
		"disable_replication_factor_adjustment": "primitive",
		"index_patterns": []interface{}{map[string]interface{}{
			"max_index_count":   "primitive",
			"pattern":           "primitive",
			"sorting_algorithm": "primitive",
		}},
		"index_template": map[string]interface{}{
			"mapping_nested_objects_limit": "primitive",
			"number_of_replicas":           "primitive",
			"number_of_shards":             "primitive",
		},
		"ip_filter":                   "primitive",
		"keep_index_refresh_interval": "primitive",
		"max_index_count":             "primitive",
		"opensearch": map[string]interface{}{
			"action_auto_create_index_enabled":                      "primitive",
			"action_destructive_requires_name":                      "primitive",
			"cluster_max_shards_per_node":                           "primitive",
			"cluster_routing_allocation_node_concurrent_recoveries": "primitive",
			"email_sender_name":                                     "primitive",
			"email_sender_password":                                 "primitive",
			"email_sender_username":                                 "primitive",
			"http_max_content_length":                               "primitive",
			"http_max_header_size":                                  "primitive",
			"http_max_initial_line_length":                          "primitive",
			"indices_fielddata_cache_size":                          "primitive",
			"indices_memory_index_buffer_size":                      "primitive",
			"indices_queries_cache_size":                            "primitive",
			"indices_query_bool_max_clause_count":                   "primitive",
			"indices_recovery_max_bytes_per_sec":                    "primitive",
			"indices_recovery_max_concurrent_file_chunks":           "primitive",
			"override_main_response_version":                        "primitive",
			"reindex_remote_whitelist":                              "primitive",
			"script_max_compilations_rate":                          "primitive",
			"search_max_buckets":                                    "primitive",
			"thread_pool_analyze_queue_size":                        "primitive",
			"thread_pool_analyze_size":                              "primitive",
			"thread_pool_force_merge_size":                          "primitive",
			"thread_pool_get_queue_size":                            "primitive",
			"thread_pool_get_size":                                  "primitive",
			"thread_pool_search_queue_size":                         "primitive",
			"thread_pool_search_size":                               "primitive",
			"thread_pool_search_throttled_queue_size":               "primitive",
			"thread_pool_search_throttled_size":                     "primitive",
			"thread_pool_write_queue_size":                          "primitive",
			"thread_pool_write_size":                                "primitive",
		},
		"opensearch_dashboards": map[string]interface{}{
			"enabled":                    "primitive",
			"max_old_space_size":         "primitive",
			"opensearch_request_timeout": "primitive",
		},
		"opensearch_version": "primitive",
		"private_access": map[string]interface{}{
			"opensearch":            "primitive",
			"opensearch_dashboards": "primitive",
			"prometheus":            "primitive",
		},
		"privatelink_access": map[string]interface{}{
			"opensearch":            "primitive",
			"opensearch_dashboards": "primitive",
			"prometheus":            "primitive",
		},
		"project_to_fork_from": "primitive",
		"public_access": map[string]interface{}{
			"opensearch":            "primitive",
			"opensearch_dashboards": "primitive",
			"prometheus":            "primitive",
		},
		"recovery_basebackup_name": "primitive",
		"saml": map[string]interface{}{
			"enabled":          "primitive",
			"idp_entity_id":    "primitive",
			"idp_metadata_url": "primitive",
			"roles_key":        "primitive",
			"sp_entity_id":     "primitive",
			"subject_key":      "primitive",
		},
		"service_to_fork_from": "primitive",
		"static_ips":           "primitive",
	}
}

// ServiceTypePgToAPIBlueprint is a generated function converts TF schema to API format pg ServiceType.
func ServiceTypePgToAPIBlueprint() map[string]interface{} {
	return map[string]interface{}{
		"additional_backup_regions": "primitive",
		"admin_password":            "primitive",
		"admin_username":            "primitive",
		"backup_hour":               "primitive",
		"backup_minute":             "primitive",
		"enable_ipv6":               "primitive",
		"ip_filter":                 "primitive",
		"migration": map[string]interface{}{
			"dbname":     "primitive",
			"host":       "primitive",
			"ignore_dbs": "primitive",
			"method":     "primitive",
			"password":   "primitive",
			"port":       "primitive",
			"ssl":        "primitive",
			"username":   "primitive",
		},
		"pg": map[string]interface{}{
			"autovacuum_analyze_scale_factor":        "primitive",
			"autovacuum_analyze_threshold":           "primitive",
			"autovacuum_freeze_max_age":              "primitive",
			"autovacuum_max_workers":                 "primitive",
			"autovacuum_naptime":                     "primitive",
			"autovacuum_vacuum_cost_delay":           "primitive",
			"autovacuum_vacuum_cost_limit":           "primitive",
			"autovacuum_vacuum_scale_factor":         "primitive",
			"autovacuum_vacuum_threshold":            "primitive",
			"bgwriter_delay":                         "primitive",
			"bgwriter_flush_after":                   "primitive",
			"bgwriter_lru_maxpages":                  "primitive",
			"bgwriter_lru_multiplier":                "primitive",
			"deadlock_timeout":                       "primitive",
			"default_toast_compression":              "primitive",
			"idle_in_transaction_session_timeout":    "primitive",
			"jit":                                    "primitive",
			"log_autovacuum_min_duration":            "primitive",
			"log_error_verbosity":                    "primitive",
			"log_line_prefix":                        "primitive",
			"log_min_duration_statement":             "primitive",
			"log_temp_files":                         "primitive",
			"max_files_per_process":                  "primitive",
			"max_locks_per_transaction":              "primitive",
			"max_logical_replication_workers":        "primitive",
			"max_parallel_workers":                   "primitive",
			"max_parallel_workers_per_gather":        "primitive",
			"max_pred_locks_per_transaction":         "primitive",
			"max_prepared_transactions":              "primitive",
			"max_replication_slots":                  "primitive",
			"max_slot_wal_keep_size":                 "primitive",
			"max_stack_depth":                        "primitive",
			"max_standby_archive_delay":              "primitive",
			"max_standby_streaming_delay":            "primitive",
			"max_wal_senders":                        "primitive",
			"max_worker_processes":                   "primitive",
			"pg_partman_bgw.interval":                "primitive",
			"pg_partman_bgw.role":                    "primitive",
			"pg_stat_monitor.pgsm_enable_query_plan": "primitive",
			"pg_stat_monitor.pgsm_max_buckets":       "primitive",
			"pg_stat_statements.track":               "primitive",
			"temp_file_limit":                        "primitive",
			"timezone":                               "primitive",
			"track_activity_query_size":              "primitive",
			"track_commit_timestamp":                 "primitive",
			"track_functions":                        "primitive",
			"track_io_timing":                        "primitive",
			"wal_sender_timeout":                     "primitive",
			"wal_writer_delay":                       "primitive",
		},
		"pg_read_replica":         "primitive",
		"pg_service_to_fork_from": "primitive",
		"pg_stat_monitor_enable":  "primitive",
		"pg_version":              "primitive",
		"pgbouncer": map[string]interface{}{
			"autodb_idle_timeout":       "primitive",
			"autodb_max_db_connections": "primitive",
			"autodb_pool_mode":          "primitive",
			"autodb_pool_size":          "primitive",
			"ignore_startup_parameters": "primitive",
			"min_pool_size":             "primitive",
			"server_idle_timeout":       "primitive",
			"server_lifetime":           "primitive",
			"server_reset_query_always": "primitive",
		},
		"pglookout": map[string]interface{}{"max_failover_replication_time_lag": "primitive"},
		"private_access": map[string]interface{}{
			"pg":         "primitive",
			"pgbouncer":  "primitive",
			"prometheus": "primitive",
		},
		"privatelink_access": map[string]interface{}{
			"pg":         "primitive",
			"pgbouncer":  "primitive",
			"prometheus": "primitive",
		},
		"project_to_fork_from": "primitive",
		"public_access": map[string]interface{}{
			"pg":         "primitive",
			"pgbouncer":  "primitive",
			"prometheus": "primitive",
		},
		"recovery_target_time":      "primitive",
		"service_to_fork_from":      "primitive",
		"shared_buffers_percentage": "primitive",
		"static_ips":                "primitive",
		"synchronous_replication":   "primitive",
		"timescaledb":               map[string]interface{}{"max_background_workers": "primitive"},
		"variant":                   "primitive",
		"work_mem":                  "primitive",
	}
}

// ServiceTypeRedisToAPIBlueprint is a generated function converts TF schema to API format redis ServiceType.
func ServiceTypeRedisToAPIBlueprint() map[string]interface{} {
	return map[string]interface{}{
		"additional_backup_regions": "primitive",
		"ip_filter":                 "primitive",
		"migration": map[string]interface{}{
			"dbname":     "primitive",
			"host":       "primitive",
			"ignore_dbs": "primitive",
			"method":     "primitive",
			"password":   "primitive",
			"port":       "primitive",
			"ssl":        "primitive",
			"username":   "primitive",
		},
		"private_access": map[string]interface{}{
			"prometheus": "primitive",
			"redis":      "primitive",
		},
		"privatelink_access": map[string]interface{}{
			"prometheus": "primitive",
			"redis":      "primitive",
		},
		"project_to_fork_from": "primitive",
		"public_access": map[string]interface{}{
			"prometheus": "primitive",
			"redis":      "primitive",
		},
		"recovery_basebackup_name":                "primitive",
		"redis_acl_channels_default":              "primitive",
		"redis_io_threads":                        "primitive",
		"redis_lfu_decay_time":                    "primitive",
		"redis_lfu_log_factor":                    "primitive",
		"redis_maxmemory_policy":                  "primitive",
		"redis_notify_keyspace_events":            "primitive",
		"redis_number_of_databases":               "primitive",
		"redis_persistence":                       "primitive",
		"redis_pubsub_client_output_buffer_limit": "primitive",
		"redis_ssl":                               "primitive",
		"redis_timeout":                           "primitive",
		"service_to_fork_from":                    "primitive",
		"static_ips":                              "primitive",
	}
}
