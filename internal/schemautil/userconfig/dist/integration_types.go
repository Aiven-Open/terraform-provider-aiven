// Code generated by internal/schemautil/userconfig/userconfig_test.go; DO NOT EDIT.

package dist

import (
	schema "github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"

	schemautil "github.com/aiven/terraform-provider-aiven/internal/schemautil"
)

// IntegrationTypeClickhouseKafka is a generated function returning the schema of the clickhouse_kafka IntegrationType.
func IntegrationTypeClickhouseKafka() *schema.Schema {
	s := map[string]*schema.Schema{"tables": {
		Description: "Tables to create.",
		Elem: &schema.Resource{Schema: map[string]*schema.Schema{
			"auto_offset_reset": {
				Default:     "earliest",
				Description: "Action to take when there is no initial offset in offset store or the desired offset is out of range. The default value is `earliest`.",
				Optional:    true,
				Type:        schema.TypeString,
			},
			"columns": {
				Description: "Table columns.",
				Elem: &schema.Resource{Schema: map[string]*schema.Schema{
					"name": {
						Description: "Column name.",
						Required:    true,
						Type:        schema.TypeString,
					},
					"type": {
						Description: "Column type.",
						Required:    true,
						Type:        schema.TypeString,
					},
				}},
				MaxItems: 100,
				Optional: true,
				Type:     schema.TypeList,
			},
			"data_format": {
				Description: "Message data format. The default value is `JSONEachRow`.",
				Required:    true,
				Type:        schema.TypeString,
			},
			"date_time_input_format": {
				Default:     "basic",
				Description: "Method to read DateTime from text input formats. The default value is `basic`.",
				Optional:    true,
				Type:        schema.TypeString,
			},
			"group_name": {
				Description: "Kafka consumers group. The default value is `clickhouse`.",
				Required:    true,
				Type:        schema.TypeString,
			},
			"handle_error_mode": {
				Default:     "default",
				Description: "How to handle errors for Kafka engine. The default value is `default`.",
				Optional:    true,
				Type:        schema.TypeString,
			},
			"max_block_size": {
				Default:     "0",
				Description: "Number of row collected by poll(s) for flushing data from Kafka. The default value is `0`.",
				Optional:    true,
				Type:        schema.TypeInt,
			},
			"max_rows_per_message": {
				Default:     "1",
				Description: "The maximum number of rows produced in one kafka message for row-based formats. The default value is `1`.",
				Optional:    true,
				Type:        schema.TypeInt,
			},
			"name": {
				Description: "Name of the table.",
				Required:    true,
				Type:        schema.TypeString,
			},
			"num_consumers": {
				Default:     "1",
				Description: "The number of consumers per table per replica. The default value is `1`.",
				Optional:    true,
				Type:        schema.TypeInt,
			},
			"poll_max_batch_size": {
				Default:     "0",
				Description: "Maximum amount of messages to be polled in a single Kafka poll. The default value is `0`.",
				Optional:    true,
				Type:        schema.TypeInt,
			},
			"skip_broken_messages": {
				Default:     "0",
				Description: "Skip at least this number of broken messages from Kafka topic per block. The default value is `0`.",
				Optional:    true,
				Type:        schema.TypeInt,
			},
			"topics": {
				Description: "Kafka topics.",
				Elem: &schema.Resource{Schema: map[string]*schema.Schema{"name": {
					Description: "Name of the topic.",
					Required:    true,
					Type:        schema.TypeString,
				}}},
				MaxItems: 100,
				Optional: true,
				Type:     schema.TypeList,
			},
		}},
		MaxItems: 100,
		Optional: true,
		Type:     schema.TypeList,
	}}

	return &schema.Schema{
		Description:      "ClickhouseKafka user configurable settings",
		DiffSuppressFunc: schemautil.EmptyObjectDiffSuppressFuncSkipArrays(s),
		Elem:             &schema.Resource{Schema: s},
		MaxItems:         1,
		Optional:         true,
		Type:             schema.TypeList,
	}
}

// IntegrationTypeClickhousePostgresql is a generated function returning the schema of the clickhouse_postgresql IntegrationType.
func IntegrationTypeClickhousePostgresql() *schema.Schema {
	s := map[string]*schema.Schema{"databases": {
		Description: "Databases to expose.",
		Elem: &schema.Resource{Schema: map[string]*schema.Schema{
			"database": {
				Default:     "defaultdb",
				Description: "PostgreSQL database to expose. The default value is `defaultdb`.",
				Optional:    true,
				Type:        schema.TypeString,
			},
			"schema": {
				Default:     "public",
				Description: "PostgreSQL schema to expose. The default value is `public`.",
				Optional:    true,
				Type:        schema.TypeString,
			},
		}},
		MaxItems: 10,
		Optional: true,
		Type:     schema.TypeList,
	}}

	return &schema.Schema{
		Description:      "ClickhousePostgresql user configurable settings",
		DiffSuppressFunc: schemautil.EmptyObjectDiffSuppressFuncSkipArrays(s),
		Elem:             &schema.Resource{Schema: s},
		MaxItems:         1,
		Optional:         true,
		Type:             schema.TypeList,
	}
}

// IntegrationTypeDatadog is a generated function returning the schema of the datadog IntegrationType.
func IntegrationTypeDatadog() *schema.Schema {
	s := map[string]*schema.Schema{
		"datadog_dbm_enabled": {
			Description: "Enable Datadog Database Monitoring.",
			Optional:    true,
			Type:        schema.TypeBool,
		},
		"datadog_tags": {
			Description: "Custom tags provided by user.",
			Elem: &schema.Resource{Schema: map[string]*schema.Schema{
				"comment": {
					Description: "Optional tag explanation.",
					Optional:    true,
					Type:        schema.TypeString,
				},
				"tag": {
					Description: "Tag format and usage are described here: https://docs.datadoghq.com/getting_started/tagging. Tags with prefix 'aiven-' are reserved for Aiven.",
					Required:    true,
					Type:        schema.TypeString,
				},
			}},
			MaxItems: 32,
			Optional: true,
			Type:     schema.TypeList,
		},
		"exclude_consumer_groups": {
			Description: "List of custom metrics.",
			Elem:        &schema.Schema{Type: schema.TypeString},
			MaxItems:    1024,
			Optional:    true,
			Type:        schema.TypeList,
		},
		"exclude_topics": {
			Description: "List of topics to exclude.",
			Elem:        &schema.Schema{Type: schema.TypeString},
			MaxItems:    1024,
			Optional:    true,
			Type:        schema.TypeList,
		},
		"include_consumer_groups": {
			Description: "List of custom metrics.",
			Elem:        &schema.Schema{Type: schema.TypeString},
			MaxItems:    1024,
			Optional:    true,
			Type:        schema.TypeList,
		},
		"include_topics": {
			Description: "List of topics to include.",
			Elem:        &schema.Schema{Type: schema.TypeString},
			MaxItems:    1024,
			Optional:    true,
			Type:        schema.TypeList,
		},
		"kafka_custom_metrics": {
			Description: "List of custom metrics.",
			Elem:        &schema.Schema{Type: schema.TypeString},
			MaxItems:    1024,
			Optional:    true,
			Type:        schema.TypeList,
		},
		"max_jmx_metrics": {
			Description: "Maximum number of JMX metrics to send.",
			Optional:    true,
			Type:        schema.TypeInt,
		},
		"opensearch": {
			Description: "Datadog Opensearch Options.",
			DiffSuppressFunc: schemautil.EmptyObjectDiffSuppressFuncSkipArrays(map[string]*schema.Schema{
				"index_stats_enabled": {
					Description: "Enable Datadog Opensearch Index Monitoring.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"pending_task_stats_enabled": {
					Description: "Enable Datadog Opensearch Pending Task Monitoring.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"pshard_stats_enabled": {
					Description: "Enable Datadog Opensearch Primary Shard Monitoring.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
			}),
			Elem: &schema.Resource{Schema: map[string]*schema.Schema{
				"index_stats_enabled": {
					Description: "Enable Datadog Opensearch Index Monitoring.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"pending_task_stats_enabled": {
					Description: "Enable Datadog Opensearch Pending Task Monitoring.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"pshard_stats_enabled": {
					Description: "Enable Datadog Opensearch Primary Shard Monitoring.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
			}},
			MaxItems: 1,
			Optional: true,
			Type:     schema.TypeList,
		},
		"redis": {
			Description: "Datadog Redis Options.",
			DiffSuppressFunc: schemautil.EmptyObjectDiffSuppressFuncSkipArrays(map[string]*schema.Schema{"command_stats_enabled": {
				Default:     false,
				Description: "Enable command_stats option in the agent's configuration. The default value is `false`.",
				Optional:    true,
				Type:        schema.TypeBool,
			}}),
			Elem: &schema.Resource{Schema: map[string]*schema.Schema{"command_stats_enabled": {
				Default:     false,
				Description: "Enable command_stats option in the agent's configuration. The default value is `false`.",
				Optional:    true,
				Type:        schema.TypeBool,
			}}},
			MaxItems: 1,
			Optional: true,
			Type:     schema.TypeList,
		},
	}

	return &schema.Schema{
		Description:      "Datadog user configurable settings",
		DiffSuppressFunc: schemautil.EmptyObjectDiffSuppressFuncSkipArrays(s),
		Elem:             &schema.Resource{Schema: s},
		MaxItems:         1,
		Optional:         true,
		Type:             schema.TypeList,
	}
}

// IntegrationTypeExternalAwsCloudwatchLogs is a generated function returning the schema of the external_aws_cloudwatch_logs IntegrationType.
func IntegrationTypeExternalAwsCloudwatchLogs() *schema.Schema {
	s := map[string]*schema.Schema{"selected_log_fields": {
		Description: "The list of logging fields that will be sent to the integration logging service. The MESSAGE and timestamp fields are always sent.",
		Elem:        &schema.Schema{Type: schema.TypeString},
		MaxItems:    5,
		Optional:    true,
		Type:        schema.TypeList,
	}}

	return &schema.Schema{
		Description:      "ExternalAwsCloudwatchLogs user configurable settings",
		DiffSuppressFunc: schemautil.EmptyObjectDiffSuppressFuncSkipArrays(s),
		Elem:             &schema.Resource{Schema: s},
		MaxItems:         1,
		Optional:         true,
		Type:             schema.TypeList,
	}
}

// IntegrationTypeExternalAwsCloudwatchMetrics is a generated function returning the schema of the external_aws_cloudwatch_metrics IntegrationType.
func IntegrationTypeExternalAwsCloudwatchMetrics() *schema.Schema {
	s := map[string]*schema.Schema{
		"dropped_metrics": {
			Description: "Metrics to not send to AWS CloudWatch (takes precedence over extra_metrics).",
			Elem: &schema.Resource{Schema: map[string]*schema.Schema{
				"field": {
					Description: "Identifier of a value in the metric.",
					Required:    true,
					Type:        schema.TypeString,
				},
				"metric": {
					Description: "Identifier of the metric.",
					Required:    true,
					Type:        schema.TypeString,
				},
			}},
			MaxItems: 1024,
			Optional: true,
			Type:     schema.TypeList,
		},
		"extra_metrics": {
			Description: "Metrics to allow through to AWS CloudWatch (in addition to default metrics).",
			Elem: &schema.Resource{Schema: map[string]*schema.Schema{
				"field": {
					Description: "Identifier of a value in the metric.",
					Required:    true,
					Type:        schema.TypeString,
				},
				"metric": {
					Description: "Identifier of the metric.",
					Required:    true,
					Type:        schema.TypeString,
				},
			}},
			MaxItems: 1024,
			Optional: true,
			Type:     schema.TypeList,
		},
	}

	return &schema.Schema{
		Description:      "ExternalAwsCloudwatchMetrics user configurable settings",
		DiffSuppressFunc: schemautil.EmptyObjectDiffSuppressFuncSkipArrays(s),
		Elem:             &schema.Resource{Schema: s},
		MaxItems:         1,
		Optional:         true,
		Type:             schema.TypeList,
	}
}

// IntegrationTypeExternalElasticsearchLogs is a generated function returning the schema of the external_elasticsearch_logs IntegrationType.
func IntegrationTypeExternalElasticsearchLogs() *schema.Schema {
	s := map[string]*schema.Schema{"selected_log_fields": {
		Description: "The list of logging fields that will be sent to the integration logging service. The MESSAGE and timestamp fields are always sent.",
		Elem:        &schema.Schema{Type: schema.TypeString},
		MaxItems:    5,
		Optional:    true,
		Type:        schema.TypeList,
	}}

	return &schema.Schema{
		Description:      "ExternalElasticsearchLogs user configurable settings",
		DiffSuppressFunc: schemautil.EmptyObjectDiffSuppressFuncSkipArrays(s),
		Elem:             &schema.Resource{Schema: s},
		MaxItems:         1,
		Optional:         true,
		Type:             schema.TypeList,
	}
}

// IntegrationTypeExternalOpensearchLogs is a generated function returning the schema of the external_opensearch_logs IntegrationType.
func IntegrationTypeExternalOpensearchLogs() *schema.Schema {
	s := map[string]*schema.Schema{"selected_log_fields": {
		Description: "The list of logging fields that will be sent to the integration logging service. The MESSAGE and timestamp fields are always sent.",
		Elem:        &schema.Schema{Type: schema.TypeString},
		MaxItems:    5,
		Optional:    true,
		Type:        schema.TypeList,
	}}

	return &schema.Schema{
		Description:      "ExternalOpensearchLogs user configurable settings",
		DiffSuppressFunc: schemautil.EmptyObjectDiffSuppressFuncSkipArrays(s),
		Elem:             &schema.Resource{Schema: s},
		MaxItems:         1,
		Optional:         true,
		Type:             schema.TypeList,
	}
}

// IntegrationTypeKafkaConnect is a generated function returning the schema of the kafka_connect IntegrationType.
func IntegrationTypeKafkaConnect() *schema.Schema {
	s := map[string]*schema.Schema{"kafka_connect": {
		Description: "Kafka Connect service configuration values.",
		DiffSuppressFunc: schemautil.EmptyObjectDiffSuppressFuncSkipArrays(map[string]*schema.Schema{
			"config_storage_topic": {
				Description: "The name of the topic where connector and task configuration data are stored.This must be the same for all workers with the same group_id.",
				Optional:    true,
				Type:        schema.TypeString,
			},
			"group_id": {
				Description: "A unique string that identifies the Connect cluster group this worker belongs to.",
				Optional:    true,
				Type:        schema.TypeString,
			},
			"offset_storage_topic": {
				Description: "The name of the topic where connector and task configuration offsets are stored.This must be the same for all workers with the same group_id.",
				Optional:    true,
				Type:        schema.TypeString,
			},
			"status_storage_topic": {
				Description: "The name of the topic where connector and task configuration status updates are stored.This must be the same for all workers with the same group_id.",
				Optional:    true,
				Type:        schema.TypeString,
			},
		}),
		Elem: &schema.Resource{Schema: map[string]*schema.Schema{
			"config_storage_topic": {
				Description: "The name of the topic where connector and task configuration data are stored.This must be the same for all workers with the same group_id.",
				Optional:    true,
				Type:        schema.TypeString,
			},
			"group_id": {
				Description: "A unique string that identifies the Connect cluster group this worker belongs to.",
				Optional:    true,
				Type:        schema.TypeString,
			},
			"offset_storage_topic": {
				Description: "The name of the topic where connector and task configuration offsets are stored.This must be the same for all workers with the same group_id.",
				Optional:    true,
				Type:        schema.TypeString,
			},
			"status_storage_topic": {
				Description: "The name of the topic where connector and task configuration status updates are stored.This must be the same for all workers with the same group_id.",
				Optional:    true,
				Type:        schema.TypeString,
			},
		}},
		MaxItems: 1,
		Optional: true,
		Type:     schema.TypeList,
	}}

	return &schema.Schema{
		Description:      "KafkaConnect user configurable settings",
		DiffSuppressFunc: schemautil.EmptyObjectDiffSuppressFuncSkipArrays(s),
		Elem:             &schema.Resource{Schema: s},
		MaxItems:         1,
		Optional:         true,
		Type:             schema.TypeList,
	}
}

// IntegrationTypeKafkaLogs is a generated function returning the schema of the kafka_logs IntegrationType.
func IntegrationTypeKafkaLogs() *schema.Schema {
	s := map[string]*schema.Schema{
		"kafka_topic": {
			Description: "Topic name.",
			Required:    true,
			Type:        schema.TypeString,
		},
		"selected_log_fields": {
			Description: "The list of logging fields that will be sent to the integration logging service. The MESSAGE and timestamp fields are always sent.",
			Elem:        &schema.Schema{Type: schema.TypeString},
			MaxItems:    5,
			Optional:    true,
			Type:        schema.TypeList,
		},
	}

	return &schema.Schema{
		Description:      "KafkaLogs user configurable settings",
		DiffSuppressFunc: schemautil.EmptyObjectDiffSuppressFuncSkipArrays(s),
		Elem:             &schema.Resource{Schema: s},
		MaxItems:         1,
		Optional:         true,
		Type:             schema.TypeList,
	}
}

// IntegrationTypeKafkaMirrormaker is a generated function returning the schema of the kafka_mirrormaker IntegrationType.
func IntegrationTypeKafkaMirrormaker() *schema.Schema {
	s := map[string]*schema.Schema{
		"cluster_alias": {
			Description: "The alias under which the Kafka cluster is known to MirrorMaker. Can contain the following symbols: ASCII alphanumerics, '.', '_', and '-'.",
			Optional:    true,
			Type:        schema.TypeString,
		},
		"kafka_mirrormaker": {
			Description: "Kafka MirrorMaker configuration values.",
			DiffSuppressFunc: schemautil.EmptyObjectDiffSuppressFuncSkipArrays(map[string]*schema.Schema{
				"consumer_fetch_min_bytes": {
					Description: "The minimum amount of data the server should return for a fetch request.",
					Optional:    true,
					Type:        schema.TypeInt,
				},
				"producer_batch_size": {
					Description: "The batch size in bytes producer will attempt to collect before publishing to broker.",
					Optional:    true,
					Type:        schema.TypeInt,
				},
				"producer_buffer_memory": {
					Description: "The amount of bytes producer can use for buffering data before publishing to broker.",
					Optional:    true,
					Type:        schema.TypeInt,
				},
				"producer_compression_type": {
					Description: "Specify the default compression type for producers. This configuration accepts the standard compression codecs ('gzip', 'snappy', 'lz4', 'zstd'). It additionally accepts 'none' which is the default and equivalent to no compression.",
					Optional:    true,
					Type:        schema.TypeString,
				},
				"producer_linger_ms": {
					Description: "The linger time (ms) for waiting new data to arrive for publishing.",
					Optional:    true,
					Type:        schema.TypeInt,
				},
				"producer_max_request_size": {
					Description: "The maximum request size in bytes.",
					Optional:    true,
					Type:        schema.TypeInt,
				},
			}),
			Elem: &schema.Resource{Schema: map[string]*schema.Schema{
				"consumer_fetch_min_bytes": {
					Description: "The minimum amount of data the server should return for a fetch request.",
					Optional:    true,
					Type:        schema.TypeInt,
				},
				"producer_batch_size": {
					Description: "The batch size in bytes producer will attempt to collect before publishing to broker.",
					Optional:    true,
					Type:        schema.TypeInt,
				},
				"producer_buffer_memory": {
					Description: "The amount of bytes producer can use for buffering data before publishing to broker.",
					Optional:    true,
					Type:        schema.TypeInt,
				},
				"producer_compression_type": {
					Description: "Specify the default compression type for producers. This configuration accepts the standard compression codecs ('gzip', 'snappy', 'lz4', 'zstd'). It additionally accepts 'none' which is the default and equivalent to no compression.",
					Optional:    true,
					Type:        schema.TypeString,
				},
				"producer_linger_ms": {
					Description: "The linger time (ms) for waiting new data to arrive for publishing.",
					Optional:    true,
					Type:        schema.TypeInt,
				},
				"producer_max_request_size": {
					Description: "The maximum request size in bytes.",
					Optional:    true,
					Type:        schema.TypeInt,
				},
			}},
			MaxItems: 1,
			Optional: true,
			Type:     schema.TypeList,
		},
	}

	return &schema.Schema{
		Description:      "KafkaMirrormaker user configurable settings",
		DiffSuppressFunc: schemautil.EmptyObjectDiffSuppressFuncSkipArrays(s),
		Elem:             &schema.Resource{Schema: s},
		MaxItems:         1,
		Optional:         true,
		Type:             schema.TypeList,
	}
}

// IntegrationTypeLogs is a generated function returning the schema of the logs IntegrationType.
func IntegrationTypeLogs() *schema.Schema {
	s := map[string]*schema.Schema{
		"elasticsearch_index_days_max": {
			Default:     "3",
			Description: "Elasticsearch index retention limit. The default value is `3`.",
			Optional:    true,
			Type:        schema.TypeInt,
		},
		"elasticsearch_index_prefix": {
			Default:     "logs",
			Description: "Elasticsearch index prefix. The default value is `logs`.",
			Optional:    true,
			Type:        schema.TypeString,
		},
		"selected_log_fields": {
			Description: "The list of logging fields that will be sent to the integration logging service. The MESSAGE and timestamp fields are always sent.",
			Elem:        &schema.Schema{Type: schema.TypeString},
			MaxItems:    5,
			Optional:    true,
			Type:        schema.TypeList,
		},
	}

	return &schema.Schema{
		Description:      "Logs user configurable settings",
		DiffSuppressFunc: schemautil.EmptyObjectDiffSuppressFuncSkipArrays(s),
		Elem:             &schema.Resource{Schema: s},
		MaxItems:         1,
		Optional:         true,
		Type:             schema.TypeList,
	}
}

// IntegrationTypeMetrics is a generated function returning the schema of the metrics IntegrationType.
func IntegrationTypeMetrics() *schema.Schema {
	s := map[string]*schema.Schema{
		"database": {
			Description: "Name of the database where to store metric datapoints. Only affects PostgreSQL destinations. Defaults to 'metrics'. Note that this must be the same for all metrics integrations that write data to the same PostgreSQL service.",
			Optional:    true,
			Type:        schema.TypeString,
		},
		"retention_days": {
			Description: "Number of days to keep old metrics. Only affects PostgreSQL destinations. Set to 0 for no automatic cleanup. Defaults to 30 days.",
			Optional:    true,
			Type:        schema.TypeInt,
		},
		"ro_username": {
			Description: "Name of a user that can be used to read metrics. This will be used for Grafana integration (if enabled) to prevent Grafana users from making undesired changes. Only affects PostgreSQL destinations. Defaults to 'metrics_reader'. Note that this must be the same for all metrics integrations that write data to the same PostgreSQL service.",
			Optional:    true,
			Type:        schema.TypeString,
		},
		"source_mysql": {
			Description: "Configuration options for metrics where source service is MySQL.",
			DiffSuppressFunc: schemautil.EmptyObjectDiffSuppressFuncSkipArrays(map[string]*schema.Schema{"telegraf": {
				Description: "Configuration options for Telegraf MySQL input plugin.",
				DiffSuppressFunc: schemautil.EmptyObjectDiffSuppressFuncSkipArrays(map[string]*schema.Schema{
					"gather_event_waits": {
						Description: "Gather metrics from PERFORMANCE_SCHEMA.EVENT_WAITS.",
						Optional:    true,
						Type:        schema.TypeBool,
					},
					"gather_file_events_stats": {
						Description: "gather metrics from PERFORMANCE_SCHEMA.FILE_SUMMARY_BY_EVENT_NAME.",
						Optional:    true,
						Type:        schema.TypeBool,
					},
					"gather_index_io_waits": {
						Description: "Gather metrics from PERFORMANCE_SCHEMA.TABLE_IO_WAITS_SUMMARY_BY_INDEX_USAGE.",
						Optional:    true,
						Type:        schema.TypeBool,
					},
					"gather_info_schema_auto_inc": {
						Description: "Gather auto_increment columns and max values from information schema.",
						Optional:    true,
						Type:        schema.TypeBool,
					},
					"gather_innodb_metrics": {
						Description: "Gather metrics from INFORMATION_SCHEMA.INNODB_METRICS.",
						Optional:    true,
						Type:        schema.TypeBool,
					},
					"gather_perf_events_statements": {
						Description: "Gather metrics from PERFORMANCE_SCHEMA.EVENTS_STATEMENTS_SUMMARY_BY_DIGEST.",
						Optional:    true,
						Type:        schema.TypeBool,
					},
					"gather_process_list": {
						Description: "Gather thread state counts from INFORMATION_SCHEMA.PROCESSLIST.",
						Optional:    true,
						Type:        schema.TypeBool,
					},
					"gather_slave_status": {
						Description: "Gather metrics from SHOW SLAVE STATUS command output.",
						Optional:    true,
						Type:        schema.TypeBool,
					},
					"gather_table_io_waits": {
						Description: "Gather metrics from PERFORMANCE_SCHEMA.TABLE_IO_WAITS_SUMMARY_BY_TABLE.",
						Optional:    true,
						Type:        schema.TypeBool,
					},
					"gather_table_lock_waits": {
						Description: "Gather metrics from PERFORMANCE_SCHEMA.TABLE_LOCK_WAITS.",
						Optional:    true,
						Type:        schema.TypeBool,
					},
					"gather_table_schema": {
						Description: "Gather metrics from INFORMATION_SCHEMA.TABLES.",
						Optional:    true,
						Type:        schema.TypeBool,
					},
					"perf_events_statements_digest_text_limit": {
						Description: "Truncates digest text from perf_events_statements into this many characters.",
						Optional:    true,
						Type:        schema.TypeInt,
					},
					"perf_events_statements_limit": {
						Description: "Limits metrics from perf_events_statements.",
						Optional:    true,
						Type:        schema.TypeInt,
					},
					"perf_events_statements_time_limit": {
						Description: "Only include perf_events_statements whose last seen is less than this many seconds.",
						Optional:    true,
						Type:        schema.TypeInt,
					},
				}),
				Elem: &schema.Resource{Schema: map[string]*schema.Schema{
					"gather_event_waits": {
						Description: "Gather metrics from PERFORMANCE_SCHEMA.EVENT_WAITS.",
						Optional:    true,
						Type:        schema.TypeBool,
					},
					"gather_file_events_stats": {
						Description: "gather metrics from PERFORMANCE_SCHEMA.FILE_SUMMARY_BY_EVENT_NAME.",
						Optional:    true,
						Type:        schema.TypeBool,
					},
					"gather_index_io_waits": {
						Description: "Gather metrics from PERFORMANCE_SCHEMA.TABLE_IO_WAITS_SUMMARY_BY_INDEX_USAGE.",
						Optional:    true,
						Type:        schema.TypeBool,
					},
					"gather_info_schema_auto_inc": {
						Description: "Gather auto_increment columns and max values from information schema.",
						Optional:    true,
						Type:        schema.TypeBool,
					},
					"gather_innodb_metrics": {
						Description: "Gather metrics from INFORMATION_SCHEMA.INNODB_METRICS.",
						Optional:    true,
						Type:        schema.TypeBool,
					},
					"gather_perf_events_statements": {
						Description: "Gather metrics from PERFORMANCE_SCHEMA.EVENTS_STATEMENTS_SUMMARY_BY_DIGEST.",
						Optional:    true,
						Type:        schema.TypeBool,
					},
					"gather_process_list": {
						Description: "Gather thread state counts from INFORMATION_SCHEMA.PROCESSLIST.",
						Optional:    true,
						Type:        schema.TypeBool,
					},
					"gather_slave_status": {
						Description: "Gather metrics from SHOW SLAVE STATUS command output.",
						Optional:    true,
						Type:        schema.TypeBool,
					},
					"gather_table_io_waits": {
						Description: "Gather metrics from PERFORMANCE_SCHEMA.TABLE_IO_WAITS_SUMMARY_BY_TABLE.",
						Optional:    true,
						Type:        schema.TypeBool,
					},
					"gather_table_lock_waits": {
						Description: "Gather metrics from PERFORMANCE_SCHEMA.TABLE_LOCK_WAITS.",
						Optional:    true,
						Type:        schema.TypeBool,
					},
					"gather_table_schema": {
						Description: "Gather metrics from INFORMATION_SCHEMA.TABLES.",
						Optional:    true,
						Type:        schema.TypeBool,
					},
					"perf_events_statements_digest_text_limit": {
						Description: "Truncates digest text from perf_events_statements into this many characters.",
						Optional:    true,
						Type:        schema.TypeInt,
					},
					"perf_events_statements_limit": {
						Description: "Limits metrics from perf_events_statements.",
						Optional:    true,
						Type:        schema.TypeInt,
					},
					"perf_events_statements_time_limit": {
						Description: "Only include perf_events_statements whose last seen is less than this many seconds.",
						Optional:    true,
						Type:        schema.TypeInt,
					},
				}},
				MaxItems: 1,
				Optional: true,
				Type:     schema.TypeList,
			}}),
			Elem: &schema.Resource{Schema: map[string]*schema.Schema{"telegraf": {
				Description: "Configuration options for Telegraf MySQL input plugin.",
				DiffSuppressFunc: schemautil.EmptyObjectDiffSuppressFuncSkipArrays(map[string]*schema.Schema{
					"gather_event_waits": {
						Description: "Gather metrics from PERFORMANCE_SCHEMA.EVENT_WAITS.",
						Optional:    true,
						Type:        schema.TypeBool,
					},
					"gather_file_events_stats": {
						Description: "gather metrics from PERFORMANCE_SCHEMA.FILE_SUMMARY_BY_EVENT_NAME.",
						Optional:    true,
						Type:        schema.TypeBool,
					},
					"gather_index_io_waits": {
						Description: "Gather metrics from PERFORMANCE_SCHEMA.TABLE_IO_WAITS_SUMMARY_BY_INDEX_USAGE.",
						Optional:    true,
						Type:        schema.TypeBool,
					},
					"gather_info_schema_auto_inc": {
						Description: "Gather auto_increment columns and max values from information schema.",
						Optional:    true,
						Type:        schema.TypeBool,
					},
					"gather_innodb_metrics": {
						Description: "Gather metrics from INFORMATION_SCHEMA.INNODB_METRICS.",
						Optional:    true,
						Type:        schema.TypeBool,
					},
					"gather_perf_events_statements": {
						Description: "Gather metrics from PERFORMANCE_SCHEMA.EVENTS_STATEMENTS_SUMMARY_BY_DIGEST.",
						Optional:    true,
						Type:        schema.TypeBool,
					},
					"gather_process_list": {
						Description: "Gather thread state counts from INFORMATION_SCHEMA.PROCESSLIST.",
						Optional:    true,
						Type:        schema.TypeBool,
					},
					"gather_slave_status": {
						Description: "Gather metrics from SHOW SLAVE STATUS command output.",
						Optional:    true,
						Type:        schema.TypeBool,
					},
					"gather_table_io_waits": {
						Description: "Gather metrics from PERFORMANCE_SCHEMA.TABLE_IO_WAITS_SUMMARY_BY_TABLE.",
						Optional:    true,
						Type:        schema.TypeBool,
					},
					"gather_table_lock_waits": {
						Description: "Gather metrics from PERFORMANCE_SCHEMA.TABLE_LOCK_WAITS.",
						Optional:    true,
						Type:        schema.TypeBool,
					},
					"gather_table_schema": {
						Description: "Gather metrics from INFORMATION_SCHEMA.TABLES.",
						Optional:    true,
						Type:        schema.TypeBool,
					},
					"perf_events_statements_digest_text_limit": {
						Description: "Truncates digest text from perf_events_statements into this many characters.",
						Optional:    true,
						Type:        schema.TypeInt,
					},
					"perf_events_statements_limit": {
						Description: "Limits metrics from perf_events_statements.",
						Optional:    true,
						Type:        schema.TypeInt,
					},
					"perf_events_statements_time_limit": {
						Description: "Only include perf_events_statements whose last seen is less than this many seconds.",
						Optional:    true,
						Type:        schema.TypeInt,
					},
				}),
				Elem: &schema.Resource{Schema: map[string]*schema.Schema{
					"gather_event_waits": {
						Description: "Gather metrics from PERFORMANCE_SCHEMA.EVENT_WAITS.",
						Optional:    true,
						Type:        schema.TypeBool,
					},
					"gather_file_events_stats": {
						Description: "gather metrics from PERFORMANCE_SCHEMA.FILE_SUMMARY_BY_EVENT_NAME.",
						Optional:    true,
						Type:        schema.TypeBool,
					},
					"gather_index_io_waits": {
						Description: "Gather metrics from PERFORMANCE_SCHEMA.TABLE_IO_WAITS_SUMMARY_BY_INDEX_USAGE.",
						Optional:    true,
						Type:        schema.TypeBool,
					},
					"gather_info_schema_auto_inc": {
						Description: "Gather auto_increment columns and max values from information schema.",
						Optional:    true,
						Type:        schema.TypeBool,
					},
					"gather_innodb_metrics": {
						Description: "Gather metrics from INFORMATION_SCHEMA.INNODB_METRICS.",
						Optional:    true,
						Type:        schema.TypeBool,
					},
					"gather_perf_events_statements": {
						Description: "Gather metrics from PERFORMANCE_SCHEMA.EVENTS_STATEMENTS_SUMMARY_BY_DIGEST.",
						Optional:    true,
						Type:        schema.TypeBool,
					},
					"gather_process_list": {
						Description: "Gather thread state counts from INFORMATION_SCHEMA.PROCESSLIST.",
						Optional:    true,
						Type:        schema.TypeBool,
					},
					"gather_slave_status": {
						Description: "Gather metrics from SHOW SLAVE STATUS command output.",
						Optional:    true,
						Type:        schema.TypeBool,
					},
					"gather_table_io_waits": {
						Description: "Gather metrics from PERFORMANCE_SCHEMA.TABLE_IO_WAITS_SUMMARY_BY_TABLE.",
						Optional:    true,
						Type:        schema.TypeBool,
					},
					"gather_table_lock_waits": {
						Description: "Gather metrics from PERFORMANCE_SCHEMA.TABLE_LOCK_WAITS.",
						Optional:    true,
						Type:        schema.TypeBool,
					},
					"gather_table_schema": {
						Description: "Gather metrics from INFORMATION_SCHEMA.TABLES.",
						Optional:    true,
						Type:        schema.TypeBool,
					},
					"perf_events_statements_digest_text_limit": {
						Description: "Truncates digest text from perf_events_statements into this many characters.",
						Optional:    true,
						Type:        schema.TypeInt,
					},
					"perf_events_statements_limit": {
						Description: "Limits metrics from perf_events_statements.",
						Optional:    true,
						Type:        schema.TypeInt,
					},
					"perf_events_statements_time_limit": {
						Description: "Only include perf_events_statements whose last seen is less than this many seconds.",
						Optional:    true,
						Type:        schema.TypeInt,
					},
				}},
				MaxItems: 1,
				Optional: true,
				Type:     schema.TypeList,
			}}},
			MaxItems: 1,
			Optional: true,
			Type:     schema.TypeList,
		},
		"username": {
			Description: "Name of the user used to write metrics. Only affects PostgreSQL destinations. Defaults to 'metrics_writer'. Note that this must be the same for all metrics integrations that write data to the same PostgreSQL service.",
			Optional:    true,
			Type:        schema.TypeString,
		},
	}

	return &schema.Schema{
		Description:      "Metrics user configurable settings",
		DiffSuppressFunc: schemautil.EmptyObjectDiffSuppressFuncSkipArrays(s),
		Elem:             &schema.Resource{Schema: s},
		MaxItems:         1,
		Optional:         true,
		Type:             schema.TypeList,
	}
}

// IntegrationTypePrometheus is a generated function returning the schema of the prometheus IntegrationType.
func IntegrationTypePrometheus() *schema.Schema {
	s := map[string]*schema.Schema{"source_mysql": {
		Description: "Configuration options for metrics where source service is MySQL.",
		DiffSuppressFunc: schemautil.EmptyObjectDiffSuppressFuncSkipArrays(map[string]*schema.Schema{"telegraf": {
			Description: "Configuration options for Telegraf MySQL input plugin.",
			DiffSuppressFunc: schemautil.EmptyObjectDiffSuppressFuncSkipArrays(map[string]*schema.Schema{
				"gather_event_waits": {
					Description: "Gather metrics from PERFORMANCE_SCHEMA.EVENT_WAITS.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"gather_file_events_stats": {
					Description: "gather metrics from PERFORMANCE_SCHEMA.FILE_SUMMARY_BY_EVENT_NAME.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"gather_index_io_waits": {
					Description: "Gather metrics from PERFORMANCE_SCHEMA.TABLE_IO_WAITS_SUMMARY_BY_INDEX_USAGE.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"gather_info_schema_auto_inc": {
					Description: "Gather auto_increment columns and max values from information schema.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"gather_innodb_metrics": {
					Description: "Gather metrics from INFORMATION_SCHEMA.INNODB_METRICS.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"gather_perf_events_statements": {
					Description: "Gather metrics from PERFORMANCE_SCHEMA.EVENTS_STATEMENTS_SUMMARY_BY_DIGEST.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"gather_process_list": {
					Description: "Gather thread state counts from INFORMATION_SCHEMA.PROCESSLIST.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"gather_slave_status": {
					Description: "Gather metrics from SHOW SLAVE STATUS command output.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"gather_table_io_waits": {
					Description: "Gather metrics from PERFORMANCE_SCHEMA.TABLE_IO_WAITS_SUMMARY_BY_TABLE.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"gather_table_lock_waits": {
					Description: "Gather metrics from PERFORMANCE_SCHEMA.TABLE_LOCK_WAITS.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"gather_table_schema": {
					Description: "Gather metrics from INFORMATION_SCHEMA.TABLES.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"perf_events_statements_digest_text_limit": {
					Description: "Truncates digest text from perf_events_statements into this many characters.",
					Optional:    true,
					Type:        schema.TypeInt,
				},
				"perf_events_statements_limit": {
					Description: "Limits metrics from perf_events_statements.",
					Optional:    true,
					Type:        schema.TypeInt,
				},
				"perf_events_statements_time_limit": {
					Description: "Only include perf_events_statements whose last seen is less than this many seconds.",
					Optional:    true,
					Type:        schema.TypeInt,
				},
			}),
			Elem: &schema.Resource{Schema: map[string]*schema.Schema{
				"gather_event_waits": {
					Description: "Gather metrics from PERFORMANCE_SCHEMA.EVENT_WAITS.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"gather_file_events_stats": {
					Description: "gather metrics from PERFORMANCE_SCHEMA.FILE_SUMMARY_BY_EVENT_NAME.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"gather_index_io_waits": {
					Description: "Gather metrics from PERFORMANCE_SCHEMA.TABLE_IO_WAITS_SUMMARY_BY_INDEX_USAGE.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"gather_info_schema_auto_inc": {
					Description: "Gather auto_increment columns and max values from information schema.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"gather_innodb_metrics": {
					Description: "Gather metrics from INFORMATION_SCHEMA.INNODB_METRICS.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"gather_perf_events_statements": {
					Description: "Gather metrics from PERFORMANCE_SCHEMA.EVENTS_STATEMENTS_SUMMARY_BY_DIGEST.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"gather_process_list": {
					Description: "Gather thread state counts from INFORMATION_SCHEMA.PROCESSLIST.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"gather_slave_status": {
					Description: "Gather metrics from SHOW SLAVE STATUS command output.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"gather_table_io_waits": {
					Description: "Gather metrics from PERFORMANCE_SCHEMA.TABLE_IO_WAITS_SUMMARY_BY_TABLE.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"gather_table_lock_waits": {
					Description: "Gather metrics from PERFORMANCE_SCHEMA.TABLE_LOCK_WAITS.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"gather_table_schema": {
					Description: "Gather metrics from INFORMATION_SCHEMA.TABLES.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"perf_events_statements_digest_text_limit": {
					Description: "Truncates digest text from perf_events_statements into this many characters.",
					Optional:    true,
					Type:        schema.TypeInt,
				},
				"perf_events_statements_limit": {
					Description: "Limits metrics from perf_events_statements.",
					Optional:    true,
					Type:        schema.TypeInt,
				},
				"perf_events_statements_time_limit": {
					Description: "Only include perf_events_statements whose last seen is less than this many seconds.",
					Optional:    true,
					Type:        schema.TypeInt,
				},
			}},
			MaxItems: 1,
			Optional: true,
			Type:     schema.TypeList,
		}}),
		Elem: &schema.Resource{Schema: map[string]*schema.Schema{"telegraf": {
			Description: "Configuration options for Telegraf MySQL input plugin.",
			DiffSuppressFunc: schemautil.EmptyObjectDiffSuppressFuncSkipArrays(map[string]*schema.Schema{
				"gather_event_waits": {
					Description: "Gather metrics from PERFORMANCE_SCHEMA.EVENT_WAITS.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"gather_file_events_stats": {
					Description: "gather metrics from PERFORMANCE_SCHEMA.FILE_SUMMARY_BY_EVENT_NAME.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"gather_index_io_waits": {
					Description: "Gather metrics from PERFORMANCE_SCHEMA.TABLE_IO_WAITS_SUMMARY_BY_INDEX_USAGE.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"gather_info_schema_auto_inc": {
					Description: "Gather auto_increment columns and max values from information schema.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"gather_innodb_metrics": {
					Description: "Gather metrics from INFORMATION_SCHEMA.INNODB_METRICS.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"gather_perf_events_statements": {
					Description: "Gather metrics from PERFORMANCE_SCHEMA.EVENTS_STATEMENTS_SUMMARY_BY_DIGEST.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"gather_process_list": {
					Description: "Gather thread state counts from INFORMATION_SCHEMA.PROCESSLIST.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"gather_slave_status": {
					Description: "Gather metrics from SHOW SLAVE STATUS command output.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"gather_table_io_waits": {
					Description: "Gather metrics from PERFORMANCE_SCHEMA.TABLE_IO_WAITS_SUMMARY_BY_TABLE.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"gather_table_lock_waits": {
					Description: "Gather metrics from PERFORMANCE_SCHEMA.TABLE_LOCK_WAITS.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"gather_table_schema": {
					Description: "Gather metrics from INFORMATION_SCHEMA.TABLES.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"perf_events_statements_digest_text_limit": {
					Description: "Truncates digest text from perf_events_statements into this many characters.",
					Optional:    true,
					Type:        schema.TypeInt,
				},
				"perf_events_statements_limit": {
					Description: "Limits metrics from perf_events_statements.",
					Optional:    true,
					Type:        schema.TypeInt,
				},
				"perf_events_statements_time_limit": {
					Description: "Only include perf_events_statements whose last seen is less than this many seconds.",
					Optional:    true,
					Type:        schema.TypeInt,
				},
			}),
			Elem: &schema.Resource{Schema: map[string]*schema.Schema{
				"gather_event_waits": {
					Description: "Gather metrics from PERFORMANCE_SCHEMA.EVENT_WAITS.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"gather_file_events_stats": {
					Description: "gather metrics from PERFORMANCE_SCHEMA.FILE_SUMMARY_BY_EVENT_NAME.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"gather_index_io_waits": {
					Description: "Gather metrics from PERFORMANCE_SCHEMA.TABLE_IO_WAITS_SUMMARY_BY_INDEX_USAGE.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"gather_info_schema_auto_inc": {
					Description: "Gather auto_increment columns and max values from information schema.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"gather_innodb_metrics": {
					Description: "Gather metrics from INFORMATION_SCHEMA.INNODB_METRICS.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"gather_perf_events_statements": {
					Description: "Gather metrics from PERFORMANCE_SCHEMA.EVENTS_STATEMENTS_SUMMARY_BY_DIGEST.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"gather_process_list": {
					Description: "Gather thread state counts from INFORMATION_SCHEMA.PROCESSLIST.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"gather_slave_status": {
					Description: "Gather metrics from SHOW SLAVE STATUS command output.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"gather_table_io_waits": {
					Description: "Gather metrics from PERFORMANCE_SCHEMA.TABLE_IO_WAITS_SUMMARY_BY_TABLE.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"gather_table_lock_waits": {
					Description: "Gather metrics from PERFORMANCE_SCHEMA.TABLE_LOCK_WAITS.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"gather_table_schema": {
					Description: "Gather metrics from INFORMATION_SCHEMA.TABLES.",
					Optional:    true,
					Type:        schema.TypeBool,
				},
				"perf_events_statements_digest_text_limit": {
					Description: "Truncates digest text from perf_events_statements into this many characters.",
					Optional:    true,
					Type:        schema.TypeInt,
				},
				"perf_events_statements_limit": {
					Description: "Limits metrics from perf_events_statements.",
					Optional:    true,
					Type:        schema.TypeInt,
				},
				"perf_events_statements_time_limit": {
					Description: "Only include perf_events_statements whose last seen is less than this many seconds.",
					Optional:    true,
					Type:        schema.TypeInt,
				},
			}},
			MaxItems: 1,
			Optional: true,
			Type:     schema.TypeList,
		}}},
		MaxItems: 1,
		Optional: true,
		Type:     schema.TypeList,
	}}

	return &schema.Schema{
		Description:      "Prometheus user configurable settings",
		DiffSuppressFunc: schemautil.EmptyObjectDiffSuppressFuncSkipArrays(s),
		Elem:             &schema.Resource{Schema: s},
		MaxItems:         1,
		Optional:         true,
		Type:             schema.TypeList,
	}
}
